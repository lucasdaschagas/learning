//ImageMapUtil component.
(function($){
	'use strict';
	
	/*
	 * Initialize Map Utility
	*/
	var self;
	
	function ImageMapUtil() {
		
	}
	
	ImageMapUtil.prototype._init = function(options) {
		
		self=this;
		
		// This is the easiest way to have default options.
		var settings = $.extend({
				assetHeight: 0,
				assetWidth: 0,
				backgroundColor: '#FFFFFF', 
				borderColor: '#3399ff',
				borderThickness: '2px',
				canvasId: 'hotspotCanvas', 
				hotspotWidth: 10, // this needs to be 10x10 in image coordinates in 
				hotspotHeight: 10, // order for the viewer to interpret the imagemap as hotspot
				hotspotClassName: 'hotspot',
				mapClassName: 'map',
				hotspotPrefix: 'Hotspot',
				mapPrefix: 'ImageMap',
				mapType: 'imagemap',
				viewerComponent: null,
                viewerContainer: null,
				viewerId: 's7viewer'
			}, options );
		
		this.assetHeight;
		this.assetWidth;
		this.borderThickness = settings.borderThickness;
		this.canvasId = settings.canvasId;
		this.hotspotClassName = settings.hotspotClassName;
		this.hotspotPrefix = settings.hotspotPrefix;
		this.mapPrefix = settings.mapPrefix;
		this.hotspotWidth= settings.hotspotWidth;
		this.hotspotHeight= settings.hotspotHeight;
		this.mapClassName = settings.mapClassName;
		this.mapType = settings.mapType;
		this.mode = 'default';
		this.viewerId = settings.viewerId;
		this.viewerComponent = settings.viewerComponent;
        this.viewerContainer = settings.viewerContainer;
		this.borderColor = settings.borderColor;
		this.backgroundColor = settings.backgroundColor;
		
		this.$viewerContainer = $('#'+this.viewerId);
		this.$mapCanvas = $('#'+this.canvasId);
		
		this.dragstartX = 0;
		this.dragstartY = 0;
		this.mapId = undefined;
		this.panning = false;
		this.zooming = false;
		
		this._initUI();
		
		this._initUIActions();
	}
	
	ImageMapUtil.prototype.setAssetDimensions = function(w,h) {
		this.assetHeight = h;
		this.assetWidth = w;
		
		//trigger resize to fit canvas to viewer based on asset and canvas dimensions
		if(this.$viewerContainer != undefined) {
			$(document).trigger('resize');
		}
	}
	
	ImageMapUtil.prototype._selectMap = function(mapId) {
		setMapSelected($('#'+mapId));
	}
	
	ImageMapUtil.prototype._setMapType = function(mapType) {
		this.mapType = mapType;
	}
	
	ImageMapUtil.prototype._getMapType = function(mapType) {
		 return this.mapType;
	}
	
	ImageMapUtil.prototype._setMode = function(mode, mapId) {
		this.mode = mode;
		switch(this.mode) {
		case 'create':
			//disable pan
			this.$mapCanvas.data('panEnabled', false);
			this.$mapCanvas.draggable({ disabled: true });
			this.mapId = mapId;
			break;
		case 'edit':
			this.$mapCanvas.data('panEnabled', true);
			this.$mapCanvas.draggable("enable");
			break;
		default:
			this.$mapCanvas.data('panEnabled', true);
		this.$mapCanvas.draggable("enable");
		this.mapId = undefined;
		}
	}
	
	ImageMapUtil.prototype._initUI = function() {
		
		//set map type
		this._setMapType(this.mapType);
	}
	
	ImageMapUtil.prototype._initUIActions = function() {
		
		this.$mapCanvas.data('drawingMap', false);
		
		//enable pan feature
		this.$mapCanvas.data('panEnabled', true);
		
		//add listeners for viewer events
		this.viewerComponent.addEventListener( s7viewers.s7sdk.event.CapabilityStateEvent.NOTF_ZOOM_CAPABILITY_STATE, this._onZoomStateChange);
		this.viewerComponent.addEventListener( s7viewers.s7sdk.event.ZoomRgnEvent.NOTF_ZOOM_RGN, this._zoomRegionUpdate);
        this.viewerContainer.addEventListener( s7viewers.s7sdk.event.ResizeEvent.COMPONENT_RESIZE, this._resizeCanvasEvent);
		
		//trigger resize to fit canvas to viewer based on asset and canvas dimensions
		this.$viewerContainer.trigger('resize');
		
		//manage mousedown 
		this.$mapCanvas.on('mousedown', function(e) {
			
			if(self.mode !== 'create' || self.mapType !== self.mapClassName) {
				return;
			}
			
			if(e.originalEvent.layerX > self.$viewerContainer.width() 
					|| e.originalEvent.layerY > self.$viewerContainer.height()) {
    			return;
    		}
			
			self.$mapCanvas.data('drawingMap', true);
		});
		
		this.$mapCanvas.on('mousemove', function(e) {
			 
			if(self.mode !== 'create' || !self.$mapCanvas.data('drawingMap')) {
				return;
			}
			
            // we need to calculate our own canvas coordinates
            // instead of using e.orignalEvent.layerX/Y
            // because this event sometime originates in the canvas in which case it is Ok to use layerX/Y
            // but if you mouse over already created map dom elements layerX/Y will be in map cooridnates and the 
            // the calculated size will be < 0 which is incorrect 
            var x = e.clientX - self.$mapCanvas.offset().left;
            var y = e.clientY - self.$mapCanvas.offset().top;
            self._drawMap(self.mapId, x, y);
		});
		
		this.$mapCanvas.on('mouseup', function(e) {
			
			if(self.mode !== 'create') {
				
				if(self.mode === 'default') {
					self.$mapCanvas.trigger({type:'map-canvas-click'});
				}
				return;
			}
			
			var x;
			var y;
			var coordinates;
			var point;
			var $map;
			var marginLeft = parseInt(self.$mapCanvas.css('left').replace('px',''));
			var marginTop = parseInt(self.$mapCanvas.css('top').replace('px',''));
			
			if(self.$mapCanvas.data('drawingMap')) {
				
				$map = $('#'+self.mapId);
				
				if($map.length < 1) {
					return;
				}
				
				x = parseInt($map.css('left').replace('px', '')) + marginLeft;
				y = parseInt($map.css('top').replace('px', '')) + marginTop;
				point = new s7viewers.s7sdk.Point2D(x, y);
				coordinates = self.viewerComponent.viewPointToImagePixels(point);
                
                // get width and height in image coordinates
                // then convert width and height to view coordiantes
                var bottomRight = new s7viewers.s7sdk.Point2D(point.x + $map.width(), point.y + $map.height());
                var brCoordinates = self.viewerComponent.viewPointToImagePixels(bottomRight);
                var width = brCoordinates.x - coordinates.x;
                var height = brCoordinates.y - coordinates.y
			
			    $map.data('id', self.mapId);
			    $map.data('x', Math.round(coordinates.x));
			    $map.data('y', Math.round(coordinates.y));
			    $map.data('wid', Math.round(width));
			    $map.data('hei', Math.round(height));
			}
			else {
				
				if(self.mapType !== self.hotspotClassName) {
					return;
				}
                 // this should stay at the center of the hotspot, exectly where the user clicked
                // do not use layerX/Y coordinates from the event, if a hotspot overlaps an image map layerX/Y will be
                // in tareget coordinates, which in this case would be the underlying image map not the canvas
                var canvasX = e.clientX - self.$mapCanvas.offset().left;
                var canvasY = e.clientY - self.$mapCanvas.offset().top;
                
                // now convert to view coordinates
                x = canvasX + marginLeft;
	    		y = canvasY + marginTop;
	    		
                // now convert to image coordinates
	    		point = new s7viewers.s7sdk.Point2D(x, y);
				coordinates = self.viewerComponent.viewPointToImagePixels(point);
                
                // now adjust for the fixed 10x10 width of the hotspot in image coordinates
                x -= self.hotspotWidth/2;
                y -= self.hotspotHeight/2;
				
				// set data
				var data = ({id:self.mapId, x:Math.round(coordinates.x), y:Math.round(coordinates.y), label: self.hotspotPrefix+' '+(self.mapId+1)});
				
				// add hotspot
				$map = self._addHotspot(self.mapId, data);
				
				// position hotspot
				self._positionHotspot($map);
                
                $map.data('id', self.mapId);
			    $map.data('x', Math.round(coordinates.x));
			    $map.data('y', Math.round(coordinates.y));
                $map.data('wid', self.hotspotWidth);
			    $map.data('hei', self.hotspotHeight);
			}
            
			if($map.hasClass(self.hotspotClassName)) {
				$map.data('coord', $map.data('x') + ',' + $map.data('y'));
			}
			else {
				$map.data('coord', getCoordinatesFromSize($map.data('x'), $map.data('y'), $map.data('wid'), $map.data('hei')));
			}
			
			//clean up
			self.$mapCanvas.data('drawingMap', false);
			self._setMode('default');
			
			//add event listeners for dragging, selection, etc
			self._addUserInteractionEvents($map);
			
			// send notification of map creation
	        self.$mapCanvas.trigger({type:'map-update', 'mapId':$map.data('id'), 'map':$map.data()});
		});
		
		
		
		//canvas for panning
		this.$mapCanvas.draggable({
			
    		start: function(e) {
        		//if the viewer is not zooming bail
        		if(!self.zooming) {
        			e.preventDefault();
        		}
        		
				if(!self.$mapCanvas.data('panEnabled')) {
					e.preventDefault();
					return;
				}
				 		
        		//set start x and y properties for panning..
    	    	this.dragstartX = Math.round(e.originalEvent.screenX);
    	    	this.dragstartY = Math.round(e.originalEvent.screenY); 
        	},
        	drag: function(e) {
        		
        		if(!self.$mapCanvas.data('panEnabled')) {
					e.preventDefault();
					return;
				}
        		
        		//hide canvas for now
        		self.$mapCanvas.css('visibility','hidden');
        		
        		var x = ((e.originalEvent.screenX - this.dragstartX) < 0)? parseFloat(-.005) : parseFloat(.005);
        		var y = ((e.originalEvent.screenY - this.dragstartY) < 0)? parseFloat(-.005) : parseFloat(.005);
        		
        		//pan
        		self.viewerComponent.zoomNPan(x,y);
        	},
        	stop: function(e) {
        		
        		if(!self.$mapCanvas.data('panEnabled')) {
					e.preventDefault();
					return;
				}
        		//show canvas
        		self.$mapCanvas.css('visibility','visible');
        		
        		//set flag
        		self.panning = false;
        		
        		//update UI to reposition canvas
        		self._zoomRegionUpdate();
        	}
        });
		
		
		//send notification of map creation
        self.$mapCanvas.trigger({type:'map-editor-ready'});
	}
	
	ImageMapUtil.prototype._addUserInteractionEvents = function ($map) {
		
		if($map.data('hasEvents') != undefined && $map.data('hasEvents') == true) {
			return;
		}
		
		$map.on('mousedown', function() {
            
			//select map
			setMapSelected($(this));
			
			//notify of map select
			self.$mapCanvas.trigger({type:'map-select', 'mapId':this.id});
		});
		
		$map.on('mouseover', function() {
			if(self.mode !== 'create') {
				self._setMode('edit');
			}
		});
		
		$map.on('mouseout', function() {
			if(self.mode === 'create') {
				return;
			}
			self._setMode('default');
		});
		
		//make draggable
		$map.draggable();
		
		//add hotspot events for drag and click
		$map.on('drag', function(e) {
    		//setMapSelected($(this));
            
            // remove handles temporary while dragging, you cannot grab the handles while dragging anyway
            // it just makes it look akward
            $('.editHandle').remove();          
		});
		
		$map.on('dragstop', function(e) {
			
			var marginLeft = parseInt(self.$mapCanvas.css('left').replace('px',''));
			var marginTop = parseInt(self.$mapCanvas.css('top').replace('px',''));
			
			var x = parseInt($(this).css('left').replace('px', '')) + marginLeft;
			var y = parseInt($(this).css('top').replace('px', '')) + marginTop;
			
			// add offset for centering hotspot
			if($(this).hasClass(self.hotspotClassName)) {
				x = x + $(this).width()/2;
				y = y + $(this).height()/2;
			}
			
			var point = new s7viewers.s7sdk.Point2D(x, y);
			var coordinates = self.viewerComponent.viewPointToImagePixels(point);
            
			$(this).data('x', Math.round(coordinates.x));
			$(this).data('y', Math.round(coordinates.y));           
			
            //set coordinates property
            if($(this).hasClass(self.hotspotClassName)) {
            	$(this).data('coord', $map.data('x') + ',' + $map.data('y'));
            }
            else if($(this).hasClass(self.mapClassName)) {
            	$(this).data('coord', getCoordinatesFromSize($map.data('x'), $map.data('y'), $map.data('wid'), $map.data('hei')));
            }
            
            if(self.mode !== 'create') {
            	self._setMode('default');
            }
            
            //send notification of map update
            self.$mapCanvas.trigger({type:'map-update', 'mapId':this.id, 'map':$(this).data()});
        });
		
		$map.data('hasEvents', true);
	}
	
	
	ImageMapUtil.prototype._onZoomStateChange = function (e) {
		if(e.s7event.state.hasCapability(s7viewers.s7sdk.ZoomCapabilityState.ZOOM_RESET)){
			self.zooming = true;
		}else{
			self.zooming = false;
			self._resizeCanvasEvent();
		}
		
		//send notification of map creation
        self.$mapCanvas.trigger({type:'zoom-state-changed'});
	}
	
	ImageMapUtil.prototype._resizeCanvasEvent = function(e) {
		
		if (this.zooming) {
			return;
		}
		
		var $canvas	= self.$mapCanvas;
	
        // get the top/left image corner in view coordinates
        var point = new s7viewers.s7sdk.Point2D(0, 0);
		var coordinates = self.viewerComponent.imagePixelsToViewPoint(point);
        
        // if the image is in reset state the offset will be >= 0 depending on aspect
        // we do not care about the other case since canvas will cover all of the image
        // if the image is zoomed in
        var xOffset = Math.round(coordinates.x) > 0 ? Math.round(coordinates.x) : 0;
        var yOffset = Math.round(coordinates.y) > 0 ? Math.round(coordinates.y) : 0;
    	
    	// canvas only covers image area, adjust its size and margins
    	$canvas.width($canvas.width - 2 * xOffset);
    	$canvas.height($canvas.height - 2 * yOffset);
    	$canvas.css('left', xOffset);
    	$canvas.css('top', yOffset);
    	  	
    	//position maps and hotspots
    	self._positionMaps();
    	self._positionHotspots();
    	
	}
	
	ImageMapUtil.prototype._zoomRegionUpdate = function zoomRegionUpdate(e) {
		
		var $canvas	= self.$mapCanvas;
		var $viewer = $('#'+self.viewerId);
		
		//if not zooming
		if(!self.zooming) {
    		return;
    	}
		
		var $canvas	= self.$mapCanvas;
		var $viewer = $('#'+self.viewerId);
    	
    	//update canvas size
		$canvas.width($viewer.width());
		$canvas.height($viewer.height());
    	
    	var canvasWidth = $canvas.width();
    	var canvasHeight = $canvas.height();
    	
    	//reposition
    	$canvas.css('top', 0);
    	$canvas.css('left', 0);
    	
    	//if there are no maps 
    	if($canvas.children().length < 1) {
    		return;
    	}

    	//position maps and hotspots
    	self._positionMaps();
    	self._positionHotspots();
	}
	
	ImageMapUtil.prototype._addHotspot = function(id, data) {
		
		var point = new s7viewers.s7sdk.Point2D(Math.round(data.x), Math.round(data.y));
		var coordinates = this.viewerComponent.imagePixelsToViewPoint(point);
		
		var $map = $(new Coral.Icon().set({
			id: id,
			icon: "target",
			size: "L"
		}));
		$map.addClass(this.hotspotClassName);
		$map.css('position', 'absolute');
		$map.css('float', 'left');
		$map.css('top', coordinates.y+'px');
		$map.css('left', coordinates.x+'px');
		$map.css('z-index', 1000);
		
        //add to canvas
        this.$mapCanvas.append($map);
        
		$map.data('x', Math.round(data.x));
		$map.data('y', Math.round(data.y));
		$map.data('label', data.label);
		$map.data('target', data.target);
		$map.data('url', data.url);
		$map.data('coord', Math.round(data.x)+','+Math.round(data.y));
        
        //add event listeners
		this._addUserInteractionEvents($map);

		Coral.commons.ready($map, function() {
			//position hotspot
			self._positionHotspot($map);
		});
		
		setMapSelected($map);
		
		$map.data('type', this.hotspotClassName);
		
		return $map;
	}
	
	ImageMapUtil.prototype._addMap = function(id, data) {
		
		//create map
		var $map = $('<div>', {'id':id, 'class': this.mapClassName});
		$map.css('position', 'absolute');
		$map.css('border', this.borderThickness+' solid '+this.borderColor);
		
		//get map
		this.$mapCanvas.append($map);
		
		//set props
        $map.data('id', id);     
		$map.data('x', data.x); // map size/position is in image coordinates
		$map.data('y', data.y);
        $map.data('wid', data.wid);
		$map.data('hei', data.hei);
		$map.data('label', data.label);
		$map.data('target', data.target);
		$map.data('url', data.url);
		$map.data('coord', Math.round(data.x)+','+Math.round(data.y));
		
		this._positionMap($map);
		
		//add event listeners
		this._addUserInteractionEvents($map);
		
		$map.data('type', this.mapClassName);
		
		return $map;
	}
	
	ImageMapUtil.prototype._drawMap = function(id, currentX, currentY) {
		
		var $map = $('#'+id);
		
		if($map.length < 1) {
			
			//create map
			$map = $('<div>', {'id':id, 'class': this.mapClassName});
			$map.css('position', 'absolute');
			$map.css('top', currentY);
			$map.css('left', currentX);
			$map.css('border', this.borderThickness+' solid '+this.borderColor);
			
			$map = this.$mapCanvas.append($map);
		}
		else {
			
			var x = parseInt($map.css('left').replace('px', ''));
			var y = parseInt($map.css('top').replace('px', ''));
			
			var size = this._getSizeFromCoordinates(x, y, currentX, currentY);
            if(size.h >= 1) {
				$map.height(size.h);
			}
			if(size.w >= 1) {
				$map.width(size.w);
			}         
		}
		$map.data('type', this.mapClassName);
		$map.data('label', this.mapPrefix +' '+(id+1));
		return $map;
	}
	
	ImageMapUtil.prototype._setMapMetadata = function(id, metadata) {
		
		var $map = $('#'+id);
		$map.data('metadata', metadata);
		
		//send notification of map update
        self.$mapCanvas.trigger({type:'map-update', 'mapId':$map.attr('id'), 'map':$map.data()});
        
        // after map-update all DOM objects are re-created
        // any stored DOM elements are invalid, stored $map is invalid, retrieve it again
        return $('#'+id);
	}
	
	ImageMapUtil.prototype._positionHotspots = function() {
		var i;
		var maps = $('.'+this.hotspotClassName);
		var len = maps.length;
		
		for(i=0;i<len;i++) {
			var $map = $(maps[i]);
			this._positionHotspot($map);
		}
	}
	
	ImageMapUtil.prototype._positionHotspot = function($map) {
        
        // the hotspot center point in image coordinates
		// var point = new s7viewers.s7sdk.Point2D(Number($map.data('x')) - self.hotspotWidth/2, Number($map.data('y'))- self.hotspotHeight/2);
        var point = new s7viewers.s7sdk.Point2D(Number($map.data('x')), Number($map.data('y')));       
        
        // now convert to view coordinates
		var coordinates = this.viewerComponent.imagePixelsToViewPoint(point);
        
        // get the canvas margin
		var marginLeft = parseInt(this.$mapCanvas.css('left').replace('px',''));
		var marginTop = parseInt(this.$mapCanvas.css('top').replace('px',''));
        
        // adjust the coordinates for the margin
		coordinates.x = Math.round(coordinates.x)-marginLeft;
		coordinates.y = Math.round(coordinates.y)-marginTop;
        
        // now center the icon around the hotspot center
		coordinates.x = coordinates.x - $map.width()/2;
		coordinates.y = coordinates.y - $map.height()/2;
        
		$map.css('left', coordinates.x+'px');
		$map.css('top', coordinates.y+'px');
	}
	
	ImageMapUtil.prototype._positionMaps = function() {
		var i;
		var maps = $('.'+this.mapClassName);
		var len = maps.length;
		
		for(i=0;i<len;i++) {
			var $map = $(maps[i]);
			this._positionMap($map);
		}
		
		//if showing map resizing controls reposition them too and reselect map
		this._selectMap($('.editHandle').first().attr('target'));
	}
	
	ImageMapUtil.prototype._positionMap = function($map) {
        
        //
        // convert map size/position from image to view coordinates
        //
        
        // top left corner first
		var point = new s7viewers.s7sdk.Point2D(Number($map.data('x')), Number($map.data('y')));
		var coordinates = this.viewerComponent.imagePixelsToViewPoint(point);
        
        // then convert width and height to view coordiantes
        var bottomRight = new s7viewers.s7sdk.Point2D(Number($map.data('x')) + Number($map.data('wid')), Number($map.data('y')) + Number($map.data('hei')) );
        var brCoordinates = this.viewerComponent.imagePixelsToViewPoint(bottomRight);
        var width = brCoordinates.x - coordinates.x;
        var height = brCoordinates.y - coordinates.y
        
        // translate for the margin
		var marginLeft = parseInt(this.$mapCanvas.css('left').replace('px',''));
		var marginTop = parseInt(this.$mapCanvas.css('top').replace('px',''));
		coordinates.x = coordinates.x-marginLeft;
		coordinates.y = coordinates.y-marginTop;
        
        // set the dom element position/size
		$map.css('left', Math.round(coordinates.x) +'px');
		$map.css('top', Math.round(coordinates.y) +'px');
        $map.height(Math.round(height));
		$map.width(Math.round(width));
	}
	
	ImageMapUtil.prototype._emptyCanvas = function() {
		//remove maps/hotspots
		$('.hotspot').remove();
		$('.map').remove();
		$('.editHandle').remove();
	}
	
	ImageMapUtil.prototype._removeByID = function(id) {
		var $el = $('#'+id);
		//remove maps/hotspots
		$el.remove();
		$('.editHandle').remove();
	}
	
	ImageMapUtil.prototype._getSizeFromCoordinates = function(x1,y1,x2,y2) {
		var ret = {w:0,h:0};
		var wei = x2-x1;
		var hei = y2-y1;
		ret = {w:wei,h:hei};
		return ret;
	}
	
	ImageMapUtil.prototype._create_and_fire_MouseEvent = function(obj,typ,x,y) {
		if( document.createEvent ) {
		  var eventObj = document.createEvent('MouseEvents');
		  eventObj.initMouseEvent( typ, true, false, window, 0, 0, 0, x, y, false, false, false, false, 0, null );
		  obj.dispatchEvent(eventObj);
		}
	}
	
	function setMapSelected($map) {
		
		var zIndex = $('#hotspotCanvas').css('z-index');
		
		//deselect maps
		$('.'+self.mapClassName).removeClass('selected');
		$('.'+self.mapClassName).css('z-index', zIndex);
		$('.'+self.mapClassName).css('background-color', 'transparent');
		
		//deselect hotspots
		$('.'+self.hotspotClassName).removeClass('selected');
		$('.'+self.hotspotClassName).css('opacity', .5);
		$('.'+self.hotspotClassName).css('z-index', zIndex);
		$('.'+self.hotspotClassName).css('background-color', 'transparent');
		
		//remove edit controls
		$('.editHandle').remove();
		
		//update zIndex
		zIndex = parseInt(zIndex+10);
		
		$map.addClass('selected');
		
		//update newly selected hotspot / map
		if(isHotspot($map)) {
			$map.css('opacity', 1);
		}
		else {
			var $canvas = $map.parent();
			var offset = 4;
			
			var zIndex = $canvas.css('z-index');
			
			zIndex ++;
			
			//top left
			var tLx = parseInt($map.css('left'))-offset;
			var tLy = parseInt($map.css('top'))-offset;
			
			//top right
			var tRx = parseInt($map.css('left'))+$map.width()-offset;
			var tRy = parseInt($map.css('top'))-offset;
			
			//bottom left
			var blx = parseInt($map.css('left'))-offset;
			var bly = parseInt($map.css('top'))+$map.height()-offset;
			
			//bottom right
			var bRx = parseInt($map.css('left')) +$map.width()-offset;
			var bRy = parseInt($map.css('top')) + $map.height()-offset;
			
			//add handles for resizing map
			var topLeftHandle = '<div id="topLeftHandle" target="'+$map.attr('id')+'" class="editHandle" style="position:absolute; left:'+tLx+'px; top:'+tLy+'px;">';
			var topRightHandle = '<div id="topRightHandle" target="'+$map.attr('id')+'" class="editHandle" style="position:absolute; left:'+tRx+'px; top:'+tRy+'px;">';
			var bottomLeftHandle = '<div id="bottomLeftHandle" target="'+$map.attr('id')+'" class="editHandle" style="position:absolute; left:'+blx+'px; top:'+bly+'px;">';
			var bottomRightHandle = '<div id="bottomRightHandle" target="'+$map.attr('id')+'" class="editHandle" style="position:absolute; left:'+bRx+'px; top:'+bRy+'px;">';
			
			$canvas.append(topLeftHandle);
			$canvas.append(topRightHandle);
			$canvas.append(bottomLeftHandle);
			$canvas.append(bottomRightHandle);
			
			$('.editHandle').width('8px');
			$('.editHandle').height('8px');
			$('.editHandle').css('z-index',zIndex);
			$('.editHandle').css('background-color', self.borderColor);
			$('.editHandle').css('opacity', .5);
			$('.editHandle').css('border', self.borderThickness +' solid #000');
			
			//make draggable
			$('.editHandle').draggable();
			
			//add hotspot events for drag and click
			$('.editHandle').on('dragstart', function(e) {
				
				var $map = $('#'+$(this).attr('target'));
				
				this.mapEditControlDragStartX = Math.round(e.originalEvent.screenX);
				this.mapEditControlDragStartY = Math.round(e.originalEvent.screenY);
				this.beginningWidth = $map.width();
				this.beginningHeight = $map.height();
				this.mapLeftPosition = parseInt($map.css('left'));
				this.mapTopPosition = parseInt($map.css('top'));
				
				$('.editHandle[id!='+this.id+']').hide();
			});
			
			$('.editHandle').on('drag', function(e) {
				
				var leftOffset;
				var $map = $('#'+$(this).attr('target'));
				var size;
				var wid;
				var hei;
				
				var x;
				var y;
					
				switch(this.id) {
					case'topLeftHandle':
						
						var nw = this.mapEditControlDragStartX - e.originalEvent.screenX;
						var nh = this.mapEditControlDragStartY-e.originalEvent.screenY;
						
						wid = this.beginningWidth + nw;
						hei = this.beginningHeight + nh;
						
						var distanceLeft = this.mapEditControlDragStartX - e.originalEvent.screenX;
						var distanceTop = this.mapEditControlDragStartY - e.originalEvent.screenY;
						
						var leftLocation = this.mapLeftPosition - distanceLeft;
						var topLocation = this.mapTopPosition - distanceTop;
						
						if(wid > 1) {
							$map.css('left', leftLocation+'px');
						}
						
						if(hei > 1) {
							$map.css('top', topLocation+'px');
						}
						
						break;
					case'topRightHandle':
						
						var nw = e.originalEvent.screenX - this.mapEditControlDragStartX;
						var nh = this.mapEditControlDragStartY-e.originalEvent.screenY;
						
						wid = this.beginningWidth + nw;
						hei = this.beginningHeight + nh;
						
						var distance = this.mapEditControlDragStartY - e.originalEvent.screenY;
						var topLocation = this.mapTopPosition - distance;
						
						$map.css('top', topLocation+'px');
						break;
					case'bottomLeftHandle':
						
						var nw = this.mapEditControlDragStartX - e.originalEvent.screenX;
						var nh = e.originalEvent.screenY - this.mapEditControlDragStartY;
						
						wid = this.beginningWidth + nw;
						hei = this.beginningHeight + nh;
						
						var distanceLeft = this.mapEditControlDragStartX - e.originalEvent.screenX;
						var leftLocation = this.mapLeftPosition - distanceLeft;
						
						if(wid > 1) {
							$map.css('left', leftLocation+'px');
						}
						
						break;
					case'bottomRightHandle':
						var nw = e.originalEvent.screenX - this.mapEditControlDragStartX;
						var nh = e.originalEvent.screenY - this.mapEditControlDragStartY;
						
						wid = this.beginningWidth + nw;
						hei = this.beginningHeight + nh;
						break;
					default:
				}
				
				$map.width(wid);
				$map.height(hei);
			});
			
			$('.editHandle').on('dragstop', function(e) {
				
				var $map = $('#'+$(this).attr('target'));
				
				var marginLeft = parseInt(self.$mapCanvas.css('left').replace('px',''));
				var marginTop = parseInt(self.$mapCanvas.css('top').replace('px',''));
				var x = parseInt($map.css('left').replace('px', '')) + marginLeft;
				var y = parseInt($map.css('top').replace('px', '')) + marginTop;
				
				var point = new s7viewers.s7sdk.Point2D(x, y);
				var coordinates = self.viewerComponent.viewPointToImagePixels(point);
                
                // get width and height in image coordinates
                // then convert width and height to view coordiantes
                var bottomRight = new s7viewers.s7sdk.Point2D(point.x + $map.width(), point.y + $map.height());
                var brCoordinates = self.viewerComponent.viewPointToImagePixels(bottomRight);
                var width = brCoordinates.x - coordinates.x;
                var height = brCoordinates.y - coordinates.y
                
				$map.data('x', Math.round(coordinates.x));
				$map.data('y', Math.round(coordinates.y));
				$map.data('wid', Math.round(width));
				$map.data('hei', Math.round(height));				
	            
	            //set coordinates property
				$map.data('coord', getCoordinatesFromSize($map.data('x'), $map.data('y'), $map.data('wid'), $map.data('hei')));
                
                // we need to restore the selection after the map-update
                setMapSelected($map);
	            
	            //send notification of map update
	            self.$mapCanvas.trigger({type:'map-update', 'mapId':$map.attr('id'), 'map':$map.data()});
	        });
		}
	}
	
	function isHotspot($map) {
		return $map.hasClass(self.hotspotClassName);
	}
	
	function getCoordinatesFromSize(x1, y1, w, h) {
		var x2 = Number(x1) + Number(w);
		var y2 = Number(y1) + Number(h);
		var coords = x1 + ',' + y1 + ',' + x2 + ' ,' + y2;
		
		return coords;
	}
    
	/**
	 * Add ImageMapUtil to global namespace
	 */
	window.ImageMapUtil = ImageMapUtil;
}(jQuery));