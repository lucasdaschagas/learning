/*
 * Copyright 1997-2008 Day Management AG
 * Barfuesserplatz 6, 4001 Basel, Switzerland
 * All Rights Reserved.
 *
 * This software is the confidential and proprietary information of
 * Day Management AG, ("Confidential Information"). You shall not
 * disclose such Confidential Information and shall use it only in
 * accordance with the terms of the license agreement you entered into
 * with Day.
 */

/**
 * @class CQ.form.Selection
 * @extends CQ.form.CompositeField
 * The Selection lets the user choose between several options. The options can
 * be part of the configuration or loaded from a JSON repsone. The Selection can
 * either be rendered as dropdown (select), combobox (select plus free text entry),
 * checkboxes or radio buttons.
 * @constructor
 * Creates a new Selection.
 * @param {Object} config The config object
 */
CQ.form.Selection = CQ.Ext.extend(CQ.form.CompositeField, {

    /**
     * @cfg {Boolean} allowBlank
     * Type "checkbox": False to validate that at least one is checked.<br>
     * All other types: False to validate that the value length > 0.<br>
     * Defaults to true.
     */
    allowBlank: true,

    /**
     * @cfg {String} type
     * The type of the selection. One of "checkbox", "radio", "select" or "combobox".
     * "checkbox" is the only type that supports mulitple values.<br>
     * Defaults to "radio".
     */
    type: "radio",

    /**
     * @cfg {Object[]/String} options
     * <p>The options of the selection. An option has the properties "value", "text"
     * and "qtip" whereas latter is applied only for types "select" and "combobox".
     * "combobox" will always submit the visible text - the "value" property
     * is irrelevant.</p>
     * Example for the object array structure:
     * <pre><code>
[
    {
        value: "pink", // all types except "combobox"
        text: "Pink",
        qtip: "Real Pink" // "select" and "combobox"
    }
]
</code></pre>
     * <p>If options is a string it is assumed to be an URL pointing to a JSON
     * resource that returns the options (same structure as above applies). This
     * should be either an absolute URL or it can use the path of the content
     * resource being edited using a placeholder
     * ({@link #Selection.PATH_PLACEHOLDER} = "$PATH"), for example:
     * <code>$PATH.options.json</code>.</p>
     * <p>Set {@link #optionsRoot} and
     * {@link #optionsTextField}, {@link #optionsValueField} or {@link #optionsQTipField}
     * if the properties are named differently and/or if the array with the options is
     * in a sub-property of the JSON returned from the URL.</p>
     * <p>A note on the "text" property when used inside a "select" or "combo" type
     * {@link CQ.form.Selection Selection}: HTML entities are not handled correctly. In the
     * drop-down, they are used unescaped, whereas they are displayed in escaped form in the
     * textfield. Therefore you should avoid them. This is no problem for high-ansi
     * characters, as CQ is completely UTF-8 based. Nevertheless, you'll have to avoid &lt;
     * and &gt; for the "text" property. &amp; works in most contexts.</p>
     */
    options: null,

    /**
     * @cfg {String} optionsRoot
     * <p>Name of the property containing the options array when using a custom JSON URL
     * for {@link #options}. Use "." to denote the root object/array of the result itself.</p>
     * <p>Only if optionsRoot is set, {@link #optionsTextField}, {@link #optionsValueField} and
     * {@link #optionsQTipField} will be used. If optionsRoot is <em>not</em> set, the returned
     * JSON must be a standard widgets json, "resulting" in the exact format as described in
     * {@link #options} - it will also be passed through {@link CQ.Util#formatData}. Not set by default.
     */
    optionsRoot: null,

    /**
     * @cfg {String} optionsTextField
     * Name of the field for the options text when using a custom JSON URL for {@link #options}
     * (defaults to "text"). Only used if {@link #optionsRoot} is set.
     */
    optionsTextField: null,

    /**
     * @cfg {String} optionsValueField
     * name of the field for the options value when using a custom JSON URL for {@link #options}
     * (defaults to "value"). Only used if {@link #optionsRoot} is set.
     */
    optionsValueField: null,

    /**
     * @cfg {String} optionsQTipField
     * Name of the field for the options qtip when using a custom JSON URL for {@link #options}
     * (defaults to "qtip"). Only used if {@link #optionsRoot} is set.
     */
    optionsQTipField: null,

    /**
     * @cfg {Function/String} optionsCallback
     * <p>A function or the name of a function that is called on <code>processRecords</code>
     * to populate the options.</p>
     * <p>The function allows to set or request options that depend on the current
     * path or content record.
     * <div class="mdetail-params">
     *      <strong style="font-weight: normal;">The function will be called with the following arguments:</strong>
     *      <ul><li><code>path</code> : String<div class="sub-desc">The content path</div></li></ul>
     *      <ul><li><code>record</code> : CQ.Ext.data.Record<div class="sub-desc">The content record</div></li></ul>
     *  </div>
     * @deprecated Use {@link #optionsProvider} instead
     */
    optionsCallback: null,

    /**
     * @cfg {Function/String} optionsProvider
     * <p>A function or the name of a function that will be called on <code>processRecords</code>
     * to receive the options. The function must return an array of options. See {@link #options}
     * for more information on options.</p>
     * <p>The options provider allows to set or request options that depend on the current
     * path or content record.
     * <div class="mdetail-params">
     *      <strong style="font-weight: normal;">The provider will be called with the following arguments:</strong>
     *      <ul><li><code>path</code> : String<div class="sub-desc">The content path</div></li></ul>
     *      <ul><li><code>record</code> : CQ.Ext.data.Record<div class="sub-desc">The content record</div></li></ul>
     *  </div>
     * @since 5.3
     */
    optionsProvider: null,

    /**
     * @cfg {Object} optionsConfig
     * The config of the options components. For selections of type "checkbox" and
     * "radio" optionsConfig will be passed to every single
     * {@link CQ.Ext.form.CheckBox CheckBox} or {@link CQ.Ext.form.Radio Radio}.
     * For "select" and "combobox" optionsConfig will be passed to the underlaying
     * {@link CQ.Ext.form.ComboBox ComboBox}.<br>
     * Please check the underlaying component's config options to see the possible
     * properties. Be aware that some properties are set internally and cannot
     * be overwritten.
     * @type Object
     */
    optionsConfig: null,

    /**
     * @cfg {Boolean} checkboxBoolTypeHint
     * For selections of type "checkbox" with a single-value it is often desirable to store
     * this value as a boolean in the repository. To do so, set this config to true to
     * automatically add a hidden field setting <code>&lt;name&gt;@TypeHint=Boolean</code>
     * for the Sling POST servlet. Defaults to false.
     * @since 5.4
     */
    checkboxBoolTypeHint: false,

    /**
     * @cfg {String} blankText Error text to display if the {@link #allowBlank} validation fails
     * (for selections of type checkbox only).
     * Defaults to "You must select at least one item in this group".
     * @since 5.4
     */
    blankText : CQ.I18n.getMessage("You must select at least one item in this group"),

    /**
     * @cfg {String} sortDir
     * The sort direction of the the options. If "ASC" or "DESC" the options will
     * be sorted by its (internationalized) text. Defaults to <code>null</code>.
     * @since 5.4
     */
    sortDir: null,

    /**
     * The combo box of selections of type "select" and "combobox".
     * @type CQ.Ext.form.ComboBox
     * @private
     */
    comboBox: null,

    /**
     * Hidden field of selections of type "select".
     * @type CQ.Ext.form.Hidden
     * @private
     */
    hiddenField: null,

    /**
     * The checkbox/radio components of selections of type "checkbox" and "radio".
     * @type CQ.Ext.util.MixedCollection
     * @private
     */
    optionItems: null,

    /**
     * Indicates if the selection is of type "combobox".
     * @type Boolean
     * @private
     */
    isComboBox: false,

    /**
     * Indicates if the selection is of type "select".
     * @type Boolean
     * @private
     */
    isSelect: false,

    /**
     * Indicates if the selection is of type "checkbox".
     * @type Boolean
     * @private
     */
    isCheckbox: false,

    /**
     * Indicates if the selection is of type "radio".
     * @type Boolean
     * @private
     */
    isRadio: false,

    /**
     * Returns the normalized data value. "undefined" or the combo box'
     * {@link CQ.Ext.form.ComboBox#emptyText emptyText} return an empty
     * string (""). Type "checkbox" return always an array even if there is
     * only single checkbox available.<br>
     * To return the raw value see {@link #getRawValue}.
     * @return {String/String[]} value The field value
     */
    getValue : function(){
        if(!this.rendered) {
            return this.value != null ? this.value : "";
        }

        if (this.isComboBox || this.isSelect) {
            // > listbox
            if (this.isSelect) {
                return this.hiddenField.getValue();
            }
            // > combobox
            return this.comboBox.getValue();
        }

        if (this.isRadio) {
            if (this.optionItems) {
				for (var i = 0; i < this.optionItems.length; i++) {
					var item = this.optionItems.itemAt(i);
					if (item.getValue()) {
						return item.inputValue;
					}
				}
			}
            return "";
        }

        // > checkbox
        var v = [];
		if (this.optionItems) {
			for (var i = 0; i < this.optionItems.length; i++) {
				var item = this.optionItems.itemAt(i);
				if (item.getValue()) {
					v.push(item.inputValue);
				}
			}
		}
		else {
			return v[this.initialValue];
		}
        return v;
    },

    /**
     * Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}.
     * @return {Mixed} value The field value
     */
    getRawValue: function(){
        if (this.isRadio || this.isCheckbox) {
            return this.getValue();
        }
        else {
            // combobox or select
            return this.comboBox.getRawValue();
        }
    },

    /**
     * Loads the options of the selection if an optionsProvider is available.
     * This method is usually called solely by {@link CQ.Dialog} after its
     * content has been loaded.
     * @param {String} path content path (optional)
     * @private
     */
    processPath: function(path) {
        if (this.optionsProvider) {
            // @since 5.3
            if (path == undefined) path = null;
            var options = [];
            try {
                if (typeof this.optionsProvider != "function") {
                    try {
                        var p;
                        eval("p = " + this.optionsProvider);
                        options = p.call(this, path);
                    }
                    catch (e) {
                        CQ.Log.warn("Selection#processPath: failed to evaluate optionsProvider: " + e.message);
                    }
                }
                else {
                    options = this.optionsProvider.call(this, path);
                }
                this.setOptions(options);
            }
            catch (e) {
                CQ.Log.warn("Selection#processPath: " + e.message);
            }
        }
        else if (this.optionsCallback) {
            // @deprecated
            if (path == undefined) path = null;
            try {
                if (typeof this.optionsCallback != "function") {
                    try {
                        eval(this.optionsCallback).call(this, path);
                    }
                    catch (e) {
                        CQ.Log.warn("Selection#processPath: failed to evaluate optionsCallback: " + e.message);
                    }
                }
                else {
                    this.optionsCallback.call(this, path);
                }
            }
            catch (e) {
                CQ.Log.warn("Selection#processPath: failed to call optionsCallback: " + e.message);
            }
        } else if (this.contentBasedOptionsURL) {
            var url = this.contentBasedOptionsURL;
            url = url.replace(CQ.form.Selection.PATH_PLACEHOLDER_REGEX, path);
            this.setOptions(this.fetchOptions(url, this));
        }
    },

    /**
     * Sets the options of the selection.
     * @param {Object[]} options The options
     * <pre><code>
[
    {
        value: "pink", // all types except "combobox"
        text: "Pink",
        qtip: "Real Pink" // "select" and "combobox"
    }
]
</code></pre>
     */
    setOptions: function(options) {
        if (this.isCheckbox || this.isRadio) {
            if (this.optionItems && this.optionItems.getCount() > 0) {
                var nb = this.optionItems.getCount();
                for (var i = 0; i < nb; i++) {
                    var o = this.optionItems.itemAt(i);
                    this.remove(o);
                     if(o.rendered && o.dom) {
                        //Workaround. Destroy is not properly hiding component
                        o.dom.setStyle("display","none");
                    }
                    o.destroy();
                }
                this.optionItems.clear();
            }

            if (this.sortDir) this.sortOptions(options);

            for (var i = 0; i < options.length; i++) {
                var option = options[i];
                this.optionsConfig.inputValue = option.value == undefined ? "" : option.value;
                this.optionsConfig.boxLabel = option.text ? option.text : "&nbsp;";
                this.optionsConfig.checked = option.checked ? option.checked : false;
                var o;
                if (this.isRadio) {
                    o = new CQ.Ext.form.Radio(this.optionsConfig);
                }
                else {
                    o = new CQ.Ext.form.Checkbox(this.optionsConfig);
                }
                this.add(o);
                this.optionItems.add(option.value, o);
            }
        }
        else {
            // select and combo
            // build store from options
            var storeConfig = {
                fields: ["value", "text", CQ.shared.XSS.getXSSPropertyName("text"), "qtip"],
                data: []
            };
            for (var i = 0; i < options.length; i++) {
                var o = options[i];
                if (!o || (typeof o !== 'object')) {
                    continue;
                }
                if (o.text == '-') {
                    o.value = "menu-separator-item-value";  // Could be anything that's unlikely to match actual input
                } else {
                    o.value = (o.value !== null && o.value !== undefined) ? o.value : "";
                }
                o[CQ.shared.XSS.getXSSPropertyName("text")] = CQ.shared.XSS.getXSSTablePropertyValue(o, "text") ?
                    CQ.I18n.getVarMessage(CQ.shared.XSS.getXSSTablePropertyValue(o, "text")) : o.value;
                o.text = (o.text !== null && o.text !== undefined) ? CQ.I18n.getVarMessage(o.text.toString()) : o.value.toString();
                o.qtip = o.qtip ? o.qtip : "";
            }

            if (this.sortDir) this.sortOptions(options);

            for (var i = 0; i < options.length; i++) {
                var o = options[i];
                storeConfig.data.push([o.value, o.text, o[CQ.shared.XSS.getXSSPropertyName("text")], o.qtip]);
            }

            if (!this.comboBox) {
                this.optionsConfig.store = new CQ.Ext.data.SimpleStore(storeConfig);
                this.optionsConfig.listClass = CQ.Util.createId(CQ.DOM.encodeClass(this.name));
                this.comboBox = new CQ.Ext.form.ComboBox(this.optionsConfig);
                this.add(this.comboBox);
            } else {
                this.optionsConfig.store.loadData(storeConfig.data);
            }
        }
        if (this.rendered) {
            this.doLayout();
        }
    },

    /**
     * Sorts the options by its title
     * @private
     */
    sortOptions: function(o) {
        if (this.sortDir != "ASC" && this.sortDir != "DESC") return;
        var x = this.sortDir == "ASC" ? 1 : -1;
        o.sort(function(a, b) {
            var ta = a.text.toLowerCase();
            var tb = b.text.toLowerCase();
            if (ta > tb) return x;
            if (ta < tb) return -x;
            return 0;
        });
    },

    /**
     * Sets a data value into the field and validates it. Multiple values for
     * selections of type "checkbox" are passed as an array. If an array is
     * passed to other types the first value is taken.
     * @param {String/String[]} value The value to set
     */
    setValue: function(value){
        if (value instanceof Array && (this.isRadio || this.isComboBox || this.isSelect)) {
            // multiple value for single value selection => use first value
            value = value[0];
        }
        this.value = value;

        if (this.rendered) {
            if (this.isRadio) {
                if (this.value instanceof Array) this.value = value[0];

                if (this.value == null) {
                    this.optionItems.itemAt(0).setValue(true);
                    for (var i = 1; i < this.optionItems.length; i++) {
                        this.optionItems.itemAt(i).setValue(false);
                    }
                } else {
                    for (var i = 0; i < this.optionItems.length; i++) {
                        var item = this.optionItems.itemAt(i);
                        if (item.inputValue.toString() == this.value.toString()) {
                            // toString is required e.g. when inputValue is boolean and value is a string
                            item.setValue(true);
                        }
                        else {
                            // this is required to force Ext to synchronize view and model
                            // (which is automatically done when the model is changed by
                            // the onclick handler, but not when programatically via
                            // setValue()
                            item.setValue(false);
                        }
                    }
                }
            }
            else if (this.isCheckbox) {
                var valueStr;
                if (this.value instanceof Array) valueStr = "|" + value.join("|") + "|";
                else valueStr = "|" + value + "|";

                for (var i = 0; i < this.optionItems.length; i++) {
                    var item = this.optionItems.itemAt(i);
                    if (valueStr.indexOf("|" + item.inputValue + "|") != -1) {
                        item.setValue(true);
                    }
                    else {
                        item.setValue(false);
                    }
                }
            }
            else {
                if (this.isSelect) {
                    var count = this.comboBox.store.getTotalCount();
                    var i = 0;
                    for (; i < count; i++) {
                        var data = this.comboBox.store.getAt(i).data;
                        if (data.value.toString() === this.value.toString()) {
                            // toString is required e.g. when inputValue is boolean and value is a string
                            this.hiddenField.setValue(data.value);
                            this.comboBox.setValue(data.text);
                            break;
                        }
                    }
                    if(i==count) {
                        if( !this.comboBox.editable ) {
                            if(this.defaultValue) {
                                this.value = this.defaultValue;
                            } else {
                                this.value = "";
                            }
                        }
                        this.hiddenField.setValue(this.value);
                        this.comboBox.setValue(this.value);
                    }
                }
                else {
                    // isCombobox
                    this.comboBox.setValue(this.value);
                }
            }

            //todo: validation
//            this.validate();
        }
    },

    /**
     * Validates a value according to the field's validation rules and marks the field as invalid
     * if the validation fails
     * @param {Mixed} value The value to validate
     * @return {Boolean} True if the value is valid, else false
     */
    validateValue: function(value){
        if (this.isRadio || this.isCheckbox) {
            // assuming that the specified options are all valid values
            // only check if allowBlank or at least one option selected
            if (value.length < 1) {
                // checkbox: value is an empty array
                // radio: value is an empty string
                 if (this.allowBlank) {
                     this.clearInvalid();
                     return true;
                 }
                 else {
                     this.markInvalid(this.blankText);
                     return false;
                 }
            }
            else {
                this.clearInvalid();
                return true;
            }
        }
        else {
            // combobox or select
            return this.comboBox.validateValue(value);
        }
    },

    // overriding CQ.form.CompositeField#markInvalid
    markInvalid : function(msg){
        if (this.isRadio || this.isCheckbox) {
            this.el.addClass(this.invalidClass);
            msg = msg || this.invalidText;
            var mt = this.getMessageHandler();
            if(mt){
                mt.mark(this, msg);
            }
        }
        this.fireEvent('invalid', this, msg);
    },

    // overriding CQ.form.CompositeField#clearInvalid
    clearInvalid : function(){
        if (this.isRadio || this.isCheckbox) {
            if (this.rendered) {
                this.el.removeClass(this.invalidClass);
            }
            var mt = this.getMessageHandler();
            if(mt){
                mt.clear(this);
            }
        }
        this.fireEvent('valid', this);
    },

    afterrenderCombo: function() {
        if (this.optionsConfig.emptyText && this.comboBox && this.comboBox.el) {
            this.comboBox.mun(this.comboBox.el, 'focus', this.comboBox.onFocus, this.comboBox);
            this.comboBox.mon(this.comboBox.el, 'focus', this.comboBox.onFocus, this.comboBox, {buffer:500});
        }
    },

    preselectCombo: function(combo, record, index) {
        var correctedIndex = index;

        // Bump up the correctedIndex for any separators (which
        // will have been ignored by the combobox):
        var store = combo.getStore();
        for (var i = 0; i <= correctedIndex && i < store.getTotalCount(); i++) {
            if (store.getAt(i).data.text == "-") {
                correctedIndex++;
            }
        }

        // If we made any correction, then set the value ourselves:
        if (index != correctedIndex) {
            record = store.getAt(correctedIndex);
            combo.setValue(record.data.value);
            combo.collapse();
            combo.fireEvent('select', combo, record, correctedIndex);
            return false;
        }
        return true;
    },

    /**
     * Sets the value of the hidden field when type is "select".
     * This also fires a suitable "selectionchanged" event.
     * @param {CQ.Ext.form.ComboBox} combo The combo box
     * @param {CQ.Ext.data.Record} record The selected record
     * @param {Number} index The index of the selected record
     * @private
     */
    selectCombo: function(combo, record, index) {
        var oldValue = this.hiddenField.getValue();

        if (record.data.text == "&nbsp;") {
            this.comboBox.setValue("");
        }
        this.hiddenField.setValue(record.data.value);

        if (oldValue !== record.data.value) {
            this.fireComboboxSelectionChanged(combo, record, index);
        }
    },

    /**
     * Sets the value of the hidden field when type is "select".
     * This also fires a suitable "selectioncontentnchanged" event.
     * @private
     */
    changeCombo: function(combo, newValue, oldValue) {
        //check first if newValue is a text and not a value. If this is the case, sets the value and not the text.
        var count = combo.store.getTotalCount();
        var i = 0;
        for (; i < count; i++) {
            var rec = combo.store.getAt(i);
            if (rec && rec.data && (rec.data.text == newValue || rec.data.value == newValue)) {
                newValue = rec.data.value;
                break;
            }
        }

        var currentValue = this.hiddenField.getValue();

        if (currentValue !== newValue) {
            this.hiddenField.setValue(newValue);
            this.fireComboboxContentChanged(combo, newValue, oldValue);
        }
    },

    /**
     * Fires the "selectionchanged" event for checkboxes and radiobuttons.
     * @param {Element} checkbox the checkbox/radiobutton
     * @param {Boolean} isChecked <code>true</code> if the box is checked
     * @private
     */
    fireBoxSelectionChanged: function(checkbox, isChecked) {
        this.validateValue(this.getValue());
        var fireEvent;
        if (checkbox.constructor == CQ.Ext.form.Radio) {
            fireEvent = isChecked;
        } else {
            fireEvent = true;
        }
        if (fireEvent) {
            this.fireEvent(CQ.form.Selection.EVENT_SELECTION_CHANGED,
                    this, checkbox.getRawValue(), isChecked);
        }
    },

    /**
     * Fires the "selectionchanged" event for comboboxes.
     * @param {Element} combo the checkbox/radiobutton
     * @param {Record} record the selected <code>Ext.data.Record</code>
     * @param {Number} index the selected index
     * @private
     */
    fireComboboxSelectionChanged: function(combo, record, index) {
        this.fireEvent(CQ.form.Selection.EVENT_SELECTION_CHANGED,
                this, record.data.value, true);
    },

    /**
     * Fires the "selectionchanged" event for comboboxes when the user has changed the
     * value by entering something using the keyboard.
     * @param {Element} combo the combobox
     * @param {String} newValue new value
     * @param {String} oldValue old value
     * @private
     */
    fireComboboxContentChanged: function(combo, newValue, oldValue) {
        this.fireEvent(CQ.form.Selection.EVENT_SELECTION_CHANGED, this, newValue, true);
    },

    /**
     * Fetches the options via HTTP.
     * @private
     */
    fetchOptions: function(url, config) {
        var options = [];

        try {
            var json = CQ.HTTP.eval(url);
            if (config.optionsRoot) {
                // convert ext format to our format
                var optVF = config.optionsValueField || "value";
                var optTF = config.optionsTextField || "text";
                var optTFXSS = CQ.shared.XSS.getXSSPropertyName(optTF);
                var optQF = config.optionsQTipField || "qtip";
                var root = (config.optionsRoot == ".") ? json : json[config.optionsRoot];
                for (var i=0; i<root.length; i++) {
                    var opt = {
                        value: root[i][optVF],
                        text: root[i][optTF],
                        text_xss: root[i][optTFXSS]
                    };
                    if (root[i][optQF]) {
                        opt.qtip = root[i][optQF];
                    }
                    options.push(opt);
                }
            } else {
                options = CQ.Util.formatData(json);
            }
        }
        catch (e) {
            CQ.Log.warn("CQ.form.Selection#fetchOptions failed: " + e.message);
            options = [];
        }

        return options;
    },

    constructor: function(config) {
        if (config.type) this.type = config.type;
        switch (this.type) {
            case "combobox":
                this.isComboBox = true;
                break;
            case "checkbox":
                this.isCheckbox = true;
                break;
            case "select":
                this.isSelect = true;
                break;
            default:
                this.isRadio = true;
        }

        if (config.allowBlank != undefined) this.allowBlank = config.allowBlank;

        if (config.optionsCallback) {
            this.optionsCallback = config.optionsCallback;
            if (!config.options) config.options = [];
        }

        if (typeof config.options == "string") {
            if (config.options.indexOf(CQ.form.Selection.PATH_PLACEHOLDER) >= 0) {
                // if $path as reference to content path is used, we have to delay
                // the option fetching until processPath() is called
                this.contentBasedOptionsURL = config.options;
                config.options = [];
            } else {
                config.options = this.fetchOptions(config.options, config);
            }
        }
        else if (!config.options) {
            if (this.isCheckbox) {
                // single checkbox
                config.options = [{
                    value: config.inputValue ? config.inputValue : "true",
                    text: config.boxLabel ? config.boxLabel : ""
                }];
            }
            else {
                config.options = [];
            }
        }

        this.optionsConfig = config.optionsConfig ? config.optionsConfig : {};

        var defaults = {
            height: "auto",
            border: this.isCheckbox || this.isRadio,
            style: "padding:0;margin-bottom:0;",
            hideMode: "display",
            defaults: {
                msgTarget: CQ.themes.Dialog.MSG_TARGET
            }
        };

        CQ.Util.applyDefaults(config, defaults);
        CQ.form.CompositeField.superclass.constructor.call(this, config);

        if (this.isCheckbox || this.isRadio) {
            this.optionItems = new CQ.Ext.util.MixedCollection();

            var checkboxDefaults = {
                xtype: "checkbox",
                name: config.name,
                fieldLabel: "&nbsp;",
                hideLabel: true,
                hideMode: "display",
                anchor: CQ.themes.Dialog.SELECT_CHECKBOX_ANCHOR,
                "stateful": false
            };

            CQ.Util.applyDefaults(this.optionsConfig, checkboxDefaults);

            this.optionsConfig.listeners = {
                "render": function(option) {
                    // > avoid layout problem: vertical scrollbar in each option
                    var rootEl = option.getEl().dom.parentNode.parentNode.parentNode;
                    rootEl.style.overflow = "hidden";
                },
                "check": {
                    fn: this.fireBoxSelectionChanged,
                    scope: this
                }
            };

            this.setOptions(config.options);

            if (!this.isRadio) {
                // > checkbox (not radio):
                // - add hidden @remove field

                this.hiddenField = new CQ.Ext.form.Hidden({
                    name: config.name + CQ.Sling.DELETE_SUFFIX,
                    value: "true"
                });

                this.add(this.hiddenField);

                if (config.checkboxBoolTypeHint) {
                    var typeHintField = new CQ.Ext.form.Hidden({
                        name: config.name + CQ.Sling.TYPEHINT_SUFFIX,
                        value: "Boolean"
                    });
                    this.add(typeHintField);
                }
            }
        }
        else {
            // > combobox and select

            var comboDefaults = {
                xtype: "combo",
                name: this.name,
                fieldLabel: "&nbsp;",
                hideLabel: true,
                anchor: "100%",
                tpl: new CQ.Ext.XTemplate(
                    '<tpl for=".">' +
                        '<tpl if="text == &quot;-&quot;">' +
                            '<div class="cq-panel-divider"><hr/></div>' +
                        '</tpl>' +
                        '<tpl if="text != &quot;-&quot;">' +
                            '<div ext:qtip="{[CQ.shared.Util.htmlEncode(values[\"qtip\"])]}" class="x-combo-list-item">{[CQ.shared.XSS.getXSSTablePropertyValue(values, \"text\")]}</div>' +
                        '</tpl>' +
                    '</tpl>'
                ),
                displayField: "text",
                typeAhead: false,
                mode: "local",
                emptyText: "",
                triggerAction: "all",
                allowBlank: this.allowBlank,
                hideMode: "display",
                stateful: false,
                vtype: config.vtype
            };

            if (this.isSelect) {
                // > select:
                // - disable editing
                // - add hidden field for submission of value
                comboDefaults.selectOnFocus = false;
                //editable should be explicitely set to true on component
                comboDefaults.editable = this.editable === true || this.editable == "true";
                comboDefaults.listeners = {
                    "afterrender": {
                        fn: this.afterrenderCombo,
                        scope: this
                    },
                    "beforeselect": {
                        fn: this.preselectCombo,
                        scope: this
                    },
                    "select": {
                        fn: this.selectCombo,
                        scope: this
                    },
                    "change": {
                        fn: this.changeCombo,
                        scope: this
                    },
                    "render": function(combo) {
                        // prevent input submission
                        combo.getEl().dom.removeAttribute("name");
                    }
                };
                this.hiddenField = new CQ.Ext.form.Hidden({
                    name: this.name
                });
                this.add(this.hiddenField);
            }
            else {
                comboDefaults.listeners = {
                    "afterrender": {
                        fn: this.afterrenderCombo,
                        scope: this
                    },
                    "beforeselect": {
                        fn: this.preselectCombo,
                        scope: this
                    },
                    "select": {
                        fn: this.fireComboboxSelectionChanged,
                        scope: this
                    },
                    "change": {
                        fn: this.fireComboboxContentChanged,
                        scope: this
                    }
                };
            }

            CQ.Util.applyDefaults(this.optionsConfig, comboDefaults);

            this.setOptions(config.options);
        }
    },

    /**
     * Initializes the component by registering specific events.
     * @private
     */
    initComponent: function() {
        CQ.form.Selection.superclass.initComponent.call(this);

        // cq-selection is required to address invalid checkboxes in CSS
        this.addClass(CQ.DOM.encodeClass(this.name) + " cq-selection");

        this.addEvents(
            /**
             * @event selectionchanged
             * Fires when the user changes the selection/interacts with the selection
             * control(s). Note that the event is sent on selection and deselection for
             * checkboxes, but only on selection for radiobuttons and comboboxes. Also note
             * that the event currently does not get fired for the initial selection of
             * a combobox.
             * @param {CQ.form.Selection} this
             * @param {Mixed} value The raw value of the selected, checked or unchecked
             *                      option or the entered value of a combobox
             * @param {Boolean} isChecked <code>false</code> if a checkbox has been unchecked,
             *                            <code>true</code> otherwise
             */
            CQ.form.Selection.EVENT_SELECTION_CHANGED
        );
    },

    onRender: function(ct, pos) {
        CQ.form.Selection.superclass.onRender.call(this, ct, pos);
        // propagate value to view - mimics the initValue()-mechanism of CQ.Ext.form.Field
        if (this.value != null) {
            this.setValue(this.value);
        }
    },

    // Overrides the original implementation and disables all composite fields.
    disable: function() {
        CQ.form.Selection.superclass.disable.call(this);
        for (var itemIndex = 0; itemIndex < this.items.getCount(); itemIndex++) {
            var component = this.items.itemAt(itemIndex);
            if (component.disable) {
                component.disable();
            }
        }
        return this;
    },

    // Overrides the original implementation and enables all composite fields.
    enable: function() {
        CQ.form.Selection.superclass.enable.call(this);
        for (var itemIndex = 0; itemIndex < this.items.getCount(); itemIndex++) {
            var component = this.items.itemAt(itemIndex);
            if (component.enable) {
                component.enable();
            }
        }
        return this;
    },

    // Overrides the original implementation to focus the proper embeded component.
    focus : function(selectText, delay){
        if (this.isComboBox || this.isSelect) {
            return this.comboBox.focus(selectText, delay);
        }

        if (this.optionItems && this.optionItems.length > 0) {
            var item = this.optionItems.itemAt(0);
            return item.focus();
        }

        return this;
    }

});

/**
 * Name of the "selectionchanged" event which is fired when the user changes the
 * value of a selection.
 * @static
 * @final
 * @String
 */
CQ.form.Selection.EVENT_SELECTION_CHANGED = "selectionchanged";

/**
 * Placeholder to use in "options" config when given as URL. Will be
 * replaced with the path to the resource currently being edited in
 * a CQ.Dialog.
 * @static
 * @final
 * @String
 */
CQ.form.Selection.PATH_PLACEHOLDER = "$PATH";

/**
 * Regexp variant of above, including global match/replace. For
 * internal use only.
 * @static
 * @private
 * @final
 * @String
 */
CQ.form.Selection.PATH_PLACEHOLDER_REGEX = /\$PATH/g;

CQ.Ext.reg("selection", CQ.form.Selection);

