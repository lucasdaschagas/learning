/*
 * Copyright 1997-2008 Day Management AG
 * Barfuesserplatz 6, 4001 Basel, Switzerland
 * All Rights Reserved.
 *
 * This software is the confidential and proprietary information of
 * Day Management AG, ("Confidential Information"). You shall not
 * disclose such Confidential Information and shall use it only in
 * accordance with the terms of the license agreement you entered into
 * with Day.
 */

/**
 * A helper class providing a set of HTTP-related utilities.
 * <br>
 * The response object returned by the methods {@link CQ.HTTP#get get} and
 * {@link CQ.HTTP#post post} has the following properties:
 * <ul>
 *   <li><code>body</code>: String<br>The response body</li>
 *   <li><code>headers</code>: Object<br>The response headers:
 *   <li><code>Status</code>: Number<br>The status code</li>
 *   <li><code>Message</code>: String<br>(optional) The status message</li>
 *   <li><code>Location</code>: String<br>(optional) The location</li>
 *   <li><code>Path</code>: String<br>(optional) The path</li>
 * </ul>
 * You can use the {@link CQ.HTTP#isOk isOk} method to verify the response
 * object.
 * @static
 * @singleton
 * @class CQ.HTTP
 */
CQ.utils.HTTP = function() {
    /**
     * Creates an empty response object.
     * @private
     * @static
     * @return {Object} The response object
     */
    var createResponse = function() {
        var response = new Object();
        response.headers = new Object();
        response.body = new Object();
        return response;
    };

    return {

        /**
         * The extension for HTML files.
         * @static
         * @final
         * @type String
         * @deprecated use {@link CQ.shared.HTTP#EXTENSION_HTML} instead
         */
        EXTENSION_HTML: CQ.shared.HTTP.EXTENSION_HTML,

        /**
         * The extension for JSON files.
         * @static
         * @final
         * @type String
         * @deprecated use {@link CQ.shared.HTTP#EXTENSION_JSON} instead
         */
        EXTENSION_JSON: CQ.shared.HTTP.EXTENSION_JSON,

        /**
         * The extension for resources.
         * @private
         * @static
         * @final
         * @type String
         * @deprecated use {@link CQ.shared.HTTP#EXTENSION_RES} instead
         */
        EXTENSION_RES: CQ.shared.HTTP.EXTENSION_RES,

        /**
         * The Status header.
         * @static
         * @final
         * @type String
         * @deprecated use {@link CQ.shared.HTTP#HEADER_STATUS} instead
         */
        HEADER_STATUS: CQ.shared.HTTP.HEADER_STATUS,

        /**
         * The Message header.
         * @static
         * @final
         * @type String
         * @deprecated use {@link CQ.shared.HTTP#HEADER_MESSAGE} instead
         */
        HEADER_MESSAGE: CQ.shared.HTTP.HEADER_MESSAGE,

        /**
         * The Location header.
         * @static
         * @final
         * @type String
         * @deprecated use {@link CQ.shared.HTTP#HEADER_LOCATION} instead
         */
        HEADER_LOCATION: CQ.shared.HTTP.HEADER_LOCATION,

        /**
         * The Path header.
         * @static
         * @final
         * @type String
         * @deprecated use {@link CQ.shared.HTTP#HEADER_PATH} instead
         */
        HEADER_PATH: CQ.shared.HTTP.HEADER_PATH,

        /**
         * The parameter name for no caching.
         * @static
         * @final
         * @type String
         * @deprecated use {@link CQ.shared.HTTP#PARAM_NO_CACHE} instead
         */
        PARAM_NO_CACHE: CQ.shared.HTTP.PARAM_NO_CACHE,

        /**
         * Requests the specified URL from the server using GET. The request
         * will be synchronous, unless a callback function is specified.
         * @static
         * @param {String} url The URL to request
         * @param {Function} callback (optional) The callback function which is
         *        called regardless of success or failure and is passed the following
         *        parameters:<ul>
         *        <li><b>options</b> : Object<div class="sub-desc">The parameter to the request call.</div></li>
         *        <li><b>success</b> : Boolean<div class="sub-desc">True if the request succeeded.</div></li>
         *        <li><b>response</b> : Object<div class="sub-desc">The response object.</div></li>
         *        </ul>
         * @param {Object} scope The scope for the callback (optional)
         * @return {Mixed} The response object or, if the
         *         request is asynchronous, the transaction ID
         */
        get: function(url, callback, scope) {
            url = CQ.HTTP.externalize(url, true);

            if (typeof CQ_XHR_HOOK != "undefined" && CQ.Ext.isFunction(CQ_XHR_HOOK)) {
                var p = { "url" : url, "method":"GET"};
                try {
                    var out = CQ_XHR_HOOK(p);
                    if( out ) {
                        url = out.url;
                    }
                } catch(e) {
                    CQ.Log.error("CQ.utils.HTTP#get: error during CQ_XHR_HOOK call: {0}", [url, e.message]);
                }
            }

            if (callback != undefined) {
                CQ.Log.debug("CQ.utils.HTTP#get: requesting {0} asynchronously", url);
                return CQ.Ext.Ajax.request({
                    url: url,
                    callback: callback,
                    scope: scope
                });
            } else {
                CQ.Log.debug("CQ.utils.HTTP#get: requesting {0} synchronously", url);
                var request = document.all ? new ActiveXObject("Microsoft.XMLHTTP") :
                              new XMLHttpRequest();
                try {
                    request.open("GET", url, false);
                    request.send(null);
                    var response = createResponse();
                    response.body = request.responseText;
                    response.headers[CQ.utils.HTTP.HEADER_STATUS] = request.status;
                    // set properties for backward compatibility (pre 5.3)
                    response.responseText = request.responseText;
                    response.status = request.status;
                    CQ.shared.HTTP.handleForbidden(response);
                    return response;
                } catch (e) {
                    CQ.Log.error("CQ.utils.HTTP#get: failed to get {0}: {1}", [url, e.message]);
                    return null;
                }
            }
        },

        /**
         * Requests the specified URL from the server using POST. The request
         * will be synchronous, unless a callback function is specified.
         * The returned response object looks like this:
         * <pre><code>{ headers: { "Status": 200, ... } }</code></pre>
         * See constants above for all supported headers.
         * @static
         * @param {String} url The URL to request
         * @param {Function} callback (optional) The callback function which is
         *        called regardless of success or failure and is passed the following
         *        parameters:<ul>
         *        <li><b>options</b> : Object<div class="sub-desc">The parameter to the request call.</div></li>
         *        <li><b>success</b> : Boolean<div class="sub-desc">True if the request succeeded.</div></li>
         *        <li><b>xhr</b> : Object<div class="sub-desc">The XMLHttpRequest object containing the response data.
         *        See <a href="http://www.w3.org/TR/XMLHttpRequest/">http://www.w3.org/TR/XMLHttpRequest/</a> for details about
         *        accessing elements of the response.</div></li>
         *        <li><b>response</b> : Object<div class="sub-desc">The response object.<br>
         *        <i>Added in CQ 5.3</i></div></li>
         *        </ul>
         * @param {Object} params The parameters
         * @param {Object} scope The scope for the callback
         * @param {Boolean} suppressErrorMsg Suppress the error msg notification
         * @return {Mixed} The response object or, if the request is
         *         asynchronous, the transaction ID
         */
        post: function(url, callback, params, scope, suppressErrorMsg) {
            url = CQ.HTTP.externalize(url, true);

            if (typeof CQ_XHR_HOOK != "undefined" && CQ.Ext.isFunction(CQ_XHR_HOOK)) {
                var p = { "url" : url, "method":"POST","params":params};
                try {
                    var out = CQ_XHR_HOOK(p);
                    if( out ) {
                        url = out.url;
                        params = out.params;
                    }
                } catch(e) {
                    CQ.Log.error("CQ.utils.HTTP#get: error during CQ_XHR_HOOK call: {0}", [url, e.message]);
                }
            }


            if (callback != undefined) {
            	CQ.Log.debug("CQ.utils.HTTP#post: requesting {0} asynchronously", url);
            	return CQ.Ext.Ajax.request({
            		"url":url,
            		"method":"POST",
            		"callback":function(options, success, xhr) {
                        // ignore JSON responses since they don' play nice with the response parsers
                        var contentType = xhr.getResponseHeader("Content-Type"),
                            response = CQ.HTTP.buildPostResponseFromHTML(xhr.responseText);
                        if (typeof contentType !== "undefined"
                                && contentType.indexOf("application/json") == -1) {
                            if (!CQ.utils.HTTP.isOk(response) && !suppressErrorMsg) {
                                CQ.Notification.notifyFromResponse(response);
                            }
                        }
            			callback.call(this, options, success, xhr, response);
            		},
            		"params":params,
            		"scope":scope
            	});
            } else {
                CQ.Log.debug("CQ.utils.HTTP#post: requesting {0} synchronously", url);
                var response = null;
                var request = window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject("Microsoft.XMLHTTP");

                // append url parameters to body
                var tmp = url.split("?");
                var url0 = tmp[0];
                var body = tmp[1] ? tmp[1] : "";

                // append given params to body
                var p = CQ.Ext.urlEncode(params);
                body += ( p ? (body ? "&" : "") + p : "");

                try {
                    request.open("post", url0, false);
                    request.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
                    request.send(body);

                    response = CQ.HTTP.buildPostResponseFromHTML(request.responseText);
                    if (!response.headers[CQ.HTTP.HEADER_MESSAGE]) {
                        var customResponse = request.responseText.match(/<title>(.*?)<\/title>/)[1];
                        var errorMessage = customResponse.substr(customResponse.indexOf(" ")).trim();
                        response.headers[CQ.HTTP.HEADER_MESSAGE] = errorMessage;
                    }
                    if (CQ.shared.HTTP.handleForbidden(request)) {
                        // redirect handled in handleForbidden
                    }
                    else if (!CQ.utils.HTTP.isOk(response) && !suppressErrorMsg) {
                        CQ.Notification.notifyFromResponse(response);
                    }
                    return response;
                } catch (e) {
                    CQ.Log.error("CQ.utils.HTTP#post: failed to post {0}: {1}", [url, e.message]);
                }
                return response;
            }
        },

        /**
         * Requests the specified URL from the server using multipart POST. The request
         * will be synchronous, unless a callback function is specified.
         * The returned response object looks like this:
         * <pre><code>{ headers: { "Status": 200, ... } }</code></pre>
         * See constants above for all supported headers.
         * @static
         * @param {String} url The URL to request
         * @param {Function} callback (optional) The callback function which is
         *        called regardless of success or failure and is passed the following
         *        parameters:<ul>
         *        <li><b>xhr</b> : Object<div class="sub-desc">The XMLHttpRequest object containing the response data.
         *        See <a href="http://www.w3.org/TR/XMLHttpRequest/">http://www.w3.org/TR/XMLHttpRequest/</a> for details about
         *        accessing elements of the response.</div></li>
         *        </ul>
         * @param {Object} params The parameters
         * @param {Object} scope The scope for the callback
         * @param {Boolean} suppressErrorMsg Suppress the error msg notification
         * @return {Mixed} The response object or, if the request is
         *         asynchronous, null
         */
        multiPartPost: function(url, callback, params, scope, suppressErrorMsg) {
            var request = window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject("Microsoft.XMLHTTP");
            var response = null;
            var sBoundary = "========================" + Date.now().toString(16);
            try {
            request.open("post", CQ.HTTP.externalize(url), callback ? true : false);
            request.setRequestHeader("Content-Type", "multipart\/form-data; boundary=" + sBoundary);
            var body = "";
            for (var key in params) {
                if (params[key] instanceof Array) {
                    if (!params[key].length) {
                        //add empty value for the array
                        body += "--" + sBoundary + "\r\nContent-Disposition: form-data; name=\""
                                   + key + "\"\r\n\r\n" + "" + "\r\n";
                    }
                    for (var i = 0; i < params[key].length; i++) {
                        body += "--" + sBoundary + "\r\nContent-Disposition: form-data; name=\""
                                   + key + "\"\r\n\r\n" + params[key][i] + "\r\n";
                    }
                } else {
                    body += "--" + sBoundary + "\r\nContent-Disposition: form-data; name=\""
                                   + key + "\"\r\n\r\n" + params[key] + "\r\n";
                }
            }
            body += "--" + sBoundary + "--\r\n";
            if (callback) {
                request.onreadystatechange = scope ?
                          function(){callback.apply(scope, [request])} : function(){callback(request)};
                request.send(body);
                return null;
            }
            request.send(body);
            response = CQ.HTTP.buildPostResponseFromHTML(request.responseText);
            if (!response.headers[CQ.HTTP.HEADER_MESSAGE]) {
                var customResponse = request.responseText.match(/<title>(.*?)<\/title>/)[1];
                var errorMessage = customResponse.substr(customResponse.indexOf(" ")).trim();
                response.headers[CQ.HTTP.HEADER_MESSAGE] = errorMessage;
            }
            if (CQ.shared.HTTP.handleForbidden(request)) {
                // redirect handled in handleForbidden
            }
            else if (!CQ.utils.HTTP.isOk(response) && !suppressErrorMsg) {
                CQ.Notification.notifyFromResponse(response);
            }
            } catch (e) {
                CQ.Log.error("CQ.utils.HTTP#multiPartPost: failed to post {0}: {1}", [url, e.message]);
            }
            return response;
        },

        /**
         * Returns the value of the parameter with the specified name
         * in the URL. Only the first value will be considered.
         * Values will be URL-decoded.
         * @static
         * @param {String} url The URL
         * @param {String} name The name of the parameter
         * @return {String} The value
         * @deprecated use {@link CQ.shared.HTTP#getParameter} instead
         */
        getParameter: function(url, name) {
            return CQ.shared.HTTP.getParameter(url, name);
        },

        /**
         * Returns the values of the parameters with the specified name
         * in the URL. Values will be URL-decoded.
         * @static
         * @param {String} url The URL
         * @param {String} name The name of the parameter
         * @return {String[]} The values
         * @deprecated use {@link CQ.shared.HTTP#getParameters} instead
         */
        getParameters: function(url, name) {
            return CQ.shared.HTTP.getParameters(url, name);
        },

        /**
         * Adds a parameter to the specified URL. The parameter name and
         * value will be URL-endcoded.
         * @static
         * @param {String} url The URL
         * @param {String} name The name of the parameter
         * @param {String/String[]} value The value of the parameter.
         *        Since 5.3, an array of strings can be passed
         * @return {String} The URL with the new parameter
         * @deprecated use {@link CQ.shared.HTTP#addParameter} instead
         */
        addParameter: function(url, name, value) {
            return CQ.shared.HTTP.addParameter(url, name, value);
        },

        /**
         * Overwrites a parameter in the specified URL. The parameter name
         * and value will be URL-endcoded.
         * @static
         * @param {String} url The URL
         * @param {String} name The name of the parameter
         * @param {String} value The value of the parameter
         * @return {String} The URL with the new parameter
         * @deprecated use {@link CQ.shared.HTTP#setParameter} instead
         */
        setParameter: function(url, name, value) {
            return CQ.shared.HTTP.setParameter(url, name, value);
        },

        /**
         * Removes a parameter from the specified URL.
         * @static
         * @param {String} url The URL
         * @param {String} name The name of the parameter to remove
         * @return {String} The URL without the parameter
         * @deprecated use {@link CQ.shared.HTTP#removeParameter} instead
         */
        removeParameter: function(url, name) {
            return CQ.shared.HTTP.removeParameter(url, name);
        },

        /**
         * Removes all parameter from the specified URL.
         * @static
         * @param {String} url The URL
         * @return {String} The URL without parameters
         * @deprecated use {@link CQ.shared.HTTP#removeParameters} instead
         */
        removeParameters: function(url) {
            return CQ.shared.HTTP.removeParameters(url);
        },

        /**
         * Adds the specified selector to an URL.
         * @param {String} url The URL. The URL must contain a extension and
         *                 must not contain a suffix (x.json/a/b). Anchor and
         *                 request parameters are supported.
         * @param {String} selector The name of the selector to insert
         * @param {Number} index (optional) The index of the selector. If it is "-1"
         *                 or bigger than the number of the existing selectors
         *                 the selector will be appended. Defaults to "0".
         * @return {String} The updated URL
         * @since 5.3
         * @deprecated use {@link CQ.shared.HTTP#addSelector} instead
         */
        addSelector: function(url, selector, index) {
            return CQ.shared.HTTP.addSelector(url, selector, index);
        },

        /**
         * Replaces the selector at the given index position. If no selector exists
         * at the index position, no change is made to the URL.
         *
         * @param {String} url The URL.
         * @param {String} selector The value with which to replace the selector.
         * @param {Number} index The index of the selector to set/replace.
         * @return {String} The URL with the selector replaced.
         * @since 5.4
         * @deprecated use {@link CQ.shared.HTTP#setSelector} instead
         */
        setSelector: function(url, selector, index) {
            return CQ.shared.HTTP.setSelector(url, selector, index);
        },

        /**
         * Returns the anchor part of the URL.
         * @static
         * @param {String} url The URL
         * @return {String} The anchor
         * @deprecated use {@link CQ.shared.HTTP#getAnchor} instead
         */
        getAnchor: function(url) {
            return CQ.shared.HTTP.getAnchor(url);
        },

        /**
         * Sets the anchor of the specified URL.
         * @static
         * @param {String} url The URL
         * @param {String} anchor The anchor
         * @return {String} The URL with anchor
         * @deprecated use {@link CQ.shared.HTTP#setAnchor} instead
         */
        setAnchor: function(url, anchor) {
            return CQ.shared.HTTP.setAnchor(url, anchor);
        },

        /**
         * Removes the anchor from the specified URL.
         * @static
         * @param {String} url The URL
         * @return {String} The URL without anchor
         * @deprecated use {@link CQ.shared.HTTP#removeAnchor} instead
         */
        removeAnchor: function(url) {
            return CQ.shared.HTTP.removeAnchor(url);
        },

        /**
         * Prevents caching by adding a timestamp to the specified URL.
         * @static
         * @param {String} url The URL
         * @return {String} The URL with timestamp
         * @deprecated use {@link CQ.shared.HTTP#noCaching} instead
         */
        noCaching: function(url) {
            return CQ.shared.HTTP.noCaching(url);
        },

        /**
         * Builds a response object using the specified node and its child nodes.
         * The content of each node with an ID will be set as a response header.
         * @private
         * @static
         * @param {Node} node The content document or the node to parse
         * @param {Object} response The response object to use (optional)
         * @return {Object} The response object
         */
        buildPostResponseFromNode: function(node, response) {
            if (!node) {
                return null;
            }
            if (response == undefined) {
                response = createResponse();
            }
            try {
                for (var i = 0; i < node.childNodes.length; i++) {
                    var child = node.childNodes[i];
                    if (child.tagName) {
                        if (child.id) {
                            if (child.href) {
                                response.headers[child.id] = child.href;
                            }
                            else {
                                response.headers[child.id] = child.innerHTML;
                            }
                        }
                        response = CQ.utils.HTTP.buildPostResponseFromNode(child, response);
                    }
                }
            } catch (e) {
                CQ.Log.error("CQ.utils.HTTP#buildPostResponseFromNode: " + e.message);
            }
            return response;
        },

        /**
         * Builds a response object using the specified HTML string. The
         * content of each node with an ID will be set as a response header.
         * @private
         * @static
         * @param {String} html The HTML string
         * @return {Object} The response object
         */
        buildPostResponseFromHTML: function(html) {
            var response = createResponse();
            try {
                if (html.responseText != undefined) {
                    html = html.responseText;
                } else if (typeof html != "string") {
                    html = html.toString();
                }
                var div = document.createElement("div");
                div.innerHTML = html;
                response = CQ.utils.HTTP.buildPostResponseFromNode(div, response);
                div = null;
            } catch (e) {}
            return response;
        },

        /**
         * Checks whether the specified status code is OK.
         * @static
         * @param {Number} status The status code
         * @return {Boolean} True if the status is OK, else false
         * @deprecated use {@link CQ.shared.HTTP#isOkStatus} instead
         */
        isOkStatus: function(status) {
            return CQ.shared.HTTP.isOkStatus(status);
        },

        /**
         * Checks if the specified response is OK.
         * The response object is expected to look like this:
         * <pre><code>{ headers: { "Status": 200, ... } }</code></pre>
         * See constants above for all supported headers.
         * @static
         * @param {Object} response The response object
         * @return {Boolean} True if the response is OK, else false
         * @deprecated use {@link CQ.shared.HTTP#isOk} instead
         */
        isOk: function(response) {
            return CQ.shared.HTTP.isOk(response);
        },

        /**
         * Returns the value of the cookie with the specified name.
         * @static
         * @param {String} name The name of the cookie
         * @return {String} The value of the cookie
         * @deprecated use {@link CQ.shared.HTTP#getCookie} instead
         */
        getCookie: function(name) {
            return CQ.shared.HTTP.getCookie(name);
        },

        /**
         * Sets the value of the cookie with the specified name.
         * @static
         * @param {String} name The name of the cookie
         * @param {String} value The value of the cookie
         * @param {String} path (optional) The server path the cookie applies to
         * @param {Number} days (optional) The number of days the cookie will live
         * @param {String} domain (optional) The server domain
         * @param {Boolean} secure (optional) True if the
         *        connection is secure
         * @return {String} The value of the cookie
         * @deprecated use {@link CQ.shared.HTTP#setCookie} instead
         */
        setCookie: function(name, value, path, days, domain, secure) {
            return CQ.shared.HTTP.setCookie(name, value, path, days, domain, secure);
        },

        /**
         * Clears the cookie with the specified name.
         * @static
         * @param {String} name The name of the cookie
         * @param {String} path (optional) The server path the cookie applies to
         * @param {String} domain (optional) The server domain
         * @param {Boolean} secure (optional) True if the
         *        connection is secure
         * @deprecated use {@link CQ.shared.HTTP#clearCookie} instead
         */
        clearCookie : function(name, path, domain, secure) {
            return CQ.shared.HTTP.clearCookie(name, path, domain, secure);
        },

        /**
         * Returns the scheme and authority (user, hostname, port) part of
         * the specified URL or an empty string if the URL does not include
         * that part.
         * @static
         * @param {String} url The URL
         * @return {String} The scheme and authority part
         * @deprecated use {@link CQ.shared.HTTP#getSchemeAndAuthority} instead
         */
        getSchemeAndAuthority: function(url) {
            return CQ.shared.HTTP.getSchemeAndAuthority(url);
        },

        /**
         * Returns the context path used on the server.
         * @static
         * @return {String} The context path
         * @since 5.3
         * @deprecated use {@link CQ.shared.HTTP#getContextPath} instead
         */
        getContextPath: function() {
            return CQ.shared.HTTP.getContextPath();
        },

        /**
         * Detects the context path used on the server.
         * @private
         * @static
         * @since 5.3
         * @deprecated use {@link CQ.shared.HTTP#detectContextPath} instead
         */
        detectContextPath: function() {
            return CQ.shared.HTTP.detectContextPath();
        },

        /**
         * Makes sure the specified relative URL starts with the context path
         * used on the server. If an absolute URL is passed, it will be returned
         * as-is.
         * @static
         * @param {String} url The URL
         * @param {boolean} encode true to encode the path of the URL (optional)
         * @return {String} The externalized URL
         * @since 5.3
         * @deprecated use {@link CQ.shared.HTTP#externalize} instead
         */
        externalize: function(url, encode) {
            return CQ.shared.HTTP.externalize(url, encode);
        },

        /**
         * Removes scheme, authority and context path from the specified
         * absolute URL if it has the same scheme and authority as the
         * specified document (or the current one).
         * @static
         * @param {String} url The URL
         * @param {String} doc (optional) The document
         * @return {String} The internalized URL
         * @since 5.3
         * @deprecated use {@link CQ.shared.HTTP#internalize} instead
         */
        internalize: function(url, doc) {
            return CQ.shared.HTTP.internalize(url, doc);
        },

        /**
         * Removes all parts but the path from the specified URL.
         * <p>Examples:<pre><code>
/x/y.sel.html?param=abc => /x/y
           </code></pre>
         * <pre><code>
http://www.day.com/foo/bar.html => /foo/bar
           </code></pre><p>
         * @static
         * @param {String} url The URL
         * @return {String} The path
         * @since 5.3
         * @deprecated use {@link CQ.shared.HTTP#getPath} instead
         */
        getPath: function(url) {
            return CQ.shared.HTTP.getPath(url);
        },

        /**
         * Returns the current request suffix as provided by CQURLInfo.suffix.
         *
         * @static
         * @return {String} The suffix
         *
         * @since 5.5
         * @deprecated use {@link CQ.shared.HTTP#getSuffix} instead
         */
        getSuffix: function() {
            return CQ.shared.HTTP.getSuffix();
        },

        /**
         * Returns an array with the selectors present in the given url.
         * If no selectors are present, an empty array is returned.
         * @static
         * @param {String} url The URL
         * @return {Array} An array containing the selectors or an empty
         *                 array if none were found.
         * @since 5.4
         * @deprecated use {@link CQ.shared.HTTP#getSelectors} instead
         */
        getSelectors: function(url) {
            return CQ.shared.HTTP.getSelectors(url);
        },

        /**
         * Returns the extension of an URL. This is the string
         * after the last dot until the end of the url without
         * any request parameters, anchors or suffix, for
         * example "html".
         *
         * @param {String} url The URL
         * @return {String} The URL extension (without the dot)
         *                  or an empty string if no was found.
         * @since 5.4
         * @deprecated use {@link CQ.shared.HTTP#getExtension} instead
         */
        getExtension: function(url) {
            return CQ.shared.HTTP.getExtension(url);
        },

        /**
         * Encodes the path of the specified URL if it is not already encoded.
         * Path means the part of the URL before the first question mark or
         * hash sign.<br>
         * See {@link CQ.shared.HTTP#encodePath} for details about the encoding.<br>
         * Sample:<br>
         * <code>/x/y+z.png?path=/x/y+z >> /x/y%2Bz.png?path=x/y+z</code><br>
         * Note that the sample would not work because the "+" in the request
         * parameter would be interpreted as a space. Parameters must be encoded
         * separately.
         * @param {String} url The URL to encoded
         * @return {String} The encoded URL
         * @since 5.3
         * @deprecated use {@link CQ.shared.HTTP#encodePathOfURI} instead
         */
        encodePathOfURI: function(url) {
            return CQ.shared.HTTP.encodePathOfURI(url);
        },

        /**
         * Encodes the specified path using encodeURI. Additionally <code>+</code>,
         * <code>#</code> and <code>?</code> are encoded.<br>
         * The following characters are not encoded:<br>
         * <code>0-9 a-z A-Z</code><br>
         * <code>- _ . ! ~ * ( )</code><br>
         * <code>/ : @ & =</code><br>
         * @param {String} path The path to encode
         * @return {String} The encoded path
         * @since 5.3
         * @deprecated use {@link CQ.shared.HTTP#encodePath} instead
         */
        encodePath: function(path) {
            return CQ.shared.HTTP.encodePath(path);
        },

        /**
         * Evaluates and returns the body of the specified response object.
         * Alternatively, a URL can be specified, in which case it will be
         * requested using a synchornous {@link #get} in order to acquire
         * the response object.
         * @static
         * @param {Object/String} response The response object or URL
         * @return {Object} The evaluated response body
         * @since 5.3
         * @deprecated use {@link CQ.shared.HTTP#eval} instead
         */
        eval: function(response) {
            return CQ.shared.HTTP.eval(response);
        }

    };

}();

// shortcut
CQ.HTTP = CQ.utils.HTTP;

