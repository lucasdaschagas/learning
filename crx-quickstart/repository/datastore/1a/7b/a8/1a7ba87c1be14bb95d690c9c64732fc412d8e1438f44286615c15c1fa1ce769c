<%@page session="false"%><%--
  Copyright 1997-2009 Day Management AG
  Barfuesserplatz 6, 4001 Basel, Switzerland
  All Rights Reserved.

  This software is the confidential and proprietary information of
  Day Management AG, ("Confidential Information"). You shall not
  disclose such Confidential Information and shall use it only in
  accordance with the terms of the license agreement you entered into
  with Day.

  ==============================================================================


  ==============================================================================

--%><%@include file="/libs/wcm/global.jsp" %><%
%><%@ page import="java.util.*,
                   javax.jcr.*,
                   javax.jcr.version.*,
                   org.apache.jackrabbit.util.ISO8601,
                   org.apache.sling.commons.json.io.JSONWriter,
                   com.day.cq.commons.date.DateUtil,
                   com.day.cq.commons.jcr.JcrConstants,
                   com.day.cq.wcm.api.WCMMode,
                   com.day.cq.wcm.api.NameConstants,
                   com.day.cq.wcm.api.Revision,
                   com.day.cq.i18n.I18n" %><%
                   
    String path = slingRequest.getParameter("path");
    if (path == null) {
        path = "/content";
    }

%>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
    <title>Timeline</title>
    <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />

    <script type="text/javascript" >
        Timeline_ajax_url=window.parent.CQ.HTTP.externalize("/libs/wcm/core/components/timewarp/timeline/ajax/simile-ajax-api.js");
        Timeline_urlPrefix=window.parent.CQ.HTTP.externalize("/libs/wcm/core/components/timewarp/timeline/");
        Timeline_parameters='bundle=true';
    </script>
    <script type="text/javascript" src="/libs/wcm/core/components/timewarp/timeline/timeline-api.js"></script>
    
    <script type="text/javascript" src="/libs/wcm/core/components/timewarp/epg-painter.js"></script>
    
    <script>
    /*
     * Date Format 1.2.2
     * (c) 2007-2008 Steven Levithan <stevenlevithan.com>
     * MIT license
     * Includes enhancements by Scott Trenda <scott.trenda.net> and Kris Kowal <cixar.com/~kris.kowal/>
     *
     * Accepts a date, a mask, or a date and a mask.
     * Returns a formatted version of the given date.
     * The date defaults to the current date/time.
     * The mask defaults to dateFormat.masks.default.
     */
    var dateFormat = function () {
        var token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|[LloSZ]|"[^"]*"|'[^']*'/g,
            timezone = /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g,
            timezoneClip = /[^-+\dA-Z]/g,
            pad = function (val, len) {
                val = String(val);
                len = len || 2;
                while (val.length < len) val = "0" + val;
                return val;
            };

        // Regexes and supporting functions are cached through closure
        return function (date, mask, utc) {
            var dF = dateFormat;

            // You can't provide utc if you skip other args (use the "UTC:" mask prefix)
            if (arguments.length == 1 && (typeof date == "string" || date instanceof String) && !/\d/.test(date)) {
                mask = date;
                date = undefined;
            }

            // Passing date through Date applies Date.parse, if necessary
            date = date ? new Date(date) : new Date();
            if (isNaN(date)) throw new SyntaxError("invalid date");

            mask = String(dF.masks[mask] || mask || dF.masks["default"]);

            // Allow setting the utc argument via the mask
            if (mask.slice(0, 4) == "UTC:") {
                mask = mask.slice(4);
                utc = true;
            }

            var _ = utc ? "getUTC" : "get",
                d = date[_ + "Date"](),
                D = date[_ + "Day"](),
                m = date[_ + "Month"](),
                y = date[_ + "FullYear"](),
                H = date[_ + "Hours"](),
                M = date[_ + "Minutes"](),
                s = date[_ + "Seconds"](),
                L = date[_ + "Milliseconds"](),
                o = utc ? 0 : date.getTimezoneOffset(),
                flags = {
                    d:    d,
                    dd:   pad(d),
                    ddd:  dF.i18n.dayNames[D],
                    dddd: dF.i18n.dayNames[D + 7],
                    m:    m + 1,
                    mm:   pad(m + 1),
                    mmm:  dF.i18n.monthNames[m],
                    mmmm: dF.i18n.monthNames[m + 12],
                    yy:   String(y).slice(2),
                    yyyy: y,
                    h:    H % 12 || 12,
                    hh:   pad(H % 12 || 12),
                    H:    H,
                    HH:   pad(H),
                    M:    M,
                    MM:   pad(M),
                    s:    s,
                    ss:   pad(s),
                    l:    pad(L, 3),
                    L:    pad(L > 99 ? Math.round(L / 10) : L),
                    t:    H < 12 ? "a"  : "p",
                    tt:   H < 12 ? "am" : "pm",
                    T:    H < 12 ? "A"  : "P",
                    TT:   H < 12 ? "AM" : "PM",
                    Z:    utc ? "UTC" : (String(date).match(timezone) || [""]).pop().replace(timezoneClip, ""),
                    o:    (o > 0 ? "-" : "+") + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),
                    S:    ["th", "st", "nd", "rd"][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10]
                };

            return mask.replace(token, function ($0) {
                return $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);
            });
        };
    }();

    // Some common format strings
    dateFormat.masks = {
        "default":      "ddd mmm dd yyyy HH:MM:ss",
        shortDate:      "m/d/yy",
        mediumDate:     "mmm d, yyyy",
        longDate:       "mmmm d, yyyy",
        fullDate:       "dddd, mmmm d, yyyy",
        shortTime:      "h:MM TT",
        mediumTime:     "h:MM:ss TT",
        longTime:       "h:MM:ss TT Z",
        isoDate:        "yyyy-mm-dd",
        isoTime:        "HH:MM:ss",
        isoDateTime:    "yyyy-mm-dd'T'HH:MM:ss",
        isoUtcDateTime: "UTC:yyyy-mm-dd'T'HH:MM:ss'Z'"
    };

    // Internationalization strings
    dateFormat.i18n = {
        dayNames: [
            "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat",
            "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"
        ],
        monthNames: [
            "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec",
            "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"
        ]
    };

    // For convenience...
    Date.prototype.format = function (mask, utc) {
        return dateFormat(this, mask, utc);
    };
    </script>

    <script>        
       var tl;
       function onLoad() {
           SimileAjax.History.enabled = false;
           
           var bottom = document.getElementById("bottom");
           var tl_el = document.getElementById("timeline");
           var eventSource = new Timeline.DefaultEventSource();
           
           var theme = Timeline.ClassicTheme.create();
           //theme.autoWidth = true;
           theme.timeline_start = new Date(Date.UTC(2000, 0, 1));
           var stopDate = new Date();
           stopDate.setDate(stopDate.getDate() + 1);
           theme.timeline_stop = stopDate;
           
           theme.event.tape.height = 40;
           theme.event.track.offset = 15;
           theme.event.instant.impreciseIconMargin = 2;
                      
           var themeMiddle = Timeline.ClassicTheme.create();
           themeMiddle.timeline_start = theme.timeline_start;
           themeMiddle.timeline_stop  = theme.timeline_stop;
           themeMiddle.event.overviewTrack.height = 15;
           themeMiddle.event.overviewTrack.offset = 10;

<%
    TimeZone tz = TimeZone.getDefault();
    int offsetHours = tz.getOffset(new Date().getTime()) /* ms */ / (1000 * 60 * 60);
%>
           var initDate = new Date();
           if(window.parent && window.parent.CQ){
               if(tw = window.parent.CQ.HTTP.getCookie(window.parent.CQ.WCM.TIMEWARP_COOKIE)){
                    initDate = new Date(parseInt(tw));
               }
           }
           var bandInfos = [
               Timeline.createBandInfo({
                   width:          80, // sum of all band's width must be set as style for #timeline below
                   intervalUnit:   Timeline.DateTime.HOUR, 
                   intervalPixels: 200,
                   timeZone:       <%= offsetHours %>,
                   eventSource:    eventSource,
                   theme:          theme,
                   eventPainter:   Timeline.EPGEventPainter,
                   date:           initDate
               }),
               Timeline.createBandInfo({
                   width:          45, // sum of all band's width must be set as style for #timeline below
                   intervalUnit:   Timeline.DateTime.DAY, 
                   intervalPixels: 200,
                   timeZone:       <%= offsetHours %>,
                   eventSource:    eventSource,
                   theme:          themeMiddle,
                   layout:         'overview',  // original, overview, detailed
                   date:           initDate
               }),
               Timeline.createBandInfo({
                   width:          45, // sum of all band's width must be set as style for #timeline below
                   intervalUnit:   Timeline.DateTime.MONTH, 
                   intervalPixels: 200,
                   timeZone:       <%= offsetHours %>,
                   eventSource:    eventSource,
                   theme:          theme,
                   layout:         'overview',  // original, overview, detailed,
                   date:           initDate
               })
           ];

           bandInfos[1].syncWith = 0;
           bandInfos[1].highlight = true;
           bandInfos[2].syncWith = 0;
           bandInfos[2].highlight = true;
           
           // create the Timeline
           tl = Timeline.create(tl_el, bandInfos, Timeline.HORIZONTAL);
           tl.getBand(0).addOnScrollListener(function() {
               var date = tl.getBand(0).getCenterVisibleDate();
               if(window.parent && window.parent.CQ){
                    var dt = window.parent.CQ.WCM.isTimewarpMode() ?
                             window.parent.CQ.Ext.getCmp("cq.sidekick.timewarp.datetime_outside") :
                             window.parent.CQ.Ext.getCmp("cq.sidekick.timewarp.datetime");
                    if(dt){
                        dt.setValue(date.getTime());
                    }
               }
              <% String locDateFormat = I18n.get(slingRequest.getResourceBundle(slingRequest.getLocale()), "mm.dd.yyyy HH:MM"); %>
               bottom.innerHTML = date.format("<%= locDateFormat %>");
           });
           
           eventSource.loadJSON(timelineData, ".");
           
           tl.layout(); // display the Timeline
           window.onresize = handleResize;
       }

       function handleResize(){
            window.location.reload();
       }
    </script>
    
    <script>
        var timelineData = {
            'dateTimeFormat': 'iso8601',

            'events' : [
<%
    Session session = slingRequest.getResourceResolver().adaptTo(Session.class);

    List<Version> versions = new ArrayList<Version>();
    Node node = (Node) session.getItem(path);
    if (node.hasNode(NameConstants.NN_CONTENT)) {
        Node contentNode = node.getNode(NameConstants.NN_CONTENT);
        if (contentNode.isNodeType(JcrConstants.MIX_VERSIONABLE)) {
            Version version = contentNode.getVersionHistory().getRootVersion();
            while (version != null) {
                versions.add(version);
                Version[] successors = version.getSuccessors();
                if (successors != null && successors.length > 0) {
                    // always take the first successor only
                    version = successors[0];
                } else {
                    break;
                }
            } 
        }
    }
    
    String[] colors = new String[] {
        "#6f7d93", "#6a9a68", "#ab5c58", "#ae8f53", "#6aa3ec", "#ec6a6f","#6fd07d","#d8c267"
    };
    int colorIndex = 0;    
    Iterator<Version> iter = versions.iterator();
    Version v;
    Version next = iter.hasNext() ? iter.next() : null;
    for (; next != null;) {
        v = next;
        next = iter.hasNext() ? iter.next() : null;
        
        String title;
        final String[] labels = v.getContainingHistory().getVersionLabels(v);
        if ( labels == null || labels.length == 0 ) {
            title = v.getName();
            if ("jcr:rootVersion".equals(title)) {
                title = "Original version";

                // skipping the root version
                continue;
            }
        } else {
            final StringBuffer buf = new StringBuffer(labels[0]);
            for(int i=1;i<labels.length;i++) {
                buf.append(", ");
                buf.append(labels[i]);
            }
            title = buf.toString();
        }
        Node contentNode = v;
        if (v.hasNode(JcrConstants.JCR_FROZENNODE)) {
            contentNode = v.getNode(JcrConstants.JCR_FROZENNODE);
        }
        
        String comment;
        if (contentNode.hasProperty(NameConstants.PN_VERSION_COMMENT)) {
            comment = contentNode.getProperty(NameConstants.PN_VERSION_COMMENT).getString();
        } else {
            comment = "";
        }
        
        Calendar created = v.getCreated();
        if ("jcr:rootVersion".equals(v.getName()) && node.hasProperty("jcr:created")) {
            created = node.getProperty("jcr:created").getDate();
        }
        String color = colors[colorIndex];
        colorIndex++;
        if (colorIndex >= colors.length) {
            colorIndex = 0;
        }

        Calendar nextCreated;
        if (next != null) {
            nextCreated = next.getCreated();
        } else {
//            nextCreated = DateUtil.parseISO8601("2012-01-01");
              nextCreated = new DateUtil().getNow();
        }
%>                {
                    'start': '<%= ISO8601.format(created) %>',
                    'end': '<%= ISO8601.format(nextCreated) %>',                    
                    'eventID': '<%= xssAPI.encodeForJSString(v.getName()) %>',
                    'title': '<%= xssAPI.encodeForJSString(title) %>',
                    'description': '<%= xssAPI.encodeForJSString(comment) %>',
                    'color': '<%= color %>'
                 }
<%
        if (next != null) {
            %>,
<%
        }
    }
%>
            ]
        }
    </script>
    
    <style>
        body {
            margin-top: 15px;
        }
            
        table {
            font-size: 100%;
        }
        
        #timeline {
            height: 170px;
        }
        
        .timeline-default {
            font-family: Trebuchet MS, Helvetica, Arial, sans serif;
            font-size: 8pt;
        }
        
        .timeline-copyright {
            display:none;
        }
        
        #goform {
            text-align: center;
            margin-top: 30px;
        }
        
        #bottom {
            font-family: Trebuchet MS, Helvetica, Arial, sans serif;
            height: 15px;
            font-size: 14px;
            border: 1px solid #000;
            border-bottom-style: none;
            text-align: center;
            position: absolute;
            top: 195px;
            left: 42%;
            width: 16%;
            padding: 5px;

        }
        
        .event-epg-bubble {
            height: 32px;
            padding: 4px;
            font-size: 12px;
        }
        
        .event-epg-bubble-title {
            font-weight: bold;
        }
        
        .event-epg-bubble-subtitle {
            color: #444;
        }

        .timeline-thinline {
            position: absolute;
            margin-top: 15px;
            height: 180px;
            z-index: 1000;
            width: 1px;
            left: 50%;
            top: 0px;
            background-color:black;
            opacity: 0.5;
        }


        /*Nifty Corners Cube CSS by Alessandro Fulciniti
The following classes are added dinamically by javascript,
and their use should be avoided in the markup */

b.niftycorners,b.niftyfill{display:block}
b.niftycorners *{display:block;height: 1px;line-height:1px;font-size: 1px;
    overflow:hidden;border-style:solid;border-width: 0 1px}
/*normal*/
b.r1{margin: 0 3px;border-width: 0 2px}
b.r2{margin: 0 2px}
b.r3{margin: 0 1px}
b.r4{height: 2px}
b.rb1{margin: 0 8px;border-width:0 2px}
b.rb2{margin: 0 6px;border-width:0 2px}
b.rb3{margin: 0 5px}
b.rb4{margin: 0 4px}
b.rb5{margin: 0 3px}
b.rb6{margin: 0 2px}
b.rb7{margin: 0 1px;height:2px}
b.rb8{margin: 0;height:2px}
b.rs1{margin: 0 1px}
/*transparent inside*/
b.t1{border-width: 0 5px}
b.t2{border-width: 0 3px}
b.t3{border-width: 0 2px}
b.t4{height: 2px}
b.tb1{border-width: 0 10px}
b.tb2{border-width: 0 8px}
b.tb3{border-width: 0 6px}
b.tb4{border-width: 0 5px}
b.tb5{border-width: 0 4px}
b.tb6{border-width: 0 3px}
b.tb7{border-width: 0 2px;height:2px}
b.tb8{border-width: 0 1px;height:2px}
b.ts1{border-width: 0 2px}
    </style>
</head>

<body onload="onLoad();" class="timeline-default">
    <div id="timeline">
    </div>
    <div id="timeline_line" class="timeline-thinline">
    </div>
    <div id="bottom">datetime</div>
</body>
</html>

