/*
 * ADOBE CONFIDENTIAL
 *
 * Copyright 2015 Adobe Systems Incorporated
 * All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
 */
;(function ($, ns, channel, window, document, undefined) {
    "use strict";

    var POLICY_EVENT_NAMESPACE_SELECTOR = ".policy";
    var POLICIES_ROOT_DIRECTORY = "/settings/wcm/policies/";
    var EMPTY_TITLE = Granite.I18n.get('New policy');
    var COPY_OF_TITLE_PREFIX = Granite.I18n.get('Copy of');
    var PARAMS_CONTAINER_CLASS = 'cq-Policy-params';
    var NEW_POLICY_NAME_PREFIX = 'policy_';

    var DIALOG_FORM_SELECTOR = 'form.cq-dialog';
    var DIALOG_DESIGN_CONTENT_SELECTOR = ".js-cq-Policy-designWrapper";

    var POLICY_DIALOG_CONTENT_SELECTOR = '.js-Policy-dialog-content';
    var POLICY_SELECTOR = '.js-editor-Policy';
    var POLICY_TITLE_TEXTFIELD_SELECTOR = '.js-Policy-detail-title';
    var POLICY_DESCRIPTION_TEXTFIELD_SELECTOR = '.js-Policy-detail-description';
    var POLICY_CREATE_BTN_SELECTOR = '.js-Policy-create';
    var POLICY_DUPLICATE_BTN_SELECTOR = '.js-Policy-duplicate';
    var POLICY_OPEN_CLASSIC_BTN_SELECTOR = '.js-cq-Policy-openClassicDesign';
    var POLICY_SELECT_SELECTOR = '.js-Policy-dialog-select';
    var POLICY_TEMPLATES_CONTAINER_SELECTOR = '.js-cq-Policy-templates';
    var POLICY_TEMPLATES_LIST_SELECTOR = '.js-cq-Policy-templates-list';

    var DATA_POLICY_CONTENT_PATH = 'data-policy-content-path';
    var DATA_POLICY_NODE_NAME = 'data-policy-name';
    var DATA_POLICY_DESCRIPTION = 'data-policy-description';
    var DATA_POLICY_MAPPING_PATH = 'data-policy-mapping-path';
    var DATA_POLICY_ABSOLUTE_PATH = 'data-policy-absolute-path';
    var DATA_POLICY_RELATIVE_PATH = 'data-policy-relative-path';
    var DATA_POLICY_MAPPING_RESOURCE_TYPE = 'data-policy-mapping-resource-type';
    var DATA_POLICY_CONTENT_RESOURCE_TYPE = 'data-policy-content-resource-type';
    var DATA_POLICY_RESOURCE_TYPE = 'data-policy-resource-type';
    var DATA_POLICY_DIRECTORY_PATH = 'data-policy-directory-path';

    var DATA_DESIGN_DIALOG_PATH = 'data-design-dialog-path';
    var DATA_DESIGN_DIALOG_CLASSIC_PATH = 'data-design-dialog-classic-path';

    var TEMPLATES_URL = "/mnt/overlay/cq/gui/components/authoring/dialog/policy/templates.html";

    /**
     * A Policy internal reference
     * @typedef {{title: string, text: string, nodeName: string, description: string, absolutePath: string, relativePath: string, type: string}} Policy
     */

    /**
     * Currently displayed policy
     *
     * @type {Policy}
     * @private
     */
    var _currentPolicy;

    /**
     * Path of the current content to be edited
     */
    var _currentContentPath;

    /**
     * Resource type of the content referenced by the policy
     */
    var _currentContentResourceType;

    /**
     * Path to the policy mapping of the current resource
     */
    var _currentPolicyMappingPath;

    /**
     * Resource type of the policy mapping
     */
    var _currentPolicyMappingResourceType;

    /**
     * Node name of the current policy
     */
    var _currentPolicyNodeName;

    /**
     * Absolute path of the policy
     */
    var _currentPolicyAbsolutePath;

    /**
     * Relative path of the policy suitable for the policy mapping
     */
    var _currentPolicyRelativePath;

    /**
     * Resource type to be associated with the policy
     */
    var _currentPolicyResourceType;

    /**
     * Path to the directory for the newly created policies
     */
    var _currentPolicyDirectoryPath;

    /**
     * Path to the design dialog
     */
    var _designDialogPath;

    /**
     * Path to the classic design dialog
     */
    var _classicDesignDialogPath;

    /**
     * Policy detail container
     */
    var $policyContainer;

    /**
     * The list of policies
     *
     * {@code Coral.Select} element
     */
    var select;

    /**
     * The button responsible for displaying the classic design dialog
     *
     * {@code Coral.Button} element
     */
    var showClassicDesignDialog;

    /**
     * The button to create a new policy
     *
     * {@code Coral.Button} create button
     */
    var createBtn;

    /**
     * The button to duplicate the current policy
     *
     * {@code Coral.Button}
     */
    var duplicateBtn;

    /**
     * Title of the current policy
     *
     * {@code Coral.Textfield}
     */
    var titleField;

    /**
     * Description of the current policy
     *
     * {@code Coral.Textfield}
     */
    var descriptionField;

    /**
     * Container of hidden form params
     *
     * @type {jQuery}
     */
    var $paramContainer = $('<span class="' + PARAMS_CONTAINER_CLASS + '"><input type="hidden" name="_charset_" value="utf-8" /></span>');

    /**
     * Foundation UI library
     *
     * @type {{}}
     */
    var ui = $(window).adaptTo("foundation-ui");

    /**
     * Foundation UI registry
     *
     * @type {jQuery}
     */
    var registry = $(window).adaptTo("foundation-registry");

    /**
     * Generates Sling form parameters based on the given policy
     *
     * @param {Policy} policy - The policy object
     */
    function setPolicySlingParams (policy) {
        var params = '';

        if (policy.duplicate && policy.duplicate.length > 0) {
            params += '<input type="hidden" name="' + policy.absolutePath + '@CopyFrom" value="' + policy.duplicate + '" />';
        }

        params += '<input type="hidden" name="' + _currentPolicyMappingPath + '/sling:resourceType" value="' + _currentPolicyMappingResourceType + '" />' +
            '<input type="hidden" name="' + _currentPolicyMappingPath + '/cq:policy" value="' + policy.relativePath + '" />' +
            '<input type="hidden" name="./jcr:primaryType" value="nt:unstructured" />' +
            // Requirement of the ConfMgr of having a jcr:content child in case of a mergeList directory
            '<input type="hidden" name="./jcr:content/jcr:primaryType" value="nt:unstructured" />';

        // Reassigning potentially detached object
        $paramContainer = $('.' + PARAMS_CONTAINER_CLASS);
        $paramContainer.empty();
        $paramContainer.append(params);
    }

    /**
     * Creates one policy from a given HTML element or a jQuery instance
     *
     * @param {jQuery|HTMLElement} element - Source element for the
     * @returns {Policy}
     */
    function createPolicy (element) {
        var policy;

        if (element) {
            var $element = element instanceof jQuery ? element : $(element);

            var title = $element.text();
            var absolutePath = $element.val();

            var text = $element.text();
            if (text === EMPTY_TITLE) {
                text = '';
            }

            policy = {
                title: title,
                text: text,
                nodeName: $element.attr(DATA_POLICY_NODE_NAME) || '',
                description: $element.attr(DATA_POLICY_DESCRIPTION) || '',
                absolutePath: absolutePath || '',
                relativePath: $element.attr(DATA_POLICY_RELATIVE_PATH) || '',
                type: $element.attr(DATA_POLICY_RESOURCE_TYPE) || ''
            };
        }

        return policy;
    }

    /**
     * Returns a new empty policy object
     *
     * @param {{}} [config]   - Initial properties to be added to the policy
     * @returns {Policy}
     */
    function createNewPolicy (config) {
        var policyName = NEW_POLICY_NAME_PREFIX + new Date().getTime();

        var defaultConfig = {
            title: '',
            text: '',
            description: '',
            absolutePath: _currentPolicyDirectoryPath + policyName,
            relativePath: _currentContentResourceType + '/' + policyName,
            type: _currentPolicyResourceType
        };

        return $.extend({}, defaultConfig, config);
    }

    /**
     * Returns the {@code Coral.Select.Item} from the {@code Coral.Select} Widget
     *
     * @param {string} path - Path attribute of the targeted {@code HTMLElement} {@code Coral.Select.Item}
     * @returns {jQuery} - jQuery Object encapsulating the {@code HTMLElement} {@code Coral.Select.Item}
     */
    function getItem (path) {
        var items = select.items.getAll();

        for (var i = 0, length = items.length; i < length; i++) {
            var item = items[i];
            if (path === item.value) {
                return item;
            }
        }
    }

    /**
     * Sets the current policy based on {@code value}'s type and data
     *
     * If {@code value} is null or undefined, current policy is set to the very first {@code Coral.Select.Item} contained in the {@code Coral.Select} Widget
     *
     * @param {Policy|string} [value] - Value of the policy to be set as currently being displayed. Can be either a policy {@code Object}, a string or not set
     */
    function setCurrentPolicy (value) {
        if (!value) {
            return;
        }

        var item;

        // Value is an object
        if (value && value.absolutePath) {
            _currentPolicy = value;
        } else {
            // Value is a string equal to the value of an item
            if (value && value.length > 0) {
                item = getItem(value);
            } else {
                item = select.items.first();
            }

            _currentPolicy = createPolicy(item);
        }

        if (!_currentPolicy) {
            return;
        }

        selectItem(_currentPolicy.absolutePath);

        setPolicyDetail(_currentPolicy);
        setPolicySlingParams(_currentPolicy);

        updateFormAction(_currentPolicy);
    }

    /**
     * Fills the detail fields with the given policy data
     *
     * @param {Policy} policy - Policy for which data should be displayed
     */
    function setPolicyDetail (policy) {
        titleField.value = (policy && policy.text ? policy.text : '');
        descriptionField.value = (policy && policy.description ? policy.description : '');
    }

    /**
     * Returns the string to be displayed for the given policy
     *
     * @param {Policy} policy - The policy from which to extract the string
     * @returns {string} - The string to be displayed for the given policy
     */
    function getDisplayFromPolicy (policy) {
        if (policy.text && policy.text.length > 0) {
            return policy.text;
        } else if (policy.title && policy.title.length > 0) {
            return policy.title;
        }

        return EMPTY_TITLE;
    }

    /**
     * Updates the values of a {@code Coral.Select.Item} with the given policy
     *
     * @param {Policy} policy - The policy corresponding to the {@code Coral.Select.Item} to be updated
     */
    function updateSelectItem (policy) {
        if (!policy) {
            return;
        }

        var item = getItem(policy.absolutePath);

        updateItemValue(item, policy);

        setPolicySlingParams(policy);
    }

    /**
     * Updates the value of the given {@code Coral.Select.Item} with the given policy
     *
     * @param item
     * @param {Policy} policy
     */
    function updateItemValue(item, policy) {
        if (!item || !policy) {
            return;
        }

        if (item.content) {
            item.content.textContent = getDisplayFromPolicy(policy);
        }

        item.value = policy.absolutePath;

        if (item.dataset) {
            setPolicyItemData(item, policy);
        }
    }

    /**
     * Converts a policy into the configuration object required by a {@code Coral.Select.Item}
     *
     * @param {Policy} policy
     * @returns {{content: {textContent: string}, value: (*|string)}}
     */
    function getItemConfig(policy) {
        return {
            content: {
                textContent: getDisplayFromPolicy(policy)
            },
            value: policy.absolutePath
        };
    }

    /**
     * Sets the data attributes relative to the given {@code Coral.Select.Item}
     * @param {Coral.Select.Item} item
     * @param {Policy} policy
     */
    function setPolicyItemData (item, policy) {
        item.dataset.description = policy.description;
        item.dataset.policyName = policy.nodeName;
        item.dataset.policyRelativePath = policy.relativePath;
        item.dataset.policyResourceType = policy.type;
    }

    /**
     * Adds a new {@code Coral.Select.Item} to the {@code Coral.Select} based on the given policy's data
     *
     * @param {Policy} policy - The policy from which to extract data from
     * @param {number} [position] - the position where to add the {@code Coral.Select.Item}
     */
    function addItem (policy, position) {
        // Add item only if it is not yet in the list
        var currentItem = getItem(policy.absolutePath);

        if (currentItem) {
            return;
        }

        var items = select.items.getAll();
        var beforeItem;

        if ($.isNumeric(position) && position < select.items.length) {
            beforeItem = items[position];
        }

        var addedItem = select.items.add(getItemConfig(policy), beforeItem);

        setPolicyItemData(addedItem, policy);

        selectItem(policy.absolutePath);
    }

    /**
     * Selects the {@code Coral.Select.Item} with the given path as value
     * @param path
     */
    function selectItem (path) {
        Coral.commons.ready(select, function () {
            select.value = path;
        });
    }

    /**
     * Updates the form action attribute with the absolute path of the given policy
     *
     * @param {Policy} policy
     */
    function updateFormAction (policy) {
        if (!policy) {
            return;
        }

        $policyContainer.closest(DIALOG_FORM_SELECTOR).attr('action', policy.absolutePath);
    }

    /**
     * Pushes the current policy to the list of {@code Coral.Select.Item} of the {@code Coral.Select},
     * creates a new empty {@code Policy} and sets it as the current policy
     */
    function createPolicyBtnCallback () {
        var newPolicy = createNewPolicy();

        addItem(newPolicy);
        setCurrentPolicy(newPolicy);
        swapDialogContent();
    }

    /**
     * Duplicates the current policy
     */
    function duplicateCurrentPolicyBtnCallback () {
        var policyCopy = $.extend(true, {}, _currentPolicy);
        var text = COPY_OF_TITLE_PREFIX + ' ' + policyCopy.text;
        var policyName = NEW_POLICY_NAME_PREFIX + new Date().getTime();

        policyCopy.text = text;
        policyCopy.title = text;
        policyCopy.nodeName = policyName;
        policyCopy.duplicate = _currentPolicy.absolutePath;
        // Duplicate locally
        policyCopy.absolutePath = _currentPolicyDirectoryPath + policyName;
        policyCopy.relativePath = _currentContentResourceType + '/' + policyName;

        addItem(policyCopy);
        setCurrentPolicy(policyCopy);
    }

    /**
     * Verifies if the policy is actually marked as persisted
     *
     * @param {Policy} policy
     * @returns {boolean}
     */
    function isPolicyPersisted(policy) {
        var item = getItem(policy.absolutePath);

        return (item && item.dataset.policyPersisted);
    }

    /**
     * Start the workflow of editing the design via a classic dialog
     */
    function editClassicDesign() {
        if (isPolicyPersisted(_currentPolicy)) {
            openClassicDesign();
        } else {
            ns.ui.helpers.prompt({
                title: Granite.I18n.get("Save Policy"),
                message: Granite.I18n.get("You must save the current policy before opening the design dialog."),
                actions: [
                    {
                        id: "CANCEL",
                        text: Granite.I18n.get("Cancel", "Label for Cancel button")
                    },
                    {
                        id: "SAVE",
                        text: Granite.I18n.get("Save", "Label for persisting the policy before opening a classic design dialog"),
                        primary: true
                    }
                ],
                callback: function (actionId) {
                    if (actionId === "SAVE") {
                        // Persist the policy form asynchronously
                        $policyContainer.closest("form.cq-dialog").eq(0).on('submit', openClassicDesign).submit();
                    }
                }
            });
        }
    }

    /**
     * Opens the classic design dialog from the policy
     */
    function openClassicDesign() {
        $.ajax({
            url: _classicDesignDialogPath,
            type: "get",
            data: {
                content: _currentPolicy.absolutePath,
                resourceType: _currentPolicyResourceType,
                policy: true
            }
        }).done(function(html) {
            $(document.body).append(html);
            var compatDialog = document.querySelector(".cq-compat-dialog");

            $(window).on('dialogwrapper-ready', function () {
                compatDialog.setAttribute("backdrop", "modal");
                compatDialog.setAttribute("movable", true);
            });

            // Currently the closeDialog function does not verify which dialog to close and close itself anyway
            // Avoid closing the main dialog when closing the classic design
            var closeDialog = ns.DialogFrame.closeDialog;
            ns.DialogFrame.closeDialog = function() {
                ns.DialogFrame.closeDialog = closeDialog;
            };
        });
    }

    /**
     * Updates the content of the design dialog
     */
    function swapDialogContent () {
        ui.wait();

        $.ajax({
            url: _designDialogPath + '.html' + _currentPolicy.absolutePath,
            type: "get",
            data: {
                policyContentResourceType: _currentContentResourceType,
                referrer: _currentContentPath,
                resourceType: _currentPolicyResourceType
            }
        }).done(function(html) {
            // Swap the new content in the dialog

            // Detach the dialog and break the event handlers
            var $dialog = ns.DialogFrame.currentFloatingDialog.remove();
            // Get the latest design content
            var $designContent = $(html).find(DIALOG_DESIGN_CONTENT_SELECTOR).children();

            // Replace the content of the design dialog
            $dialog.find(DIALOG_DESIGN_CONTENT_SELECTOR).empty().append($designContent);

            // Reattach the dialog to the DOM
            $(document.body).append($dialog);
            // Re-attribute dialog frame variable
            // As the policy dialog is fullscreen only
            // just the currentDialog variable should be refreshed
            // currentFloatingDialog should be null
            ns.DialogFrame.currentFloatingDialog = $dialog;

            ui.clearWait();

            // Re-initialize the dialog eventing
            $dialog.trigger('cui-contentloaded');
            channel.trigger('dialog-ready');
        });
    }

    /**
     * Updates the current policy with the latest values of the detail fields
     */
    function updatePolicyDetailCallback () {
        _currentPolicy.text = _currentPolicy.title = titleField.value;
        _currentPolicy.description = descriptionField.value;

        updateSelectItem(_currentPolicy);
        enableShowClassicDesign();
    }

    /**
     * The Default Sling Servlet seems not to allow the creation of deeply nested nodes without an actual near parent.
     *
     * Therefore when opening the policy dialog, ensure all the intermediary directories are available for the creating of the first policy of a certain component type
     *
     * @returns {$.Promise}
     */
    function touchPolicyParentDirectories () {

        // only try to touch directories if the _currentPolicyDirectoryPath is the parent path of the current form's action
        // _currentPolicyDirectoryPath comes with a trailing slash, keep it for the parent path too
        var parentPath = _currentPolicy.absolutePath.substring(0, _currentPolicy.absolutePath.lastIndexOf("/") + 1);

        if (parentPath === _currentPolicyDirectoryPath) {


            var policiesDirectoryRootIndex = _currentPolicyDirectoryPath.indexOf(POLICIES_ROOT_DIRECTORY);
            var policiesDirectoryAbsolutePath = _currentPolicyDirectoryPath.substr(0, policiesDirectoryRootIndex + POLICIES_ROOT_DIRECTORY.length - 1);
            var componentPathDirectories = _currentPolicyDirectoryPath.substr(policiesDirectoryRootIndex + POLICIES_ROOT_DIRECTORY.length, _currentPolicyDirectoryPath.length);
            var data = {};

            // No need to post anything if the path made out of the component path is empty
            if (componentPathDirectories.length < 1) {
                return $.Deferred().resolve();
            }

            if (componentPathDirectories.lastIndexOf("/") === componentPathDirectories.length - 1) {
                componentPathDirectories = componentPathDirectories.substr(0, componentPathDirectories.length - 1);
            }

            componentPathDirectories = componentPathDirectories.split("/");

            do {
                data["./" + componentPathDirectories.join("/") + "/jcr:primaryType"] = "nt:unstructured";

                componentPathDirectories.splice(componentPathDirectories.length - 1, 1);

            } while (componentPathDirectories.length > 0);

            return $.ajax({
                url: policiesDirectoryAbsolutePath,
                type: "post",
                data: data
            })
        } else {
            return $.Deferred().resolve();
        }
    }

    /**
     * Enables or disables the button for editing the design via a classic dialog based on the value of the title field
     */
    function enableShowClassicDesign() {
        if (!titleField.value || titleField.value.length < 1) {
            showClassicDesignDialog.setAttribute("disabled",  true);
        } else {
            showClassicDesignDialog.removeAttribute("disabled");
        }
    }

    /**
     * Load the list of templates current policy is used in
     * @returns {*}
     */
    function loadTemplatesList() {
        // set spinner
        ui.wait();

        return $.ajax({
            type: 'GET',
            url: Granite.HTTP.externalize(TEMPLATES_URL + _currentPolicy.absolutePath),
            dataType: 'html'
        }).done(function(html) {
            var $templates = $(POLICY_TEMPLATES_CONTAINER_SELECTOR);
            $templates.find(POLICY_TEMPLATES_LIST_SELECTOR).replaceWith(html);

            ui.clearWait();
        });
    }

    channel.on('foundation-contentloaded', function() {
        $policyContainer = $(POLICY_DIALOG_CONTENT_SELECTOR).eq(0);

        if ($policyContainer.length > 0) {
            var policyElement = $(POLICY_SELECTOR).eq(0);

            // Values of the currently associated policy
            // In case no policy is associated with the element,
            // it can also be generated values suitable for creating of a new policy
            _currentPolicyAbsolutePath = Granite.HTTP.internalize(policyElement.closest(DIALOG_FORM_SELECTOR).attr('action')) || policyElement.attr(DATA_POLICY_ABSOLUTE_PATH);
            _currentContentPath = policyElement.attr(DATA_POLICY_CONTENT_PATH);
            _currentContentResourceType = policyElement.attr(DATA_POLICY_CONTENT_RESOURCE_TYPE);
            _currentPolicyMappingPath = policyElement.attr(DATA_POLICY_MAPPING_PATH);
            _currentPolicyRelativePath = policyElement.attr(DATA_POLICY_RELATIVE_PATH);
            _currentPolicyNodeName = policyElement.attr(DATA_POLICY_NODE_NAME);
            _currentPolicyResourceType = policyElement.attr(DATA_POLICY_RESOURCE_TYPE);
            _currentPolicyDirectoryPath = policyElement.attr(DATA_POLICY_DIRECTORY_PATH);
            _currentPolicyMappingResourceType = policyElement.attr(DATA_POLICY_MAPPING_RESOURCE_TYPE);
            _designDialogPath = policyElement.attr(DATA_DESIGN_DIALOG_PATH);
            _classicDesignDialogPath = policyElement.attr(DATA_DESIGN_DIALOG_CLASSIC_PATH);

            createBtn = $policyContainer.find(POLICY_CREATE_BTN_SELECTOR)[0];
            duplicateBtn = $policyContainer.find(POLICY_DUPLICATE_BTN_SELECTOR)[0];
            titleField = $policyContainer.find(POLICY_TITLE_TEXTFIELD_SELECTOR)[0];
            descriptionField = $policyContainer.find(POLICY_DESCRIPTION_TEXTFIELD_SELECTOR)[0];

            select = $policyContainer.find(POLICY_SELECT_SELECTOR)[0];

            if ($policyContainer.find('.' + PARAMS_CONTAINER_CLASS).length === 0) {
                $policyContainer.prepend($paramContainer);
            }

            createBtn.off(POLICY_EVENT_NAMESPACE_SELECTOR).on('click' + POLICY_EVENT_NAMESPACE_SELECTOR, createPolicyBtnCallback);
            duplicateBtn.off(POLICY_EVENT_NAMESPACE_SELECTOR).on('click' + POLICY_EVENT_NAMESPACE_SELECTOR, duplicateCurrentPolicyBtnCallback);
            // Update the policy title from the title field
            $policyContainer.off(POLICY_EVENT_NAMESPACE_SELECTOR).on('blur keyup' + POLICY_EVENT_NAMESPACE_SELECTOR, POLICY_TITLE_TEXTFIELD_SELECTOR, updatePolicyDetailCallback);
            $policyContainer.off(POLICY_EVENT_NAMESPACE_SELECTOR).on('blur keyup' + POLICY_EVENT_NAMESPACE_SELECTOR, POLICY_DESCRIPTION_TEXTFIELD_SELECTOR, updatePolicyDetailCallback);

            // Listen for Select Widget selection change
            select.off(POLICY_EVENT_NAMESPACE_SELECTOR).on('change' + POLICY_EVENT_NAMESPACE_SELECTOR, function(event) {
                if (event.target.selectedItem) {
                    setCurrentPolicy(event.target.selectedItem.value);
                    swapDialogContent();
                    enableShowClassicDesign();
                }
            });

            if (_currentPolicyAbsolutePath && select.items.length > 0) {
                setCurrentPolicy(_currentPolicyAbsolutePath);

                // The provided absolute path of policy is not in the list of available policies
                // In that case, initialize the current policy with the given data
                if (!_currentPolicy) {
                    setCurrentPolicy(createNewPolicy({
                        nodeName: _currentPolicyNodeName,
                        absolutePath: _currentPolicyAbsolutePath,
                        relativePath: _currentPolicyRelativePath,
                        type: _currentPolicyResourceType
                    }));

                    addItem(_currentPolicy);
                }
            } else {
                setCurrentPolicy(createNewPolicy());
                addItem(_currentPolicy);
            }

            showClassicDesignDialog = $policyContainer.find(POLICY_OPEN_CLASSIC_BTN_SELECTOR)[0];

            if (_classicDesignDialogPath && _classicDesignDialogPath.length > 0 && showClassicDesignDialog) {
                showClassicDesignDialog.className += " is-visible";
                showClassicDesignDialog.off(POLICY_EVENT_NAMESPACE_SELECTOR).on("click" + POLICY_EVENT_NAMESPACE_SELECTOR, editClassicDesign);

                enableShowClassicDesign();
            }

            loadTemplatesList();

        }
    });

    registry.register("foundation.form.submit", {
        selector: DIALOG_FORM_SELECTOR,
        handler: function(formEl) {

            // if it is a policy dialog form
            if (formEl.querySelector('.js-Policy-dialog-content') !== null) {

                // Ensure the parents of the policy exist
                return touchPolicyParentDirectories();
            } else {

                // in all other forms just resolve with undefined
                return $.Deferred().resolve();
            }
        },

    });

}(jQuery, Granite.author, jQuery(document), this, document));
