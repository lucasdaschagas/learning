/*
 * ADOBE CONFIDENTIAL
 *
 * Copyright 2012 Adobe Systems Incorporated
 * All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
 */

var presetList = [];

var filteredTypeList = [];
var filteredStateList = [];
var sortByNameAscending = false;

(function(document, $) {

    "use strict";

    //Asset detail navigation
    var prevAssetNavigatorRel = ".asset-navigator-prev",
        nextAssetNavigatorRel = ".asset-navigator-next",
        assetNavigatorContainer = ".asset-navigator";

    $(document).one('foundation-contentloaded', function(){
    	$('.copy-buttons-container-presets').hide();
        var assetPath = $('.viewer-preset-data').data('asset'),
            assetType = $('.viewer-preset-data').data('s7type');
        if (assetType === 'CarouselSet') {
            $.get(assetPath + '.set.carousel.json', function(resp){
                $('.viewer-preset-data').data("swatchMembersAreProducts", commerceChecker.containAllValidProd(resp));

            });
        }
         // added rowheader and aria-selcted ( for selection ) to each td
         $('.foundation-collection-item > td').attr({"role": "rowheader", "aria-selected": "false"});
    });

    //todo: implement switching of publish or preview for servlet
    var EMBED_PUBLISH_JSON = ".embedcode.publish.json";
    var EMBED_PREVIEW_JSON = ".embedcode.preview.json";
    $.EMBEDCODE_LINK = EMBED_PREVIEW_JSON;
    // $.EMBEDCODE_LINK = Granite.HTTP.externalize('/mnt/overlay/dam/gui/content/s7dam/viewerpresets/embedcode.html/');

    $.INTERACTIVEPREVIEWPATH = Granite.HTTP.externalize('/mnt/overlay/dam/gui/content/s7dam/viewerpresets/interactivepreview.html/interactivevideo');

    //Translate JCR platform type to s7ondemand viewer type
    $.PLATFORM_TO_VIEWERTYPE = {
        'HTML5' : 'html5',
        'FLASH_SDK' : 'flash'
    }
    //Translate JCR viewer type to s7ondemand template type
    $.VIEWERTYPE_TO_TEMPLATETYPE = {
        'IMAGE_SET' : 'zoom',
        'ZOOM' : 'basiczoom',
        'FLYOUT_ZOOM' : 'flyout',
        'VIDEO' : 'video',
        'SPIN_SET' : 'spin',
        'MIXED_MEDIA': 'mixedmedia',
        'PANORAMIC_IMAGE': 'panoramicimage',
        'AS3' : 'generic',
        'INTERACTIVE_IMAGE' : 'interactiveimage',
        'INTERACTIVE_VIDEO' : 'interactivevideo',
        'CAROUSEL_SET' : 'carousel',
        'VERTICAL_ZOOM' : 'verticalzoom',
        'VIDEO_360' : 'video360',
        'SMART_CROP_VIDEO': 'smartcropvideo',
        'DIMENSIONAL': 'dimensional'
    }

    $.PREVIEWPATH ={
        'html5' : {
            'basiczoom' : 'html5/BasicZoomViewer.html',
            'zoom' : 'html5/ZoomViewer.html',
            'flyout' : 'html5/FlyoutViewer.html',
            'spin' : 'html5/SpinViewer.html',
            'video' : 'html5/VideoViewer.html',
            'mixedmedia' : 'html5/MixedMediaViewer.html',
            'panoramicimage' : 'html5/PanoramicViewer.html',
            'interactiveimage' : 'html5/InteractiveImage.html',
            'interactivevideo' : 'html5/InteractiveVideoViewer.html',
            'carousel' : 'html5/CarouselViewer.html',
			'verticalzoom' : 'html5/ZoomVerticalViewer.html',
			'video360' : 'html5/Video360Viewer.html',
            'smartcropvideo' : 'html5/SmartCropVideoViewer.html',
            'dimensional' : 'html5/DimensionalViewer.html'
        }
    }

    $(document).one("foundation-contentloaded aem-assets-s7-rail-viewerpresets sets-viewerpresets", function(e) {

        //refresh main view when the user clicks "content-only" to recall asset navigation
        $(document).on('foundation-toggleable-hide', function(e){
            if ($(e.target).attr('id') == 'shell-propertiespage-rail') {
                window.location.href = window.location.href;
            }

        });
    });

    $(document).on("foundation-contentloaded aem-assets-s7-rail-viewerpresets", function(e) {

    	if(!$('.sets-viewerpresets')) {
	    	if(!$('#aem-assets-s7-rail-viewerpresets').css('display') || $('#aem-assets-s7-rail-viewerpresets').css('display') == 'none') {
	    		return;
	    	}
    	}

        $('#copyVPUrlClipboard').hide();
        $('#copyVPEmbedClipboard').hide();
        $('#copyVPUrlClipboard').attr('href', $('#copyVPUrlClipboard').data("href"));
        $('#copyVPEmbedClipboard').attr('href', $('#copyVPEmbedClipboard').data("href"));
        var curAssetPath = $(".foundation-content-path").data("foundation-content-path");
        var idx = (typeof curAssetPath === 'undefined' || curAssetPath === null ? -1 : curAssetPath.indexOf("\\."));
        var curAsset = (idx === -1 ? curAssetPath : curAssetPath.substring(0, idx + 4));
        //remove rendition portion for trying to get copy URL/ preview in rendition page.
        if ( typeof curAsset != 'undefined' && curAsset != null && curAsset.indexOf('/jcr:content/renditions/') > 0) {
            curAsset = curAsset.substring(0, curAsset.indexOf('/jcr:content/renditions/'));
        }
        if ($(".viewer-preset-data").data("currentAsset") !== curAsset) {
            var assetDetailLength = $('.foundation-content-current .asset-detail').length;
            var isViewerPresetActive = $('.rail .icongroup a[data-view=\'viewerpreset\']').hasClass('active');
            if (!assetDetailLength && isViewerPresetActive) {
                $('.rail .rail-view.active').removeClass('active');
                $($('.icongroup a.active')).removeClass('active');
                $('.rail .rail-colorpalette-viewerpresets').addClass('hidden');
                $('.rail .rail-view .viewer-preset-data').parent().removeClass('active');
                $('.icongroup a:first-child').addClass('active')
                $($('.rail .rail-view')).first().addClass('active');
            }

            $(".viewer-preset-data").data("currentAsset", curAsset);
        }

        if ($(".viewer-preset-data").data("s7smartcropEnabled")) {
            var s7AssetFile = $(".viewer-preset-data").data("s7assetFile");
            if (s7AssetFile) {

                var params = new s7viewers.s7sdk.ParameterManager();
                params.addEventListener(s7viewers.s7sdk.Event.SDK_READY, function (ev) {
                    params.push("serverurl", "/is/image");
                    params.push("asset", s7AssetFile);
                    var mediaSet = new s7viewers.s7sdk.set.MediaSet(null, params, null);
                    mediaSet.addEventListener(s7viewers.s7sdk.event.AssetEvent.NOTF_SET_PARSED, function (ev) {
                        var cNodeCount = ev.s7event && ev.s7event.asset && ev.s7event.asset.vtts ? ev.s7event.asset.vtts.length : 0;
                        var smartcropsNotreadyMsg = $(".viewer-preset-data").data('smartcropsNotready');
                        var smartCropRatiosRequested=$(".viewer-preset-data").data("s7smartcropratiosrequested");
                        var showBanner = smartCropRatiosRequested > 0 ? cNodeCount < smartCropRatiosRequested : cNodeCount == 0;

                        if(showBanner) {
                            var items = $('.foundation-collection-item');
                            for(var i=0; i< items.length; i++) {
                                var item = $(items[i]);
                                var curcrop = item.find('.foundation-layout-util-breakword');
                                if(item.data("isSmartcropVideo")) {
                                    $(curcrop.get(0)).text(item.data().initValues.id + " " + smartcropsNotreadyMsg);
                                }
                            }
                        }

                    }, false);
                }, false);
                params.init();
            }
        }

        //trigger loading of viewer preset in case of persist open inner rail.
        var items = $('.foundation-collection-item');
        for(var i=0; i< items.length; i++) {
            var item = items[i];
            var preset = $(item).data("init-values");
            if(!preset || preset["jcr:content"] == "") {
                continue;
            }
            var content = jQuery.parseJSON(preset["jcr:content"]);
            if(content["dam:s7damType"] == "ViewerPreset" || content["category"]){
	            $(item).off('click');
	            $(item).on('click', function(e){
                    e.stopPropagation();
	                var preset = $(this).data("init-values");
	                var uri = $(this).data("foundation-collection-item-id");
	                onViewerPresetSelect(jQuery.parseJSON(preset["jcr:content"]), uri, this);
	            });
	            $(item).off('keydown');
	            $(item).on('keydown', function(e){
                    if (e.keyCode == 13 || e.keyCode == 32){
                        e.preventDefault();
                        e.stopPropagation();
                		var preset = $(this).data("init-values");
	                	var uri = $(this).data("foundation-collection-item-id");
	                	onViewerPresetSelect(jQuery.parseJSON(preset["jcr:content"]), uri, this);
                    }
	            });
            }
        }
    });

    /**
     * Encode asset for embedcode, this is necessary because embedcode will decode the asset name
     */
    function encodeAsset(asset) {
        var modAsset = asset;
        if ($(".dm-setup-info").data('scene7file')){
			modAsset = encodeURIComponent(modAsset);
			modAsset = modAsset.replace(/%2F/g, '/');
        }
        return modAsset;
    }

    //when viewer preset is clicked
    var onViewerPresetSelect = function(preset, uri, val){
        //Get video server from info component
        var previewVideoServerUrl = $(".dm-setup-info").data("previewVideoServer");
        var productionVideoServerUrl = $(".dm-setup-info").data("publishVideoServer");

        //todo: what is the logic for published in AEM-S7 runmode?
        // Because of a delay on updating the "publish" status to JCR, the "published" status in "preset" is not reliable.
        // So here we retrieve the publish value from jcr node directly
        if (!$(".dm-setup-info").data('scene7file')) { //DO NOT update status for hybrid
            updatePublishStatus();
        }
        var settings = $('.viewer-preset-data').data();
        var isPublished = settings.ispublished;
        var isPresetPublished = preset.published == "published";

        //todo: read this from the servlet
        var hadSiteCatalyst = settings.sitecatalyst;
        hadSiteCatalyst = ( hadSiteCatalyst ||  preset.category === 'VIDEO'
        || preset.category === 'INTERACTIVE_VIDEO'
        || preset.category === 'MIXED_MEDIA' );//always enable for video, shoppable video, and mixed media

        var isS7RemoteAsset = $(".viewer-preset-data").data("s7asset");
        var productionModifiers = "";

        //todo: for this value, where should we get the prest for analytics? Are they both the same for DM and AEMS7?
        //todo: do we have API in Bridge that can read this config?
        if (hadSiteCatalyst) {
            productionModifiers = 'config2=/content/dm/presets/analytics';
        }
        //todo: can we move to servlet?
		var extraParams;
        if (preset.category === 'VIDEO' || preset.category ==='MIXED_MEDIA' ||  preset.category ==='INTERACTIVE_VIDEO') {
            var atype = $('.viewer-preset-data').data('s7type');
            extraParams = 'videoserverurl=' + productionVideoServerUrl;
            if (preset.category ==='VIDEO') {
                extraParams += '&posterimage=' + encodeAsset(settings.asset); //force posterimage to use full asset path
            }
            //TODO: this is workaround to force progressive playback for non-AVS video for 6.0
            if (atype.toUpperCase() === 'VIDEO') {
                extraParams += '&playback=native';
            }
            productionModifiers += (productionModifiers.length > 0 ? '&' : '') + extraParams;
        }
		if (preset.category == 'VIDEO_360' || preset.category == 'SMART_CROP_VIDEO') {
			extraParams = 'videoserverurl=' + productionVideoServerUrl + '&playback=progressive';
            productionModifiers += (productionModifiers.length > 0 ? '&' : '') + extraParams;
		}

        //todo: We can get from backend
        if (preset.category === 'INTERACTIVE_VIDEO') {
            var vttPath = $('.viewer-preset-data').data('vtt');
            if (vttPath != '') {
                productionModifiers += (productionModifiers.length > 0 ? '&' : '') + 'interactivedata=' + vttPath +
                    "&VideoPlayer.contenturl=" + settings.s7productionimageserver.replace('/is/image/', '/is/content');
            }
        }
        var isCustom = !(preset.iscustom && preset.iscustom == "false");  // default to true if not present or invalid
        var productionUrl = $.buildURL( preset.platform,
            preset.category,
            uri,
            settings.asset,
            settings.s7productionimageserver,
            productionModifiers,
            settings.s7viewerpath,
            false, settings.publishrootpath, isCustom);

        //todo:how to handle this correctly? we need the JCR path for this asset
        var localAsset = "";
        if ($(".dm-setup-info").data("assetType") == "remote"){
            //we're going to preview a remote asset so there are some restrictions on lookup
            //for the servlet - we pass the whole jcr path containing base asset so we can fetch
            //cloud info from base asset
            localAsset = $(".dm-setup-info").data("assetJcrpath");
            isPublished = true;//assume remote asset publish
        }else{
            localAsset = $('.viewer-preset-data').data("currentAsset");
            localAsset = (localAsset == undefined ? settings.asset : localAsset);
        }

        var modAsset = localAsset;
        var embedCode = ".embedcode.copy.text";
        embedCode = uri + embedCode + localAsset;
        var servletURL = embedCode;

        $.get(servletURL)
            .always( function(response){
                productionUrl = response;
            });

        if(isPublished && isPresetPublished) {
            //do not show copy URL for interactive image preset
            //show the lower buttons panel always if asset and preset is published
            $('.copy-buttons-container-presets').show();
            $(".viewer-presets-container").addClass("copybtnsviewers");
            //if it isn't an interactive image, show all options
            if (preset.category !== 'INTERACTIVE_IMAGE') {
                $('#copyVPUrlClipboard').show();
                $('#copyVPEmbedClipboard').show();
                $(document).on("click", "#copyVPUrlClipboard", function (e) {
                    showClipboard("URL", productionUrl);
                });
                //if it is an interactive image, just show the embed button
            } else {
                $('#copyVPUrlClipboard').hide();
                $('#copyVPEmbedClipboard').show();
            }
            //get asset type
            var assetType = $('.foundation-content-path').data('s7type');

            $.buildEmbedCode(
                uri,
                localAsset
            );
        } else {
        	$('.copy-buttons-container-presets').hide();
            $(".viewer-presets-container").removeClass("copybtnsviewers");
            $('#copyVPUrlClipboard').hide();
            $('#copyVPEmbedClipboard').hide();
        }

        var ts = new Date().getTime();//timestamp to fix cache issue
        var previewPreset = uri;
        //add cache=off to asset to bypass caching for preview except video
        var previewUrl = "";
        var extraParams = "";
        if (isS7RemoteAsset) { //For remote DMS7 case

        	if(preset.category === 'INTERACTIVE_VIDEO' || preset.category === 'INTERACTIVE_IMAGE' || preset.category === 'CAROUSEL_SET'){
        		previewUrl = Granite.HTTP.externalize('/mnt/overlay/dam/gui/content/s7dam/viewerpresets/interactivepreviewdms7.html/interactiveimage');
                	previewUrl += '?previewUrlDMS7=' +  previewPreset + '.embedcode.preview.html' + localAsset;
                	previewUrl += '&addtocart=true';
        	} else {
                	previewUrl = previewPreset + '.embedcode.preview.html' + localAsset;
                	if (preset.category === 'FLYOUT_ZOOM') {
        			previewUrl += (previewUrl.indexOf("?") == -1) ? "?" : "&";
            			previewUrl += 'stagesize=260,500';
                	}
        	}
        }
        else {
            //for DM case - we want cache=off
            previewPreset += "%3Fcache%3Doff";
            if (preset.category === 'VIDEO'
                || preset.category ==='MIXED_MEDIA'
                || preset.category === 'INTERACTIVE_VIDEO'
				|| preset.category === 'VIDEO_360'
                || preset.category === 'SMART_CROP_VIDEO') {
                var atype = $('.viewer-preset-data').data('s7type');
                extraParams = '&videoserverurl=' + previewVideoServerUrl;
                if (preset.category === 'INTERACTIVE_VIDEO') {
                    var vttPath = $('.viewer-preset-data').data('vtt');
                    var tenant = $('.viewer-preset-data').data('tenant');
                    var swatchMembersAreProducts = $('.viewer-preset-data').data("swatchMembersAreProducts");
                    if (vttPath != '') {
                        var contextpath = $('.viewer-preset-data').data('customcontextpath');
                        extraParams += '&interactivedata=' + vttPath +
                            "&VideoPlayer.contenturl=" + contextpath + "/is/content";
                        if (!(tenant === '' && swatchMembersAreProducts)) {
                            extraParams += "&preview=1";
                        } // else: Use commerce quickview as the custom QV when its AEM and all swatches are product
                    }
                }
                //TODO: this is workaround to force progressive playback for non-AVS video for 6.0
                if (atype.toUpperCase() === 'VIDEO') {
                    extraParams += '&playback=native';
                }
                 //force posterimage to use full asset path
                if (preset.category === 'VIDEO') {
                    extraParams += '&posterimage=' + encodeAsset(settings.asset);
                }
                previewUrl = $.buildURL(preset.platform,
                    preset.category,
                    previewPreset,
                    settings.asset,
                    '',
                    'ts=' + ts + extraParams,
                    settings.s7viewerpath,
                    true, null, isCustom);
            }
            else if (preset.category === 'INTERACTIVE_IMAGE' || preset.category === 'CAROUSEL_SET') {
                var isMembersAreProducts = $('.viewer-preset-data').data("swatchMembersAreProducts");
                var tenant = $('.viewer-preset-data').data('tenant');
                if (!(tenant === '' && isMembersAreProducts)) {
                    extraParams += "&preview=1";
                }
                previewUrl = $.buildURL(preset.platform,
                    preset.category,
                    previewPreset,
                    settings.asset,
                    '',
                    'ts=' + ts + extraParams,
                    settings.s7viewerpath,
                    true, null, isCustom);
            }
            else {
                previewUrl = $.buildURL(preset.platform,
                    preset.category,
                    previewPreset,
                    settings.asset,
                    '',
                    'ts=' + ts,
                    settings.s7viewerpath,
                    true, null, isCustom);
            }
        }

        $('.foundation-collection-item').not(val).removeClass('viewer-preset-active').removeAttr("tabindex");
        $('.foundation-collection-item > td').attr("aria-selected", "false");
        $(val).addClass("viewer-preset-active").attr("tabindex", "0");
        $('.foundation-collection-item').not(val)[0].selected = false;
        $(val)[0].selected = true;
        $(val).find('td').attr("aria-selected", "true");
        // Shift focus to tr in case of space and enter key strokes while accessing table using arrow keys
		$(val).focus();

        $.showPreview(previewUrl);
    };

    $.buildEmbedCode = function(preset, asset){

        //todo:how to handle this correctly? we need the JCR path for this asset
        var embedCode = ".embedcode.publish.text";
        embedCode = preset + embedCode + asset;
        var servletURL = embedCode;

        $.get(servletURL)
            .always( function(response){
                $('#copyVPEmbedClipboard').show();
                $(document).on("click", "#copyVPEmbedClipboard", function (e) {
                    showClipboard("Embed Code", decodeEmbedCode(response));
                });
            });
    };

    $.buildURL = function(platformType, viewerType, preset, asset, serverURL, modifiers, viewerPath, isPreview, publishrootpath, isCustom){
        var s7viewerType = $.PLATFORM_TO_VIEWERTYPE[platformType];
        if(s7viewerType === 'flash'){
            viewerType = 'as3';
        }
        var s7templateType = $.VIEWERTYPE_TO_TEMPLATETYPE[viewerType];
        var previewPath = $.PREVIEWPATH[s7viewerType];
        if ( previewPath ){
            previewPath = previewPath[s7templateType];
        }
        if (previewPath) {
            //To distinguish between preview URL and copy URL
            //TODO: publish instance to use the same viewers from preview
            if (isPreview) {
                var tenant = $('.viewer-preset-data').data('tenant');
                var swatchMembersAreProducts = $('.viewer-preset-data').data("swatchMembersAreProducts");
                if (tenant === '' && swatchMembersAreProducts) {
                    if(viewerType === 'INTERACTIVE_VIDEO'){
                        // To use commerce quickview as the custom QV when its AEM
                        previewPath = $.INTERACTIVEPREVIEWPATH;

                    }
                    else if(viewerType === 'INTERACTIVE_IMAGE'){
                        previewPath = Granite.HTTP.externalize('/mnt/overlay/dam/gui/content/s7dam/viewerpresets/interactivepreview.html/interactiveimage');
                    }
                    else if(viewerType === 'CAROUSEL_SET') {
                        previewPath = Granite.HTTP.externalize('/mnt/overlay/dam/gui/content/s7dam/viewerpresets/interactivepreview.html/carousel');
                    }
                    else {
                        previewPath = viewerPath + previewPath;
                    }
                }
                else {
                    previewPath = viewerPath + previewPath;
                }
            }
            else if (publishrootpath) {
                if (publishrootpath.lastIndexOf('/') === publishrootpath.length - 1) {
                    //remove extra trailing /
                    publishrootpath = publishrootpath.substring(0, publishrootpath.length - 1);
                }
                previewPath = publishrootpath + viewerPath + previewPath;
            }
            else {
                if (serverURL.lastIndexOf('/') === serverURL.length - 1) {
                    //remove extra trailing /
                    serverURL = serverURL.substring(0, serverURL.length - 1);
                }
                previewPath = serverURL + viewerPath + previewPath;
            }

            var modAsset = asset;
            if (isPreview) {
                modAsset += '%3Fcache%3Doff';
            }
            previewPath += '?asset=' + modAsset;
            previewPath += '&config=' + preset;
            // use dynamic path if present
            if(isPreview) {
                previewPath += '&serverUrl=' + encodeURIComponent(Granite.HTTP.externalize('/is/image/'));
            }
            else {
                previewPath += '&serverUrl=' + encodeURIComponent(serverURL);
            }

            if (!isPreview) {
                // for custom presets, point to delivery;
                //  for OOTB presets, point to publish node
                if (isCustom) {
                    previewPath += '&contenturl=' + encodeURIComponent(serverURL.replace('/is/image/', '/is/content'));
                } else {
                    previewPath += '&contenturl=' + encodeURIComponent(Granite.HTTP.externalize('/'));
                }
            }
            else {
                if (isCustom) {
                    previewPath += '&contenturl=' + encodeURIComponent(Granite.HTTP.externalize('/'));
                    //TODO temporary fix for 0dt refactor until embed IS handle static asset correctly
                    //previewPath += '&contenturl=' + encodeURIComponent(Granite.HTTP.externalize('/is/content'));
                } else {
                    previewPath += '&contenturl=' + encodeURIComponent(Granite.HTTP.externalize('/'));
                }
            }

            if (isPreview && viewerType === 'FLYOUT_ZOOM') {
                previewPath += '&stagesize=260,500';
            }

            var previewVideoServerUrl = $('.viewer-preset-data').data('s7preview-videoserverurl');
            if (previewVideoServerUrl) {
                previewPath += '&videoServerUrl=' + encodeURIComponent(previewVideoServerUrl);
            }

            if (modifiers) {
                // parse concatenated modifiers and encode only posterimage
                var mods = modifiers.split('&');
                for (var modIdx = 0; modIdx < mods.length; modIdx++) {
                    previewPath += '&';
                    var parts = mods[modIdx].split('=');
                    if (parts.length == 2 && parts[0] === "posterimage") {
                        previewPath += parts[0] + '=' + encodeURIComponent(parts[1]).replace(/%2F/g, '/');
                    } else {
                        previewPath += mods[modIdx];
                    }
                }
            }
        }
        return previewPath;
    };

    $.showPreview = function(url) {

    	var containers = [
    		'.dm-set-preview-wrapper',
    		'.rendition-detail',
    		'.foundation-content-current',
    		'.foundation-layout-panel-content'
    		];

    	function findSize(sz) {
    		var res = {};
    		for(var i in containers) {
    			var cur = $(containers[i]);
    			res.wid = cur.width();
    			res.hei = cur.height();
    			if(!res.wid || !res.hei) {
    				continue;
    			}
    			return res;
    		}

    		return sz;
    	}

        // CQ-55549: Fix for regression. No longer consider ".foundation-collection-container" for container
    	var container = $('.dm-setup-info'); //single asset preview page
        var canvas = $('.dam-dynamic-rendition-canvas');

        //https://jira.corp.adobe.com/browse/CQ-4238499
        //DIV is blocking interaction with viewer
        var renditionPreview = $("#rendition-preview.dam-image-preview");
        if (renditionPreview.length > 0){
            renditionPreview.hide();
        }


        //ignore the info component div for setmember page as workaround for page layout issue
        if (container.length == 0 || container.attr('id') == 'setmember') {
            container = $('.dm-set-preview-wrapper'); //set preview page
            if (container.length == 0) {
                container = $('.rendition-detail');//set member page
                if (container.length == 0) {
                    container = $('.foundation-content-current');
                    if (container.length == 0) {
                        container = $('.foundation-layout-panel-content');
                        if(container.length != 0) {
                            container.css('overflow', 'hidden');
                        }
                    }
                }
            }
        }
        if (container.length > 0) {
            //Embedded iframe for preview
            var sz = { "wid" : container.width(), "hei" : container.height()};
            if(canvas.length != 0) {
            	sz = { "wid" : canvas.width(), "hei" : canvas.height()};
                canvas.parent().remove();
	        }

        	if(sz.wid == 0 || sz.hei == 0) {
        		sz = findSize(sz);
        	}

        	canvas = $('.rendition-canvas');
        	if(canvas.length != 0) {
        		canvas.remove();
        	}

            var ifram = '<iframe src=\"' + url + '\" frameborder="0" allowfullscreen width="'
                + sz.wid + '" height="' + sz.hei + '" title="'+ Granite.I18n.get("Asset viewer") +'" style="max-width:100%; max-height:100%; min-width:100%; min-height:100%"></iframe>';
            $('.asset-detail-view').hide(); //hide main preview for single asset
            $("#preview-container").show();
            var curViewer = ($('#s7preview').length != 0 ? $('#s7preview') : $('#image-preview')).data('s7viewer');
            if(curViewer && !curViewer.isDisposed) {
            	if(typeof(curViewer.dispose) == 'function') {
            		curViewer.dispose();
            	}
            }
            $('#s7preview').html('');
            $('#image-preview').html('');
            container.html(ifram);
        }
        else {
            //If the container doesnt exist, we pop up a preview window in the middle of the screen.
            var sw = Math.floor($(document).width() * 0.5),
                sh = Math.floor($(document).height() * 0.5),
                wtop = Math.floor($(document).height() * 0.25),
                wleft = Math.floor($(document).width() * 0.25);
            var winFeatures = 'resizable=yes, scrollbars=yes, titlebar=yes, toolbar=no, height='
                + sh + ', width=' + sw + ',top=' + wtop + ',left=' + wleft;
            var previewWin = window.open(url, '_blank', winFeatures);
        }
    }

    function showClipboard(heading, message) {
        // update dialog title
        $("coral-dialog-header").text(decodeURI(heading));

        var $messageClipboard = $('#messageClipboard');
        var $message = $messageClipboard.find(".message");
        if (heading.indexOf('Embed') != -1) {
            $message.val($.trim(message));
        }
        else {
            $message.val(decodeURI($.trim(message)));
        }

        // show dialog in order to correctly determine scroll height of text area
        $(document.querySelector('#messageClipboard')).show();

        var msgScrH = $message[0].scrollHeight;
        var foundationH = $('.foundation-layout-panel-content').height();
        if (msgScrH > parseInt(foundationH - 300)) {
            msgScrH = parseInt(foundationH - 300);
        }
        $message.height(msgScrH);

        // show dialog after adjusting height
        document.querySelector('#messageClipboard').show();
    }

    //Check that all quickview sku are commerce assets
    var commerceChecker = {
        containAllValidProd: function(json){
            var assets = json.assets;
            var prods = this.getProdList(assets);
            var allValid = true;
            for (var i = 0; i < prods.length; i++){
                allValid = allValid && this.isValidProduct(prods[i]);
            }
            return allValid;
        },
        getProdList: function(assets) {
            var prods = [];
            for (var i = 0; i < assets.length; i++) {
                var asset = assets[i];
                var maps = asset.maps;
                for (var j = 0; j < maps.length; j++) {
                    var url = maps[j]['url'];
                    //extract only quickview url as product
                    if ( this.isProduct(url) ) {
                        prods.push(url);
                    }
                }
            }
            return prods;
        },
        isProduct: function(url){
            return (url.indexOf('quickview:sku') == 0);
        },
        isValidProduct: function(url){
            return (url.indexOf('reservedVal_productThumbnail') >= 0
                && url.indexOf('reservedVal_productPath') >= 0 );
        }
    }

    //Workaround for decoding until we migrate embed code to proper servlet - TODO
    function decodeEmbedCode(res){
        var REGEX = [ ['&lt;', '<'],
            ['&gt;', '>'],
            ['&#34;', '\"']];
        var decodedStr = res;
        for (var i=0; i < REGEX.length; i++) {
            var regex = new RegExp(REGEX[i][0],'g');
            decodedStr = decodedStr.replace(regex, REGEX[i][1]);
        }
        return decodedStr;
    }

    function updatePublishStatus() {
        var url = $(".foundation-content-path").data("foundationContentPath") + "/jcr:content.json";

        $.ajax({
            url: url,
            async: false,
            cache: false
        }).done(function(data, textStatus, jqXHR) {
            var REPLICATE_ACTION = "cq:lastReplicationAction";
            var publishStatus = data.hasOwnProperty(REPLICATE_ACTION) ? data[REPLICATE_ACTION] : "";

            $('.viewer-preset-data').data("ispublished", publishStatus === "Activate");
        })
    }


})(document, Granite.$);
