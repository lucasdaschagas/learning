<%--
ADOBE CONFIDENTIAL
__________________

 Copyright 2013 Adobe Systems Incorporated
 All Rights Reserved.

NOTICE:  All information contained herein is, and remains
the property of Adobe Systems Incorporated and its suppliers,
if any.  The intellectual and technical concepts contained
herein are proprietary to Adobe Systems Incorporated and its
suppliers and are protected by trade secret or copyright law.
Dissemination of this information or reproduction of this material
is strictly forbidden unless prior written permission is obtained
from Adobe Systems Incorporated.
--%>
<%@page session="false"%>
<%@page import="java.util.Iterator,
                java.util.List,
                java.util.LinkedList,
                java.util.regex.Pattern,
                java.util.regex.Matcher,
                org.apache.sling.api.resource.Resource,
                org.apache.sling.api.resource.ResourceUtil,
                org.apache.sling.api.resource.ValueMap,
                com.adobe.granite.maintenance.MaintenanceTaskManager,
                java.lang.management.ManagementFactory" %>
<%@include file="/libs/granite/ui/global.jsp" %>
<%@include file="/libs/granite/operations/components/healthreports/commons/commons.jsp"%>
<%!
    static final Pattern MARKDOWN_LINK_PATTERN = Pattern.compile(".*\\[(.+)\\]\\s*\\((.+)\\).*");

    static final String CRITICAL = "CRITICAL"; // GRANITE-5127, i18n.get("CRITICAL"), workaround to get this string extracted for translation, without changing code

    static final String HEALTH_CHECK_ERROR = "HEALTH_CHECK_ERROR"; // GRANITE-5127, i18n.get("HEALTH_CHECK_ERROR")

    static final String ERROR = "error"; // GRANITE-5127, i18n.get("error")

    static final String WARN = "WARN"; // GRANITE-5127, i18n.get("WARN")

    static final String NOTICE = "notice"; // GRANITE-5127, i18n.get("notice")

    static final String DEBUG = "DEBUG"; // GRANITE-5127, i18n.get("DEBUG")

    static final String INFO = "info"; // GRANITE-5127, i18n.get("info")

    static final String HELP = "help"; // GRANITE-5127, i18n.get("help")

    // GRANITE-11300 workaround
    /*
        { i18n.get("Checking cluster internal clocks"),
            i18n.get("Intra-cluster test n/a (No DocumentNodeStore MBean found)"),
            i18n.get("No topology connectors connected to local instance.")
        }
     */

    // GRANITE-11320 workaround
    /*
        { i18n.get("Maintenance Task RevisionCleanupTask"),
        i18n.get("Maintenance Task WorkflowPurgeTask"),
        i18n.get("Maintenance task with name 'RevisionCleanupTask' has never run."),
        i18n.get("Maintenance task with name 'WorkflowPurgeTask' has never run.") }
     */

    // GRANITE-11326 workaround
        /*
        { i18n.get("DavEx Health Check"),
            i18n.get("Sling Get Servlet"),
            i18n.get("Sling Get Servlet"),
            i18n.get("WebDAV Health Check"),
            i18n.get("You can disable the CRX Development Bundles in the administration console."),
            i18n.get("The com.adobe.granite.crx-explorer bundle is active."),
            i18n.get("The com.adobe.granite.crxde-lite bundle is active."),
            i18n.get("The default XML renderer is enabled."),
            i18n.get("Sling Get Servlet"),
            i18n.get("You can change the transport user by editing the agent settings in the Replication page."),
            i18n.get("Replication agents should not use the default 'admin' as a transport user."),
            i18n.get("Transport user is admin for replication agent [Default Agent]."),
            i18n.get("Transport user is admin for replication agent [Reverse Replication Agent]."),
            i18n.get("The Sling Java Script Handler generates debug information. The system might be exposed if used as a publish environment."),
            i18n.get("The Sling JSP Script Handler generates debug information. The system might be exposed if used as a publish environment."),
            i18n.get("The Sling JSP Script Handler generates mapped content. The system might be exposed if used as a publish environment."),
            i18n.get("The Sling Referrer Filter does not allow empty or missing referrers. This improves protection against CSRF attacks.")
         }
     */

    // GRANITE-11327 workaround
        /*
        { i18n.get("The in-memory query limit ( 2147483647 ) is greater than or equal to Integer.MAX_VALUE ( 2147483647 )."),
            i18n.get("The query read limit ( 2147483647 ) is greater than or equal to Integer.MAX_VALUE ( 2147483647 ).")
        }
     */

    //GRANITE-5745 - workaround to get the hint messages translated without changing all the healthcheck classes
    /* { i18n.get("See Disable CRXDE Support in the security guidelines."),
            i18n.get("Code Cache Health Check"),
            i18n.get("Check Issues with Cross-Site Request Forgery in the security guidelines"),
            i18n.get("Check Disable WebDAV in the security guidelines."),
            i18n.get("Check section \"Default Access to User Profile(s) is everyone\" in the security guidelines."),
            i18n.get("Check Configuring Sling to prevent DoS in the security guidelines."),
            i18n.get("Check OSGI Settings in the security guidelines."),
            i18n.get("See the Log Messages page in the Diagnosis section."),
            i18n.get("Check the Production-Ready documentation."),
            i18n.get("Check the Query Performance Diagnosis page."),
            i18n.get("Check the Configure replication and transport users security guideline."),
            i18n.get("See Changing the OSGI web console admin password in the security guideline."),
            i18n.get("See Changing the CQ admin password in the security guidelines."),
            i18n.get("Check the Request Performance Diagnosis page."),
            i18n.get("You have bundles which are not active. Check them in the web console."),
            i18n.get("Click here to inspect the queue for configured replication agents"),
            i18n.get("Jump to Diagnosis page and see replication specific log entries"),
            i18n.get("Check section \"Default Access to User Profile(s) is everyone\" in the security guidelines."),
            i18n.get("Check the maintenance tasks page in the Operations Dashboard."),
            i18n.get("Check {0} in the Maintenance section of the Operations Dashboard.", "0 is the name of the maintenance task"),
            i18n.get("Check the Clickjacking security guidelines."),
            i18n.get("Check Restrict Access via the Dispatcher in the security guidelines."),
            i18n.get("Check Configuring the Dispatcher to prevent DoS in the security guidelines."),
            i18n.get("See Remove example content in the security guidelines."),
            i18n.get("Deserialization Firewall Attach API Readiness"),
            i18n.get("Deserialization Firewall Functional"),
            i18n.get("Deserialization Firewall Loaded")};*/

    /* marking goURLs for i18n: GRANITE-11454
        i18n.get("https://www.adobe.com/go/aem6_5_docs_security_crxde_en")
        i18n.get("https://www.adobe.com/go/aem6_5_docs_security_webdav_en")
        i18n.get("https://www.adobe.com/go/aem6_5_docs_security_slingdos_en")
        i18n.get("https://www.adobe.com/go/aem6_5_docs_security_osgi_en")
        i18n.get("https://www.adobe.com/go/aem6_5_docs_security_siteforgery_en")
        i18n.get("https://www.adobe.com/go/aem6_5_docs_security_replication_en")
        i18n.get("https://www.adobe.com/go/aem6_5_docs_security_userprofile_en")
        i18n.get("https://www.adobe.com/go/aem6_5_docs_security_adminpass_en")
        i18n.get("https://www.adobe.com/go/aem6_5_docs_security_osgipass_en")
        i18n.get("https://www.adobe.com/go/aem6_5_docs_security_osgi_en")
        i18n.get("https://www.adobe.com/go/aem6_5_docs_security_click_en")
        i18n.get("https://docs.adobe.com/go/aem6_5_docs_introsling_en")
        i18n.get("https://www.adobe.com/go/aem6_5_docs_security_example_en")
        i18n.get("https://www.adobe.com/go/aem6_5_docs_security_dos_en")
        i18n.get("https://www.adobe.com/go/aem6_5_docs_security_access_en")
        i18n.get("https://www.adobe.com/go/aem6_5_docs_security_osgi_en")
     */

    /* Translation strings for Code Cache HC
        i18n.get("This Java version needs no further Code Cache configurations.")
        i18n.get("Code Cache")
        i18n.get("You are using Java 7, so you may need to change the Code Cache configuration to avoid Java bug #8012547.")
        i18n.get("It's recommended to disable Code Cache flushing for this JVM version.")
        i18n.get("You can disable Code Cache flushing by using the -XX:-UseCodeCacheFlushing argument at startup.")
        i18n.get("Code Cache flushing is disabled, as recommended.")
        i18n.get("The reserved Code Cache Size should be increased.")
        i18n.get("You can increase the reserved Code Cache Size by using the following JVM argument: -XX:ReservedCodeCacheSize=90M.")
     *
     */
%>

<div class="panelWithMargin">
    <%
        String suffix = slingRequest.getRequestPathInfo().getSuffix();
        final String contextPath = request.getContextPath();

        if(suffix != null && suffix.trim().length() > 0) {
            Resource hcResource = resourceResolver.getResource(suffix);
            ValueMap properties = ResourceUtil.getValueMap(hcResource);

            String status = properties.get(HEALTHCHECK_STATUS, "Status currently not available");

            String name = properties.get(HEALTHCHECK_NAME, "");

            final ConfigurationAdmin cfgAdmin = sling.getService(ConfigurationAdmin.class);
            final MaintenanceTaskManager maintenanceTaskManager = sling.getService(MaintenanceTaskManager.class);
            final MBeanServerConnection server = ManagementFactory.getPlatformMBeanServer();
            //get the pid for configuration
            String pid = getHealthCheckConfigurationPid(sling, cfgAdmin, server,  maintenanceTaskManager, hcResource.getName());
    %>
       <input type="hidden" id="healthCheckPid" value="<%= xssAPI.encodeForHTMLAttr(pid)%>"/>
        <%
            //get the hints and display them at the top of the page
            final List<String[]> hints = new LinkedList<String[]>();

            Resource logResource = hcResource.getChild("mbean:attributes/log/mbean:value");
            Iterator<Resource> logIterator = logResource.listChildren();

            Resource logEntry, messageResource;
            String message;
            Matcher markdownLinkMatcher;

            while (logIterator.hasNext()) {
                logEntry = logIterator.next();
                messageResource = logEntry.getChild("mbean:attributes/message");
                properties = ResourceUtil.getValueMap(messageResource);

                message = properties.get("mbean:value", "Log entry message not available");

                markdownLinkMatcher = MARKDOWN_LINK_PATTERN.matcher(message);
                if (markdownLinkMatcher.matches()) {
                    String text = markdownLinkMatcher.group(1);
                    String link = markdownLinkMatcher.group(2);

                    if(message.indexOf("[") > 0) {
                        //the hints which contain specific maintenance tasks contain the task name before the []() sequence.
                        // The task name was separated from the message to allow translations
                        String target = message.substring(0, message.indexOf("["));
                        if(target != null && target.trim().length() > 0){
                            text = i18n.getVar(text, "0 is the name of the maintenance task", target);
                        } else {
                            text = i18n.getVar(text);
                        }
                    }
                    hints.add(new String[]{ text, link });
                }
            }

            for (String[] hint : hints) {
                boolean validLink = hint[1] != null && hint[1].trim().length() > 0;

                String headerText, alertType;
                String contentText = xssAPI.encodeForHTML(i18n.getVar( hint[0] ));

                if(validLink) {
                    headerText = i18n.get("HINT");
                    alertType = "help";
                } else {
                    headerText = i18n.get("INFO");
                    alertType = "success";
                }
        %>
        <coral-alert variant="<%= alertType %>" class="alertFill">
            <coral-alert-header> <%= headerText %> </coral-alert-header>
            <% if(validLink) {
                String hintLink = xssAPI.getValidHref(hint[1]);

                // if it's a relative path we need to add the context
                if(hintLink.startsWith("/")) {
                    hintLink = contextPath + hintLink;
                } else {
                    // otherwise it's a goURL and it needs to be translated
                    hintLink = xssAPI.getValidHref(i18n.getVar(hint[1]));
                }
            %>
                <coral-alert-content>
                    <a href="<%= hintLink %>" x-cq-linkchecker="skip">
                        <%= contentText %>
                    </a>
                </coral-alert-content>
            <% } else {
            %>
                <coral-alert-content>
                    <%= contentText %>
                </coral-alert-content>
            <%
                }
            %>
        </coral-alert>
        <%
        }

        //for health checks other than Log Errors, show a table with the execution logs of the HC
        if(!name.equals("Log Errors")) {
        %>
        <table is="coral-table" class="foundation-layout-util-maximized-alt panelWithMarginTop">
            <colgroup>
                <col is="coral-table-column">
                <col is="coral-table-column">
            </colgroup>
            <thead is="coral-table-head">
            <tr is="coral-table-row">
                <th is="coral-table-headercell">
                    <%=i18n.get("Status") %>:
                        <span class="<%= xssAPI.encodeForHTMLAttr(status.toLowerCase()) %>">
                            <%= xssAPI.encodeForHTML(i18n.getVar(status.toUpperCase())) %>
                        </span>
                </th>
                <th is="coral-table-headercell">
                    <%=i18n.get("Message") %>
                </th>
            </tr>
            </thead>
            <tbody is="coral-table-body">
            <%
                // iterate through the log messages again to select the entries that are not hints
                Iterator<Resource> logData = logResource.listChildren();

                while (logData.hasNext()) {
                    logEntry = logData.next();

                    messageResource = logEntry.getChild("mbean:attributes/message");
                    properties = ResourceUtil.getValueMap(messageResource);
                    message = properties.get("mbean:value", "Log entry message not available");
                    if (message.startsWith("Running legacy HC")) { // avoid legacy message in end user UI
                    	continue;
                    }

                    markdownLinkMatcher = MARKDOWN_LINK_PATTERN.matcher(message);
                    if (!markdownLinkMatcher.matches()) {
                        Resource levelResource = logEntry.getChild("mbean:attributes/level");
                        properties = ResourceUtil.getValueMap(levelResource);
                        String level = properties.get("mbean:value", HELP);
            %>
            <tr is="coral-table-row">
                <td is="coral-table-cell" width="200px">
                    <span class="<%= xssAPI.encodeForHTMLAttr(level).toLowerCase() %>">[<%= xssAPI.encodeForHTML(i18n.getVar(level)) %>]
                    </span>
                </td>
                <td is="coral-table-cell">
                    <%= xssAPI.encodeForHTML(i18n.getVar(message)) %>
                </td>
            </tr>
            <%
                    }
                }

            %>
            </tbody>
        </table>
        <%
            //for the log error HC, include the log error table directly to improve usability
        } else {
            %>
                <sling:include path="/libs/granite/operations/content/healthreports/logerrorreport"/>
            <%
            }
        %>
    </div>
<%
    } else {
%>
    <coral-alert variant="error">
        <coral-alert-header><%=i18n.get("ERROR") %></coral-alert-header>
        <coral-alert-content>
            <%= i18n.get("You need to select a health report.") %>
        </coral-alert-content>
    </coral-alert>
<%
    }
%>