/*
 * Copyright 1997-2008 Day Management AG
 * Barfuesserplatz 6, 4001 Basel, Switzerland
 * All Rights Reserved.
 *
 * This software is the confidential and proprietary information of
 * Day Management AG, ("Confidential Information"). You shall not
 * disclose such Confidential Information and shall use it only in
 * accordance with the terms of the license agreement you entered into
 * with Day.
 */

/**
 * @private
 * @class CQ.DialogEditor.TreeNode
 * @extends CQ.Ext.tree.TreeNode
 * Base class for dialog editor tree nodes.
 */
CQ.DialogEditor.TreeNode = CQ.Ext.extend(CQ.Ext.tree.TreeNode, {
    afterPropChange: function() {
        this.updatePreview();
    },
    
    getEditor: function() {
        return this.attributes.editor;
    },
    
    getEventRecord: function(event) {
        return event.data.records[0];
    },
    
    getCategory: function() {
        return this.attributes.category;
    },
    
    getContextMenuActions: function() {
        return null;
    },
        
    getWidgetConfig: function() {
        return this.attributes.widget;
    },
    
    setWidgetConfig: function(data) {
        this.attributes.widget = data;
    },
    
    isInsertAllowed: function(event) {
        return false;
    },
    
    isReorderAllowed: function(event) {
        return false;
    },
    
    handleDrop: function(event) {
        this.updatePreview();
    },
    
    handleReorder: function(event) {
        this.updatePreview();
    },
    
    updatePreview: function() {
        this.getEditor().updatePreview();
    },
    
    setText: function(text) {
        if (text) {
            CQ.DialogEditor.TreeNode.superclass.setText.call(this, text);
        } else {
            var xtype = CQ.DialogEditor.getXType(this.getWidgetConfig());
            var text = CQ.DialogEditor.MAPPINGS[xtype].text;
            CQ.DialogEditor.TreeNode.superclass.setText.call(this, text);
        }
    },
    
    setProperties: function(props) {
        for (var p in props) {
            if (props[p] == "") {
                delete props[p];
            }
        }
        this.setWidgetConfig(props);
    },
    
    getProperties: function() {
        var xtype = CQ.DialogEditor.getXType(this.getWidgetConfig());
        return CQ.Ext.applyIf(this.getWidgetConfig(), 
                CQ.DialogEditor.MAPPINGS[xtype].propList);
    },
    
    getPropertyEditors: function() {
        return {
            "jcr:primaryType":new CQ.Ext.grid.GridEditor(new CQ.Ext.form.Hidden({})),  //TODO should not be displayed in grid
            xtype:new CQ.Ext.grid.GridEditor(new CQ.Ext.form.Hidden({})),  //TODO should not be displayed in grid
            
            height:new CQ.Ext.grid.GridEditor(new CQ.Ext.form.NumberField({
                allowNegative:false
            })),
            width:new CQ.Ext.grid.GridEditor(new CQ.Ext.form.NumberField({
                allowNegative:false
            })),
            minLength:new CQ.Ext.grid.GridEditor(new CQ.Ext.form.NumberField({
                allowNegative:false
            })),
            maxLength:new CQ.Ext.grid.GridEditor(new CQ.Ext.form.NumberField({
                allowNegative:false
            })),
            validationDelay:new CQ.Ext.grid.GridEditor(new CQ.Ext.form.NumberField({
                allowNegative:false
            })),
            layout:new CQ.Ext.grid.GridEditor(new CQ.Ext.form.ComboBox({
                triggerAction:"all", selectOnFocus:true,
                store:[ "form", "border", "fit" ]
            })),
            inputType:new CQ.Ext.grid.GridEditor(new CQ.Ext.form.ComboBox({
                triggerAction:"all", selectOnFocus:true, editable:false,
                store:[ "text", "password", "file" ]
            })),
            hideMode:new CQ.Ext.grid.GridEditor(new CQ.Ext.form.ComboBox({
                triggerAction:"all", selectOnFocus:true, editable:false,
                store:[ "display", "offests", "visibility" ]
            })),
            msgTarget:new CQ.Ext.grid.GridEditor(new CQ.Ext.form.ComboBox({
                triggerAction:"all", selectOnFocus:true,
                store:[ "qtip", "title", "under", "side" ]
            }))
        };
    },
    
    containsObjects: function(obj) {
        for (var o in obj) {
            if (typeof(obj[o]) == "object") {
                return true;
            }
        }
        return false;
    },
    
    // private
    getPropertyIndex: function(obj, prop) {
        var index = 0;
        for (var i in obj) {
            if (prop == obj[i]) {
                break;
            }
            index++;
        }
        return index;
    },
    
    //private
    insertProperty: function(obj, name, value, index) {
        var result = {};
        var count = 0;
        var added = false;
        for (var o in obj) {
            if (count == index) {
                result[name] = value;
                added = true;
            }
            result[o] = obj[o];
            count++;
        }
        if (!added) {
            result[name] = value;
        }
        return result;
    },
    
    // private
    removeProperty: function(obj, prop) {
        var removeObj = true;
        for (var i in obj) {
            if (typeof(obj[i]) != "object") continue;
                
            if (obj[i] == prop) {
                delete obj[i];
            } else {
                removeObj = false;
            }
        }
        if (removeObj) {
            delete obj;
        }
    }
});

/**
 * @private
 * @class CQ.DialogEditor.ContainerTreeNode
 * @extends CQ.DialogEditor.TreeNode
 */ 
CQ.DialogEditor.ContainerTreeNode = CQ.Ext.extend(CQ.DialogEditor.TreeNode, {
    isInsertAllowed: function(event) {
        var record = this.getEventRecord(event);
        var xtype = record.get("insertCfg").xtype;
        if (event.point == "append") {
            return this.isDropAllowed(xtype);
        } else {
            return (this.parentNode instanceof CQ.DialogEditor.ContainerTreeNode) ? 
                    this.parentNode.isDropAllowed(xtype) : false;
        }
    },
    
    isReorderAllowed: function(event) {
        var xtype = CQ.DialogEditor.getXType(event.dropNode.getWidgetConfig());
        if (event.point == "append") {
            return this.isDropAllowed(xtype);
        } else {
            return (this.parentNode instanceof CQ.DialogEditor.ContainerTreeNode) ? 
                    this.parentNode.isDropAllowed(xtype) : false;
        }
    },
    
    isDropAllowed: function(type) {
        var dropAllowed = false;
        if (this.attributes.allowedChilds) {
            for (var i=0; i<this.attributes.allowedChilds.length; i++) {
                if (this.attributes.allowedChilds[i] == type) {
                    dropAllowed = true;
                    break;
                }
            }
        } else {
            dropAllowed = true;
        }        
        return dropAllowed;
    },
    
    handleDrop: function(event) {
        var record = this.getEventRecord(event);
        var config = CQ.Util.copyObject(record.get("insertCfg"));
        if (event.point == "append") {
            this.insert(config, event.point);
        } else {
            this.parentNode.insert(config, event.point, this);
        }
        CQ.DialogEditor.ContainerTreeNode.superclass.handleDrop.call(this);
    },
    
    handleReorder: function(event) {
        var oldParent = event.dropNode.parentNode.getWidgetConfig();
        var config = event.dropNode.getWidgetConfig();
        var refConfig = event.target.getWidgetConfig();
        
        var newParent;
        if (event.point == "append") {
            newParent = event.target.getWidgetConfig();
        } else {
            newParent = event.target.parentNode.getWidgetConfig();
        }
        this.reorder(config, refConfig, oldParent, newParent, event.point);
        CQ.DialogEditor.ContainerTreeNode.superclass.handleReorder.call(this);
    },
    
    reorder: function(config, refConfig, oldParent, newParent, point) {
        // remove widget config from parent config
        for (var i in oldParent.items) {
            if (oldParent.items[i] == config) {
                delete oldParent.items[i];
            }
        }
        // add widget config to new parent
        var name = this.getEditor().getNextPropName();
        if (point == "append") {
            if (!newParent.items) {
                // no items -> just add
                newParent.items = config;
            } else if (newParent.items[CQ.DialogEditor.JCR_PRIMARY_TYPE] == CQ.DialogEditor.NT_COLLECTION) {
                // items property is a widget collection
                newParent.items[name] = config;
            } else {
                // items prop is no widget collection -> convert to collection before adding new item
                var item = newParent.items;
                
                newParent.items = {};
                newParent.items[CQ.DialogEditor.JCR_PRIMARY_TYPE] = CQ.DialogEditor.NT_COLLECTION
                
                newParent.items[name] = item;
                newParent.items[this.getEditor().getNextPropName()] = config;
            }
        } else if (point == "above") {
            var index = this.getPropertyIndex(newParent.items, refConfig);
                        
            var newItems = this.insertProperty(newParent.items, name, config, index);
            newParent.items = newItems;
        } else if (point == "below") {
            var index = this.getPropertyIndex(newParent.items, refConfig) + 1;
            
            var newItems = this.insertProperty(newParent.items, name, config, index);
            newParent.items = newItems;
        }
    },
    
    remove: function(node) {
        this.removeProperty(this.getWidgetConfig().items, node.getWidgetConfig());
        
        if (this.getWidgetConfig().items[CQ.DialogEditor.JCR_PRIMARY_TYPE] != CQ.DialogEditor.NT_COLLECTION) {
            // items property is not a collection -> remove it
            delete this.getWidgetConfig().items;
        } else if (!this.containsObjects(this.getWidgetConfig().items)) {
            // items property is a collection but does not contain further objects -> remove it
            delete this.getWidgetConfig().items;
        }
        this.removeChild(node);
        this.updatePreview();
    },
        
    insert: function(config, point, refNode) {
        // create new node
        var propName = this.getEditor().getNextPropName();
        var node = CQ.DialogEditor.createDialogTreeNode(
                CQ.DialogEditor.MAPPINGS[config.xtype], propName, null, 
                this.getEditor());
        node.setWidgetConfig(config);
        
        // check insert point
        if (point == "append") {
            this.appendChild(node);
            
            if (!this.getWidgetConfig().items) {
                // no items -> just add
                this.getWidgetConfig().items = config;
            } else if (this.getWidgetConfig().items[CQ.DialogEditor.JCR_PRIMARY_TYPE] == CQ.DialogEditor.NT_COLLECTION) {
                // items property is a widget collection
                this.getWidgetConfig().items[propName] = config;
            } else {
                // items prop is no widget collection -> convert to collection before adding new item
                var item = this.getWidgetConfig().items;
                
                this.getWidgetConfig().items = {};
                this.getWidgetConfig().items[CQ.DialogEditor.JCR_PRIMARY_TYPE] = CQ.DialogEditor.NT_COLLECTION
                
                this.getWidgetConfig().items[propName] = item;
                this.getWidgetConfig().items[this.getEditor().getNextPropName()] = config;
            }
        } else if (point == "above") {
            this.insertBefore(node, refNode);

            // insert new property with index
            var index = this.getPropertyIndex(this.getWidgetConfig().items, 
                    refNode.getWidgetConfig());
            var newItems = this.insertProperty(this.getWidgetConfig().items, propName, config, index);
            this.getWidgetConfig().items = newItems;
        } else if (point == "below") {
            if (refNode.nextSibling) {
                this.insertBefore(node, refNode.nextSibling);

                // insert new property with index
                var index = this.getPropertyIndex(this.getWidgetConfig().items, 
                        refNode.getWidgetConfig()) + 1;
                var newItems = this.insertProperty(this.getWidgetConfig().items, propName, config, index);
                this.getWidgetConfig().items = newItems;
            } else {
                this.appendChild(node);
                this.getWidgetConfig().items[propName] = config;
            }
        }
        node.select();
        this.getEditor().props.showProperties(node);
    },
    
    getContextMenuActions: function() {
        if (CQ.DialogEditor.getXType(this.parentNode.getWidgetConfig()) == "dialog") {
            return [];
        }
        return [
            {
                text:CQ.I18n.getMessage("Remove"),
                handler:function() { this.parentNode.remove(this) },
                scope:this,
                tooltip:{
                    title:CQ.I18n.getMessage("Remove Container"),
                    text:CQ.I18n.getMessage("Removes the container widget from the dialog"),
                    autoHide:true
                }
            }
        ];
    },
    
    afterPropChange: function() {
        this.setText(this.getWidgetConfig().title);
        CQ.DialogEditor.ContainerTreeNode.superclass.updatePreview.call(this);
    }
});

/**
 * @private
 * @class CQ.DialogEditor.FieldTreeNode
 * @extends CQ.DialogEditor.TreeNode
 */ 
CQ.DialogEditor.FieldTreeNode = CQ.Ext.extend(CQ.DialogEditor.TreeNode, {
    isInsertAllowed: function(event) {
        var record = this.getEventRecord(event);
    
        var xtype; 
        if (record && record.get("insertCfg")) {
            xtype = record.get("insertCfg").xtype;
        } else {
            xtype = CQ.DialogEditor.getXType(event.dropNode.getWidgetConfig());
        }
        return (event.point != "append") && this.parentNode.isDropAllowed(xtype);
    },
    
    isReorderAllowed: function(event) {
        var xtype; 
        if (event.dropNode.attributes.insertCfg) {
            xtype = event.dropNode.attributes.insertCfg.xtype;
        } else {
            xtype = CQ.DialogEditor.getXType(event.dropNode.getWidgetConfig());
        }
        return (event.point != "append") && this.parentNode.isDropAllowed(xtype);
    },
    
    handleDrop: function(event) {
        var record = this.getEventRecord(event);
        var config = record.get("insertCfg");
        this.parentNode.insert(config, event.point, this);
        CQ.DialogEditor.FieldTreeNode.superclass.handleDrop.call(this);
    },
    
    handleReorder: function(event) {
        var oldParent = event.dropNode.parentNode.getWidgetConfig();
        var newParent = event.target.parentNode.getWidgetConfig();
        
        var config = event.dropNode.getWidgetConfig();
        var refConfig = event.target.getWidgetConfig();
        
        this.parentNode.reorder(config, refConfig, oldParent, newParent, event.point);
        CQ.DialogEditor.FieldTreeNode.superclass.handleReorder.call(this);
    },
    
    getContextMenuActions: function() {
        return [
            {
                text:CQ.I18n.getMessage("Remove"),
                handler:function() { this.parentNode.remove(this) },
                scope:this,
                tooltip:{
                    title:CQ.I18n.getMessage("Remove Field"),
                    text:CQ.I18n.getMessage("Removes the field from the dialog"),
                    autoHide:true
                }
            }
        ];
    },
    
    afterPropChange: function() {
        this.setText(this.getWidgetConfig().fieldLabel);
        CQ.DialogEditor.FieldTreeNode.superclass.updatePreview.call(this);
    }
});

/**
 * @private
 * @class CQ.DialogEditor.DialogTreeNode
 * @extends CQ.DialogEditor.TreeNode
 * Tree node for dialog instances. This is usually the root node of the structure tree.
 */
CQ.DialogEditor.DialogTreeNode = CQ.Ext.extend(CQ.DialogEditor.TreeNode, {
    afterPropChange: function() {
        this.setText(this.getWidgetConfig().title);
        CQ.DialogEditor.DialogTreeNode.superclass.updatePreview.call(this);
    },
    
    remove: function(node) {
        this.removeProperty(this.getWidgetConfig(), node.getWidgetConfig());
        this.removeChild(node);
        this.updatePreview();
    },
    
    isInsertAllowed: function(event) {
        var record = this.getEventRecord(event);
        if (record && record.get("text") 
                && (record.get("text") == CQ.I18n.getMessage("Buttons"))
                && (!this.getWidgetConfig().buttons)) {
            return true;
        }
        return false;
    },
    
    handleDrop: function(event) {
        var record = this.getEventRecord(event);
        this.getWidgetConfig().buttons = record.get("insertCfg");
        var btnsNode = new CQ.DialogEditor.ButtonsTreeNode({
            name:"buttons",
            text:CQ.I18n.getMessage("Buttons"),
            editor:this.getEditor()
        });
        btnsNode.setWidgetConfig(this.getWidgetConfig().buttons);
        this.appendChild(btnsNode);
        
        CQ.DialogEditor.DialogTreeNode.superclass.handleDrop.call(this);
    }
});

/**
 * @private
 * @class CQ.DialogEditor.ButtonsTreeNode
 * @extends CQ.DialogEditor.TreeNode
 * Root node for buttons.
 */
CQ.DialogEditor.ButtonsTreeNode = CQ.Ext.extend(CQ.DialogEditor.TreeNode, {
    isInsertAllowed: function(event) {
        var record = this.getEventRecord(event);
        if (record && (record.get("category") == CQ.DialogEditor.BUTTON)) {
            return true;
        }
        return false;
    },
    
    handleDrop: function(event) {
        if (!this.getWidgetConfig()) {
            this.setWidgetConfig({});
            this.getWidgetConfig()[CQ.DialogEditor.JCR_PRIMARY_TYPE] = 
                CQ.DialogEditor.NT_WIDGET_COLLECTION;
        }
        var record = this.getEventRecord(event);
        var config = CQ.Util.copyObject(record.get("insertCfg"));
        var name = this.getEditor().getNextPropName();
        this.getWidgetConfig()[name] = config;
        
        var newNode = CQ.DialogEditor.createButtonTreeNode(config.text, this.getEditor());
        newNode.setWidgetConfig(config);
        
        this.appendChild(newNode);
        CQ.DialogEditor.ButtonsTreeNode.superclass.handleDrop.call(this);
    },
    
    getContextMenuActions: function() {
        return [
            {
                text:CQ.I18n.getMessage("Remove"),
                handler:function() {
                    this.parentNode.remove(this) 
                },
                scope:this,
                tooltip:{
                    title:CQ.I18n.getMessage("Remove Buttons Container"),
                    text:CQ.I18n.getMessage("Removes the buttons container from the dialog"),
                    autoHide:true
                }
            }
        ];
    },
    
    remove: function(node) {
        this.removeProperty(this.getWidgetConfig(), node.getWidgetConfig());
        this.removeChild(node);
        this.updatePreview();
    }
});

/**
 * @private
 * @class CQ.DialogEditor.ButtonTreeNode
 * @extends CQ.DialogEditor.TreeNode
 * Tree node for a dialog button.
 */
CQ.DialogEditor.ButtonTreeNode = CQ.Ext.extend(CQ.DialogEditor.TreeNode, {
    afterPropChange: function() {
        this.setText.call(this, this.getWidgetConfig().text);
        CQ.DialogEditor.DialogTreeNode.superclass.updatePreview.call(this);
    },
    
    getProperties: function() {
        return CQ.Ext.applyIf(this.getWidgetConfig(), 
                CQ.DialogEditor.MAPPINGS["button"].propList);
    },
    
    getContextMenuActions: function() {
        return [
            {
                text:CQ.I18n.getMessage("Remove"),
                handler:function() { this.parentNode.remove(this) },
                scope:this,
                tooltip:{
                    title:CQ.I18n.getMessage("Remove Button"),
                    text:CQ.I18n.getMessage("Removes the button from the dialog"),
                    autoHide:true
                }
            }
        ];
    }
});

/**
 * Drag zone for controls palette.
 */
CQ.DialogEditor.DragZone = function(view, config){
    this.view = view;
    CQ.DialogEditor.DragZone.superclass.constructor.call(this, view.getEl(), config);
};

CQ.Ext.extend(CQ.DialogEditor.DragZone, CQ.Ext.dd.DragZone, {
    getDragData: function(e){
        var target = e.getTarget('.x-control');
        if (target) {
            var view = this.view;
            if (!view.isSelected(target)) {
                view.onClick(e);
            }
            var nodes = view.getSelectedNodes();
            var records = view.getSelectedRecords();
            var dragData = { 
                "nodes":nodes,
                "records":records
            };
            dragData.ddel = target;
            dragData.single = true;
            return dragData;
        }
        return false;
    },
    
    // the default action is to "highlight" after a bad drop
    // but since an image can't be highlighted, let's frame it 
    afterRepair: function() {
        for (var i = 0, len = this.dragData.nodes.length; i < len; i++) {
            CQ.Ext.fly(this.dragData.nodes[i]).frame('#8db2e3', 1);
        }
        this.dragging = false;    
    },
    
    // override the default repairXY with one offset for the margins and padding
    getRepairXY: function(e) {
        if (!this.dragData.multi) {
            var xy = CQ.Ext.Element.fly(this.dragData.ddel).getXY();
            xy[0] += 3;
            xy[1] += 3;
            return xy;
        }
        return false;
    }
});
