/**
 * ADOBE CONFIDENTIAL
 *
 * Copyright 2013 Adobe Systems Incorporated
 * All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
 *
 */

/**
 * @class CQ.scene7.S7SmartImage
 * @extends CQ.html5.form.SmartImage
 * <p>The S7SmartImage is an extension of the CQ.html5.form.SmartImage.</p>
 * It will offer image manipulation functionality similar to the CQ.html5.form.SmartImage, but applied onto S7 content
 * a suitable {@link #height} setting.</p>
 * @since 5.5, replaces {@link CQ.form.SmartImage}
 * @constructor
 * Creates a new S7SmartImage.
 * @param {Object} config The config object
 */
CQ.scene7.S7SmartImage = CQ.Ext.extend(CQ.html5.form.SmartImage, {

    // image width
    imageWidth: -1,

    // image height
    imageHeight: -1,

    // image crop
    imageCrop: "",

    // image preset
    imagePreset: "",

    // overriden image width
    processedWidth: -1,

    // overriden image height
    processedHeight: -1,

    // image format
    imageFormat: "",

    // jpeg quality
    jpegQuality: 85,

    // sharpening
    imageSharpening: "",

    // unsharp mask values
    umAmount: 0,
    umRadius: 0,
    umThreshold:0,

    // url modifiers
    urlModifiers: "",

    // default dimension used to request image from S7 for crop functionality
    cropDefaultDimension: 400,

    // request width and height for the crop tool
    cropReqWidth: 0,

    cropReqHeight: 0,

    assetType: "",

    isImageServerUrl: false,
    
    // before submit handler
    beforeSubmitHandler: function(component) {

    },

    /**
     * Performs translation of a dimension from a (0 - sourceMaxDim) space to (0 - destinationMaxDim) value
     *
     * @param sourceMaxDim - Max dimension in the source space
     * @param sourceDim - current value in the source space
     * @param destinationMaxDim - Max dimension in the destination space
     * @return
     *      translated dimension in the  destination space
     */
    translateDimension: function(sourceMaxDim, sourceDim, destinationMaxDim) {
        if(isNaN(sourceMaxDim)) {
            sourceMaxDim = 0;
        }
        if(isNaN(sourceDim)) {
            sourceDim = 0;
        }
        if(isNaN(destinationMaxDim)) {
            destinationMaxDim = 0;
        }

        // compute scale factor
        var scaleFactor = 1;
        if (sourceMaxDim != 0) {
            scaleFactor = sourceDim / sourceMaxDim;
        }

        // apply the scale to the destination space
        var translatedDim = scaleFactor * destinationMaxDim;

        return translatedDim.toFixed(0);
    },

    /**
     * Translates a set of coordinates (xStart,yStart,xEnd,yEnd form) from (sourceXMax, sourceYMax) dimensions
     * in (destXMax, destYMax) space
     *
     * @param {String} serializedCoordString - coordinates string in the following format: xStart,yStart,xEnd,yEnd
     * @param {Number} sourceXMax, sourceYMax - source space max dimensions
     * @param {Number} destXMax, destYMax - destination space max dimensions
     */
    translateCoordinates: function(serializedCoordString, sourceXMax, sourceYMax, destXMax, destYMax) {
        if (!serializedCoordString) {
            return serializedCoordString;
        }
        var coordValues = serializedCoordString.split(",");
        if (coordValues.length >= 4) {
            var startX = coordValues[0];
            var startY = coordValues[1];
            var endX = coordValues[2];
            var endY = coordValues[3];

            // translate values
            startX = this.translateDimension(sourceXMax, startX, destXMax);
            startY = this.translateDimension(sourceYMax, startY, destYMax);
            endX = this.translateDimension(sourceXMax, endX, destXMax);
            endY = this.translateDimension(sourceYMax, endY, destYMax);

            // re-serialize
            serializedCoordString = startX + "," + startY + "," + endX + "," + endY;
        }

        return serializedCoordString;
    },

    // crop serialize method
    cropSerialize: function(translatedCropSerialize) {
        // received serialized form contains coordinates in the cropReqWidth x cropReqHeight space
        // must translate to originalSize
        return this.translateCoordinates(translatedCropSerialize, this.cropReqWidth, this.cropReqHeight, this.imageWidth, this.imageHeight);
    },

    // crop de-serialize method
    cropDeserialize: function(cropDefStr) {
        // received serialized form contains coordinates in the originalWidth x originalHeight space
        // must translate to cropReqWidth x cropReqHeight
        return this.translateCoordinates(cropDefStr, this.imageWidth, this.imageHeight, this.cropReqWidth, this.cropReqHeight);
    },

    constructor: function(config) {
        config = config || {};
        // disable upload
        var defaults = {
            "allowUpload": false,
            "ddAccept" :  "image/;Multipart"
        };

        CQ.Util.applyDefaults(config, defaults);

        // initialize crop req sizes to cropDefaultDimensio
        this.cropReqWidth = this.cropDefaultDimension;
        this.cropReqHeight = this.cropDefaultDimension;
        CQ.scene7.S7SmartImage.superclass.constructor.call(this, config);

        // override serialize and deserialize crop methods to map max 400 x 400 dimensions to image original dimensions
        var imageTools = this.imageToolDefs;
        var smartImage = this;
        if (imageTools) {
            for (var imageToolIdx = 0 ; imageToolIdx < imageTools.length ; imageToolIdx ++) {
                if (imageTools[imageToolIdx] instanceof CQ.form.ImageCrop) {
                    var originalSerialize = imageTools[imageToolIdx].serialize;
                    var originalDeserialize = imageTools[imageToolIdx].deserialize;

                    // overwrite the serialize and deserialize, to make sure we're being called to re-map the values to the scaled image
                    imageTools[imageToolIdx].serialize = function() {
                        // call original
                        var serializedCrop = originalSerialize.call(this);

                        // translate the crop to the original sizes
                        return smartImage.cropSerialize(serializedCrop);
                    };

                    imageTools[imageToolIdx].deserialize = function(cropDefStr) {
                        // translate the crop from original sizes to scaled dimensions
                        var translatedCrop = smartImage.cropDeserialize(cropDefStr);

                        return originalDeserialize.call(this, translatedCrop);
                    };
                }
            }
        }
    },

    // overriding CQ.html5.form.SmartImage#initComponent
    initComponent: function() {
        CQ.scene7.S7SmartImage.superclass.initComponent.call(this);

        // tab activate handler
        this.on("activate", function(panel){
            if (this.referencedFileInfo) {
                var imgConfig = CQ.scene7.dynamicImageHelper.getImageConfig(panel);
                imgConfig["imageCrop"] = this.imageCrop;
                this.initializeDimensions(imgConfig);
                this.reloadImages();
                this.updateView();
            }
        });

        // hook into the container dialog submit handler
        var s7SmartImage = this;
        var containerDialog = this.findParentByType("dialog");
        if (containerDialog) {
            containerDialog.on("beforesubmit", function(dialog){
                s7SmartImage.beforeSubmitHandler(dialog);
            });
        }
    },

    /**
     * Overrides the SmartImage's createRefUrl method
     * @param {Object} refFileInfo The file info for the referenced image; property refFileInfo.url is required
     * @return {String} The S7 URL to be used for requesting the referenced image
     * @private
     */
    createRefUrl: function(refFileInfo) {
        var urlPrefix = "";
        if (this.isImageServerUrl) {
            urlPrefix = "/is/image";
        }
        
        var url = this.urlAppend(urlPrefix + refFileInfo.url, this.buildCropEditSizeModifiers());
        return CQ.HTTP.externalize(url, true);
    },

    /**
     * Overrides the SmartImage's createFallbackRefUrl method
     * @param {Object} refFileInfo The file info for the referenced image; property refFileInfo.url is required
     * @return {String} The S7 URL to be used for requesting the referenced image
     * @private
     */
    createFallbackRefUrl: function(refFileInfo) {
        var urlPrefix = "";
        if (this.isImageServerUrl) {
            urlPrefix = "/is/image";
        }
        
        var url = this.urlAppend(urlPrefix + refFileInfo.url, this.buildCropEditSizeModifiers());
        return CQ.HTTP.externalize(url, true);
    },

    /**
     * Overrides the SmartImage's createProcessedImageConfig
     * Creates a configuration object that describes processed image data pointing to S7
     * @param {String} path The S7 path of the original image
     * @return {Object} The configuration object containing the path received as a parameter.
     *          Since the path will point to S7, it should not be altered in any way
     * @private
     */
    createProcessedImageConfig: function(path) {
        if (!path) {
            return null;
        }

        var urlPath = path + this.buildInfoImageUrlParams();

        return {
            "url": urlPath
        };
    },

    buildInfoImageUrlParams: function() {
        var urlParams = "";
        var hasPreset = false;

        if ("" != this.imagePreset) {
            urlParams = this.urlAppend(urlParams,"$" + this.imagePreset + "$");
            hasPreset = true;
        }

        if ("" != this.imageCrop) {
            urlParams = this.urlAppend(urlParams, this.buildCropModifiers());
        }

        if (!hasPreset) {
            if (this.processedWidth > 0) {
                urlParams = this.urlAppend(urlParams, "wid=" + this.processedWidth);
            }

            if (this.processedHeight > 0) {
                urlParams = this.urlAppend(urlParams, "hei=" + this.processedHeight);
            }

            if ("" != this.imageFormat) {
                urlParams = this.urlAppend(urlParams, "fmt=" + this.imageFormat);

                if ("jpeg" == this.imageFormat.toLowerCase()) {
                    urlParams = this.urlAppend(urlParams, "qlt=" + this.jpegQuality + ",1");
                }
            }

            if ("" != this.imageSharpening) {
                if ("unsharpmask" == this.imageSharpening.toLowerCase()) {
                    urlParams = this.urlAppend(urlParams, "op_usm=" + this.umAmount + "," + this.umRadius + "," + this.umThreshold + ",0");
                } else {
                    urlParams = this.urlAppend(urlParams, "op_sharpen=1");
                }
            }
        }

        if ("" != this.urlModifiers) {
            urlParams = this.urlAppend(urlParams, this.urlModifiers);
        }

        return urlParams;
    },

    /**
     * Called in the handleDrop method, before calling the superclass.handleDrop
     * By default it does nothing, it should be extended to perform post-drop needed actions
     */
    s7DropUpdateFormParams: function(component) {

    },

    /**
     * Override handleDrop implementation in SmartFile component
     * @param {Object} dragData Description of the object that has been dropped on the
     *        component
     */
    handleDrop: function(dragData) {
        // handle D&D in the Edit dialog Image tab
        if (dragData && dragData.records) {
            // initialize S7 width and height using the first record
            if (dragData.records.length > 0) {
                var firstRecord = dragData.records[0];

                this.assetType = firstRecord.data.mimeType;

                if (firstRecord.data.mimeType.indexOf("image") < 0) {
                    this.hideMainToolbar = true;
                }
                else {
                    this.hideMainToolbar = false;
                }

                // initialize S7 dimensions, if any
                if (firstRecord.data) {
                    this.initializeDimensions(firstRecord.data);
                }

                // if we have valid dimension, update the advanced tab
                this.s7DropUpdateFormParams.call(this, this);
            }
        }
        return CQ.scene7.S7SmartImage.superclass.handleDrop.call(this, dragData);
    },

    /**
     * Overrides SmartFile's getRefText
     * Returns the text to display in case of file references.
     * Takes into account that refPath points to S7, and uses component's dataPath to get permissions
     * @private
     * @param {String} refPath The reference file path
     * @param {String} pathTxt The text to display instead of the path
     * @return {String} The text
     */
    getRefText: function(refPath, pathTxt) {
        var canEditRef = CQ.User.getCurrentUser().hasPermissionOn("update", this.dataPath);
        var refHref = CQ.HTTP.externalize(CQ.shared.XSS.getXSSValue(refPath, true) + this.buildInfoImageUrlParams());
        var refTxt = CQ.I18n.getMessage("Referenced from:") + " ";
        if (canEditRef) {
            refTxt += "<a href=\"" + refHref + "\" target=\"_blank\" title=\"" +
                CQ.I18n.getMessage("Click here to open referenced file") +
                "\" style=\"cursor:pointer;\">";
        }
        refTxt += CQ.shared.XSS.getXSSValue(pathTxt ? pathTxt : refPath) + this.buildInfoImageUrlParams();
        if (canEditRef) {
            refTxt += "</a>";
        }
        return refTxt;
    },

    /**
     * Overrides the SmartImage's processRecord method
     * @param {CQ.data.SlingRecord} record The record to be processed
     * @param {String} path Base path for resolving relative file paths
     */
    processRecord: function(record, path) {
        // get the S7 image's width and height from the properties
        this.imageHeight = -1;
        this.imageWidth = -1;
        this.processedWidth = -1;
        this.processedHeight = -1;

        // initialize S7 dimensions, if any
        if (record.data) {
            this.initializeDimensions(record.data);
            this.assetType = record.data.assetType;
            this.hideMainToolbar = (this.assetType != "image"); //disable image tools for set asset.
        }

        var fileRef = record.get("./fileReference");
        var isSegmentIdx = fileRef.indexOf("/is/image");
        if (isSegmentIdx == 0) {
            this.isImageServerUrl = true;
            var damFileRef = fileRef.replace(/\/is\/image/g, "");
            record.json["fileReference"] = damFileRef;
            record.data["fileReference"] = damFileRef;
        }
        
        CQ.scene7.S7SmartImage.superclass.processRecord.call(this, record, path);
        
        record.json["fileReference"] = fileRef;
        record.data["fileReference"] = fileRef;
    },

    /**
     * Reloads the images based on the current image parameters
     */
    reloadImages: function() {
        this.processedRefImage = null;
        var processedImageConfig = null;
        this.fireEvent("beforeloadimage", this);
        if (this.referencedFileInfo) {
            this.originalRefImage = new CQ.form.SmartImage.Image({
                "dataPath": this.referencedFileInfo.dataPath,
                "url": this.referencedFileInfo.url,
                "fallbackUrl": this.referencedFileInfo.fallbackUrl
            });
            this.notifyImageLoad(this.originalRefImage);
            processedImageConfig =
                this.createProcessedImageConfig(this.referencedFileInfo.dataPath);
            if (processedImageConfig) {
                this.processedRefImage =
                    new CQ.form.SmartImage.Image(processedImageConfig);
                this.notifyImageLoad(this.processedRefImage);
            }
            this.originalRefImage.load();
            if (processedImageConfig) {
                this.processedRefImage.load();
            }
        }
    },

    /**
     * Overrides the SmartImage's postProcessRecord method
     * @param {CQ.data.SlingRecord} record The record to be processed
     * @param {String} path Base path for resolving relative file paths
     * @private
     */
    postProcessRecord: function(record, path) {
        this.dataRecord = record;
        if (this.originalImage != null) {
            this.fireEvent("statechange", "originalremoved", true);
        }
        this.originalImage = null;
        if (this.processedImage != null) {
            this.fireEvent("statechange", "processedremoved", true);
        }
        this.processedImage = null;
        if (this.originalRefImage != null) {
            this.fireEvent("statechange", "originalremoved", false);
        }
        this.originalRefImage = null;
        if (this.processedRefImage != null) {
            this.fireEvent("statechange", "processedremoved", false);
        }
        this.processedRefImage = null;
        var processedImageConfig = null;
        this.fireEvent("beforeloadimage", this);
        if (this.referencedFileInfo) {
            this.originalRefImage = new CQ.form.SmartImage.Image({
                "dataPath": this.referencedFileInfo.dataPath,
                "url": this.referencedFileInfo.url,
                "fallbackUrl": this.referencedFileInfo.fallbackUrl
            });
            this.notifyImageLoad(this.originalRefImage);
            processedImageConfig =
                this.createProcessedImageConfig(this.referencedFileInfo.dataPath);
            if (processedImageConfig) {
                this.processedRefImage =
                    new CQ.form.SmartImage.Image(processedImageConfig);
                this.notifyImageLoad(this.processedRefImage);
            }
            this.originalRefImage.load();
            if (processedImageConfig) {
                this.processedRefImage.load();
            }
        }
        if (this.fileInfo) {
            // do not support direct image upload
        }
        // tools
        var toolCnt = this.imageToolDefs.length;
        for (var toolIndex = 0; toolIndex < toolCnt; toolIndex++) {
            var tool = this.imageToolDefs[toolIndex];
            tool.processRecord(record);
        }
    },

    urlAppend: function(originalUrl, stuffToAppend) {
        var newUrl = "";
        if (originalUrl != undefined) {
            newUrl = originalUrl;
            if (originalUrl.indexOf("?") >= 0) {
                newUrl += "&";
            } else {
                newUrl += "?";
            }

            // strip leading &
            while(stuffToAppend.indexOf("&") == 0) {
                stuffToAppend = stuffToAppend.substring(1);
            }

            newUrl += stuffToAppend;
        }

        return newUrl;
    },

    buildCropModifiers: function() {
        var cropModifier = "";
        if (this.imageCrop != "") {
            var cropInfo = this.imageCrop.split(",");
            if (cropInfo.length >= 4) {
                var xStart = cropInfo[0];
                var yStart = cropInfo[1];
                var xEnd = cropInfo[2];
                var yEnd = cropInfo[3];
                cropModifier =  "crop=" + xStart + "," + yStart + "," + (xEnd-xStart) + "," + (yEnd-yStart);
            }
        }

        return cropModifier;
    },

    /**
     * Computes the size (width, height) parameters to be appended to the S7 image url when requesting the image from S7 to perform the crop operation
     * To make sure the request does not hit the MaxPix S7 server limitation the image will be scaled down using the cropDefaultDimension value based on the original image size in S7
     * @return {String} containing the S7 size url parameters
     */
    buildCropEditSizeModifiers: function() {

        var urlParamStr = "wid=" + this.cropReqWidth + "&hei=" + this.cropReqHeight;

        return urlParamStr;
    },

    /**
     * Attempts to initialize the S7 dimensions (width and height) based on the given record
     * @param {CQ.data.SlingRecord} record The record to be processed
     * @private
     */
    initializeDimensions: function(recordData) {
        if (recordData) {
            if (recordData.imageWidth) {
                this.imageWidth = recordData.imageWidth;
            }

            if (recordData.imageHeight) {
                this.imageHeight = recordData.imageHeight;
            }

            // if manual overrides set for width and height, use those ones
            if (recordData.width) {
                this.processedWidth = recordData.width;
            } else {
                this.processedWidth = -1;
            }

            if (recordData.height) {
                this.processedHeight = recordData.height;
            } else {
                this.processedHeight = -1;
            }

            if (recordData.imageCrop) {
                this.imageCrop = recordData.imageCrop;
            } else {
                this.imageCrop = "";
            }

            if (recordData.s7ImagePreset) {
                this.imagePreset = recordData.s7ImagePreset;
            } else {
                this.imagePreset = "";
            }

            if (recordData.outputFormat) {
                this.imageFormat = recordData.outputFormat;
            } else {
                this.imageFormat = "";
            }

            if (recordData.jpegQuality &&
                !isNaN(recordData.jpegQuality)) {
                this.jpegQuality = recordData.jpegQuality;
            } else {
                this.jpegQuality = 85;
            }

            if (recordData.sharpeningMode) {
                this.imageSharpening = recordData.sharpeningMode;
            } else {
                this.imageSharpening = "";
            }

            if (recordData.unsharpMaskAmount &&
                !isNaN(recordData.unsharpMaskAmount)) {
                this.umAmount = recordData.unsharpMaskAmount;
            } else {
                this.umAmount = 0;
            }

            if (recordData.unsharpMaskRadius
                && !isNaN(recordData.unsharpMaskRadius)) {
                this.umRadius = recordData.unsharpMaskRadius;
            } else {
                this.umRadius = 0;
            }

            if (recordData.unsharpMaskThreshold
                && !isNaN(recordData.unsharpMaskThreshold)) {
                this.umThreshold = recordData.unsharpMaskThreshold;
            } else {
                this.umThreshold = 0;
            }

            if (recordData.urlModifiers) {
                this.urlModifiers = recordData.urlModifiers;
            } else {
                this.urlModifiers = "";
            }
        }

        // compute the crop dimensions - used in the crop edit tool based on the original image dimensions
        this.computeCropDimensions();
    },

    /**
     * Computes the crop dimensions based on the actual S7 image size
     */
    computeCropDimensions: function() {
        var scaleFactor = 1;
        this.cropReqWidth = this.cropDefaultDimension;
        this.cropReqHeight = this.cropDefaultDimension;
        if (this.imageHeight > this.imageWidth) {
            scaleFactor = this.imageWidth / this.imageHeight;
            this.cropReqWidth = scaleFactor * this.cropDefaultDimension;
        } else {
            scaleFactor = this.imageHeight / this.imageWidth;
            this.cropReqHeight = scaleFactor * this.cropDefaultDimension;
        }

        this.cropReqWidth = this.cropReqWidth.toFixed(0);
        this.cropReqHeight = this.cropReqHeight.toFixed(0);
    }
});

// register xtype
CQ.Ext.reg('s7html5smartimage', CQ.scene7.S7SmartImage);
