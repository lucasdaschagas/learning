/*
 * Copyright 1997-2010 Day Management AG
 * Barfuesserplatz 6, 4001 Basel, Switzerland
 * All Rights Reserved.
 *
 * This software is the confidential and proprietary information of
 * Day Management AG, ("Confidential Information"). You shall not
 * disclose such Confidential Information and shall use it only in
 * accordance with the terms of the license agreement you entered into
 * with Day.
 */


/**
 * Returns if the users grid has any selection.
 * @return {Boolean} true if at least one item is selected, false otherwise
 */
CQ.security.SecurityAdmin.hasUsersSelection = function() {
    try {
        return window.CQ_SecurityAdmin.usersGrid.getSelectionModel().getSelections().length > 0;
    }
    catch (e) {
        // usersGrid not yet defined
        return false;
    }
};

/**
 * Returns if the groups grid has any selection.
 * @return {Boolean} true if at least one item is selected, false otherwise
 */
CQ.security.SecurityAdmin.hasGroupsSelection = function() {
    try {
        return window.CQ_SecurityAdmin.groupsGrid.getSelectionModel().getSelections().length > 0;
    }
    catch (e) {
        // groupsGrid not yet defined
        return false;
    }
};

/**
 * Returns if the users grid has a single selection.
 * @return {Boolean} true if exactly one item is selected, false otherwise
 */
CQ.security.SecurityAdmin.hasSingleUserSelection = function() {
    try {
        return window.CQ_SecurityAdmin.usersGrid.getSelectionModel().getSelections().length == 1;
    }
    catch (e) {
        // usersGrid not yet defined
        return false;
    }
};

/**
 * Returns if the groups grid has a single selection.
 * @return {Boolean} true if exactly one item is selected, false otherwise
 */
CQ.security.SecurityAdmin.hasSingleGroupSelection = function() {
    try {
        return window.CQ_SecurityAdmin.groupsGrid.getSelectionModel().getSelections().length == 1;
    }
    catch (e) {
        // groupsGrid not yet defined
        return false;
    }
};

/**
 * Returns if the members grid has any selection (Members Dialog).
 * @return {Boolean} true if at least one item is selected, false otherwise
 */
CQ.security.SecurityAdmin.hasMembersSelection = function() {
    try {
        return window.CQ_SecurityAdmin.membersGrid.getSelectionModel().getSelections().length > 0;
    }
    catch (e) {
        // membersGrid not yet defined
        return false;
    }
};

/**
 * Returns the path of the action target of the users grid.
 * @return {String} The path or null
 */
CQ.security.SecurityAdmin.getUsersTarget = function() {
    try {
        var sel = window.CQ_SecurityAdmin.usersGrid.getSelectionModel().getSelections();
        if (sel.length == 0) return null;
        return sel[0].id;
    }
    catch (e) {
        // usersGrid not yet defined
        return null;
    }
};

/**
 * Returns the path of the action target of the groups grid.
 * @return {String} The path or null
 */
CQ.security.SecurityAdmin.getGroupsTarget = function() {
    try {
        var sel = window.CQ_SecurityAdmin.groupsGrid.getSelectionModel().getSelections();
        if (sel.length == 0) return null;
        return sel[0].id;
    }
    catch (e) {
        // groupsGrid not yet defined
        return null;
    }
};

/**
 * Saves the create user dialog.
 * @param {CQ.Dialog} dialog
 * @param {CQ.Ext.Button} button
 * @param {Function} success (optional) The function to call after the user
 *                           has been created successfully.
 */
CQ.security.SecurityAdmin.saveUser = function(dialog, button, success) {
    var admin = window.CQ_SecurityAdmin;
    var idField = "";
    try {
        // if id is empty create from email
        idField = dialog.getField("rep:userId");
        var emailField = dialog.getField("email");

        if(emailField.getValue().trim() == "" && (!idField || idField.getValue().trim() == "")) {
            CQ.Ext.Msg.alert(CQ.I18n.getMessage("Error"), admin.getMsg(admin.EMAIL_OR_ID_MISSING));
            admin.unmask();
            return;
        }


        var id = CQ.Ext.form.VTypes.makeAuthorizableId(emailField.getValue().trim());
        if (!idField) {
            dialog.addHidden({"rep:userId": id}, false);
        }
        else if (idField.getValue().trim() == "") {
            idField.setValue(id);
        }
    }
    catch(e) {}

    dialog.ok(button, function() {
            admin.reloadUsersGrid();
            admin.showUserQuickView();
            admin.unmask();
            if (success) success();
        }, function(dlg, xhr) {
            var txt = admin.getMsg(admin.FAILED_TO_CREATE_USER);
            try {
                txt += ":<br><br>";
                var errCode = CQ.HTTP.buildPostResponseFromHTML(xhr.response.responseText).headers[CQ.HTTP.HEADER_MESSAGE];
                if(errCode == "Err01"){
					txt += idField.getValue() + " " + CQ.I18n.getMessage("already exists");
                }
                if(errCode == "Err02"){
					txt += CQ.I18n.getMessage("Creation of User failed without exception");
                }
            }
            catch(e){}
            CQ.Ext.Msg.alert(CQ.I18n.getMessage("Error"), txt);
            admin.unmask();
        }
    );
};
/**
 * Saves the create user dialog and re-opens the dialog.
 * @param {CQ.Dialog} dialog
 * @param {CQ.Ext.Button} button
 */
CQ.security.SecurityAdmin.saveAndCreateUser = function(dialog, button) {
    CQ.security.SecurityAdmin.saveUser(dialog, button, CQ.security.SecurityAdmin.createUser);
};

/**
 * Saves the create user dialog and opens the details of the created user.
 * @param {CQ.Dialog} dialog
 * @param {CQ.Ext.Button} button
 */
CQ.security.SecurityAdmin.saveAndOpenUser = function(dialog, button) {
    CQ.security.SecurityAdmin.saveUser(dialog, button);
};

/**
 * Opens the user's page.
 */
CQ.security.SecurityAdmin.openUser = function(path) {
    //todo: edit is tmp solution
    CQ.security.SecurityAdmin.editUser(path);
};

/**
 * Opens the create user dialog.
 * @param {String} dialogPath (optional) The path of the dialog
 */
CQ.security.SecurityAdmin.createUser = function(dialogPath) {
    var admin = window.CQ_SecurityAdmin;
    if (admin) {
        if (!dialogPath) dialogPath = admin.createUserDialogPath;
    }

    var path = "/home/users/*"; // fake path
    var dialog = CQ.security.SecurityAdmin.getDialog(dialogPath, path);
    var store = CQ.security.SecurityAdmin.getDialogContentStore(path);
    dialog.processRecords([store.getAt(0)], {"scope": dialog}, true);

    try {
        // try to set random password
        var pwdField = dialog.getField("rep:password");
        pwdField.setValue(CQ.security.SecurityAdmin.buildPassword());
    }
    catch (e) {}

    dialog.show();
};

CQ.security.SecurityAdmin.buildPassword = function(length) {
    var admin = window.CQ_SecurityAdmin;
    if (!length) length = admin ? admin.createUserDialogPasswordLength : 12;
    // do not use "O" and "0" because of danger of confusion
    var pwdChars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNPQRSTUVWXYZ123456789";
    var pwd = "";
    for (var i = 0; i < length; i++) {
        pwd += pwdChars.charAt(Math.round(Math.random() * pwdChars.length));
    }
    return pwd;
};

/**
 * Opens the edit user dialog.
 * @param {String} path (optional) The user's path
 * @param {String} dialogPath (optional) The path of the dialog
 */
CQ.security.SecurityAdmin.editUser = function(path, dialogPath) {
    CQ.security.SecurityAdmin.editAuthorizable(true, path, dialogPath);
};

/**
 * Opens the edit dialogs.
 * @param {String} path (optional) The user's path
 * @param {String} dialogPath (optional) The path of the dialog
 * @private
 */
CQ.security.SecurityAdmin.editAuthorizable = function(isUser, path, dialogPath) {
    var admin = window.CQ_SecurityAdmin;
    var idName = isUser ? "rep:userId" : "groupName";
    if (admin) {
        var grid = isUser ? admin.usersGrid : admin.groupsGrid;
        if (!path) path = grid.getSelectionModel().getSelections()[0].id;
        if (!dialogPath) dialogPath = isUser ? admin.editUserDialogPath : admin.editGroupDialogPath;
    }
    var dialog = CQ.security.SecurityAdmin.getDialog(dialogPath, path);
    var store = CQ.security.SecurityAdmin.getDialogContentStore(path, idName);
    try {
        // id field must be disabled in order to successfully submit the dialog
        dialog.find("name", idName)[0].disable();
    }
    catch (e) {
        // no id field found
    }
    dialog.processRecords([store.getAt(0)], {"scope": dialog}, true);
    dialog.show();
};


// private
CQ.security.SecurityAdmin.getDialogContentStore = function(path, idFieldName) {
    // content must be loaded manually because of different structure of content and dialog
    var fields = [];
    var data = [[]];
    if (path && path.indexOf("/*") == -1) {
        try {
            var resp = CQ.HTTP.eval(CQ.HTTP.noCaching(path + ".preferences" + CQ.HTTP.EXTENSION_JSON));
            for (var prop in resp.user) {
                fields.push(prop == "userID" ? idFieldName : prop);
                data[0].push(resp.user[prop]);
            }
        }
        catch (e) {}
    }
    return new CQ.Ext.data.SimpleStore({
        fields: fields,
        data : data
    });
};


/**
 * Saves the create group dialog.
 * @param {CQ.Dialog} dialog
 * @param {CQ.Ext.Button} button
 * @param {Function} success (optional) The function to call after the group
 *                           has been created successfully.
 */
CQ.security.SecurityAdmin.saveGroup = function(dialog, button, success) {
    var admin = window.CQ_SecurityAdmin;
    var idField = "";
    try {
        // if id is empty create it from name
        idField = dialog.getField("groupName");

        var nameField = dialog.getField("givenName");

        var id = CQ.Ext.form.VTypes.makeAuthorizableId(nameField.getValue());
        if (!idField) {
            dialog.addHidden({"groupName": id}, false);
        }
        else if (idField.getValue() == "") {
            idField.setValue(id);
        }
    }
    catch(e) {}

    dialog.ok(button, function() {
            admin.reloadGroupsGrid();
            admin.showGroupQuickView();
            admin.unmask();
            //todo: demo script hack
            if (admin.dashboard && admin.dashboard.listsDataView) {
                admin.dashboard.listsDataView.getStore().reload();
            }
            if (success) success();
        }, function(dlg, xhr) {
            var txt = admin.getMsg(admin.FAILED_TO_CREATE_GROUP);
            try {
                txt += ":<br><br>";
                var errorCode = CQ.HTTP.buildPostResponseFromHTML(xhr.response.responseText).headers[CQ.HTTP.HEADER_MESSAGE];

                if(errorCode == "Err01"){
					txt += idField.getValue() + " " + CQ.I18n.getMessage("already exists");
                }else 
                if(errorCode == "Err03"){
					txt += CQ.I18n.getMessage("Creation of Group failed without exception");
                }
            }
            catch(e){}
            CQ.Ext.Msg.alert(CQ.I18n.getMessage("Error"), txt);
            admin.unmask();
        }
    );
};

/**
 * Saves the create group dialog and re-opens the dialog.
 * @param {CQ.Dialog} dialog
 * @param {CQ.Ext.Button} button
 */
CQ.security.SecurityAdmin.saveAndCreateGroup = function(dialog, button) {
    CQ.security.SecurityAdmin.saveGroup(dialog, button, CQ.security.SecurityAdmin.createGroup);
};

/**
 * Saves the create group dialog and opens the details of the created group.
 * @param {CQ.Dialog} dialog
 * @param {CQ.Ext.Button} button
 */
CQ.security.SecurityAdmin.saveAndOpenGroup = function(dialog, button) {
    CQ.security.SecurityAdmin.saveGroup(dialog, button);
};

/**
 * Opens the groups's page.
 */
CQ.security.SecurityAdmin.openGroup = function(path) {
    //todo: edit is tmp solution
    CQ.security.SecurityAdmin.editGroup(path);
};

/**
 * Opens the create group dialog.
 * @param {String} dialogPath (optional) The path of the dialog
 */
CQ.security.SecurityAdmin.createGroup = function(dialogPath) {
    var admin = window.CQ_SecurityAdmin;
    if (admin) {
        if (!dialogPath) dialogPath = admin.createGroupDialogPath;
    }
    var path = "/home/groups/*"; // fake path
    var dialog = CQ.security.SecurityAdmin.getDialog(dialogPath, path);
    var store = CQ.security.SecurityAdmin.getDialogContentStore(path);
    dialog.processRecords([store.getAt(0)], {"scope": dialog}, true);

    dialog.show();
};

/**
 * Opens the edit group dialog.
 * @param {String} path (optional) The groups's path
 * @param {String} dialogPath (optional) The path of the dialog
 */
CQ.security.SecurityAdmin.editGroup = function(path, dialogPath) {
    CQ.security.SecurityAdmin.editAuthorizable(false, path, dialogPath);
};

/**
 * Returns the path
 * @param {String} dialogPath
 * @param {String} path The path of the user or group
 * @param {String} formUrl (optional) The formUrl of the dialog
 * @private
 */
CQ.security.SecurityAdmin.getDialog = function(dialogPath, path, formUrl) {
    // try to get cached dialog
    var dialog = CQ.WCM.getDialog(null, dialogPath, true);

    // dialog does not exist > create it
    if (!dialog) {
        var config = CQ.WCM.getDialogConfig(dialogPath);
        if (config.formUrl) {
            config.formUrlFromContent = true;
        }
        else {
            // formUrl not defined in content (normal use case):
            // post edit to authorizable and new to "/libs/cq/security/authorizables/POST"
            config.formUrl = path && path.indexOf("/*") == -1 ? path : formUrl ? formUrl : "/libs/cq/security/authorizables/POST";
        }
        config.path = path;
        
        // cache under dialogPath
        dialog = CQ.WCM.getDialog(config, dialogPath);
        dialog.on("beforesubmit", function(){window.CQ_SecurityAdmin.mask();});
    }
    else {
        // dialog from cache
        if (!dialog.initialConfig.formUrlFromContent) {
            // adjust formUrl if it has not been defined in content (see above)
            dialog.setFormUrl(path && path.indexOf("/*") == -1 ? path : formUrl ? formUrl : "/libs/cq/security/authorizables/POST");
        }
        dialog.path = path;
    }

    return dialog;
};

// private
CQ.security.SecurityAdmin.createConfirmMessage = function(sel, msgSingular, msgPlural) {
    var msg = (sel.length > 1) ? msgPlural : msgSingular;
    msg += "<br/><br/>";
    var list = CQ.security.SecurityAdmin.getSelectionList(sel);
    msg += list.items.join("<br/>") + "<br/>";
    if (list.more) msg += "<br/>" + list.more + "<br/>";
    msg += "<br/>" + CQ.I18n.getMessage("Are you sure?");
    return msg;
};

// private
CQ.security.SecurityAdmin.getSelectionList = function(sel, max) {
    max = max || 10;
    var list = {
        "items": [],
        "more": ""
    };
    max = sel.length > max ? 4 : max;
    for (var i = 0; i < sel.length; i++) {
        if (i == max) {
            list.more = CQ.I18n.getMessage("and {0} more...", [sel.length-i], "e.g. and 20 more users to delete");
            break;
        }
        var auth = CQ.I18n.get("{0} {1}",[CQ.shared.XSS.getXSSRecordPropertyValue(sel[i], "givenName"),CQ.shared.XSS.getXSSRecordPropertyValue(sel[i], "familyName")],"name display order: {0} is the given (first) name, {1} the family (last) name");
        var id = sel[i].get("id");
        if (id && auth != id) auth = id + " / " + auth + "";
        list.items.push(auth);
    }
    return list;
};

/**
 * Deletes the users selected in the users grid.
 */
CQ.security.SecurityAdmin.deleteUsers = function() {
    var admin = window.CQ_SecurityAdmin;
    CQ.security.SecurityAdmin.deleteAuthorizables(window.CQ_SecurityAdmin.usersGrid,
            admin.getMsg(admin.DELETE_USERS_TITLE),
            admin.getMsg(admin.DELETE_USER),
            admin.getMsg(admin.DELETE_USERS));
};

/**
 * Deletes the groups selected in the groups grid.
 */
CQ.security.SecurityAdmin.deleteGroups = function() {
    var admin = window.CQ_SecurityAdmin;
    CQ.security.SecurityAdmin.deleteAuthorizables(window.CQ_SecurityAdmin.groupsGrid,
            admin.getMsg(admin.DELETE_GROUPS_TITLE),
            admin.getMsg(admin.DELETE_GROUPS),
            admin.getMsg(admin.DELETE_GROUPS));
};

/**
 * Deletes the authorizables selected in the given grid.
 * @param {CQ.Ext.grid.GridPanel} grid The grid.
 * @param {String} title (optional) The (translated) title of the confirm box
 * @param {String} msgSingular (optional) The (translated) message of the confirm box if a single item is selected
 * @param {String} msgPlural (optional) The (translated) message of the confirm box if multiple items are selected
 */
CQ.security.SecurityAdmin.deleteAuthorizables = function(grid, title, msgSingular, msgPlural) {
    title = title ? title : CQ.I18n.getMessage("Delete Authorizables");
    msgSingular = msgSingular ? msgSingular : CQ.I18n.getMessage("You are going to delete the following authorizable:");
    msgPlural = msgPlural ? msgPlural : CQ.I18n.getMessage("You are going to delete the following authorizables:");

    var sel = grid.getSelectionModel().getSelections();
    var msg = CQ.security.SecurityAdmin.createConfirmMessage(sel, msgSingular, msgPlural);

    CQ.Ext.Msg.show({
        "title":title,
        "msg":msg,
        "buttons":CQ.Ext.Msg.YESNO,
        "icon":CQ.Ext.MessageBox.QUESTION,
        "fn":function(btnId) {
            if (btnId == "yes") {
                var admin = window.CQ_SecurityAdmin;
                admin.mask();
                for (var i=0; i<sel.length; i++) {
                    CQ.HTTP.post(sel[i].get("home"), null, {
                        "_charset_":"utf-8",
                        "deleteAuthorizable": 1
                    });
                }
                grid.getStore().reload();
                grid.quickView.collapse();
                admin.unmask();
            }
        },
        "scope":this
    });
};

/**
 * Activates the users selected in the users grid.
 */
CQ.security.SecurityAdmin.activateUsers = function() {
    var admin = window.CQ_SecurityAdmin;
    CQ.security.SecurityAdmin.replicateAuthorizables(window.CQ_SecurityAdmin.usersGrid, true,
            admin.getMsg(admin.ACTIVATE_USERS_TITLE),
            admin.getMsg(admin.ACTIVATE_USER),
            admin.getMsg(admin.ACTIVATE_USERS));
};

/**
 * Activates the groups selected in the users grid.
 */
CQ.security.SecurityAdmin.activateGroups = function() {
    var admin = window.CQ_SecurityAdmin;
    CQ.security.SecurityAdmin.replicateAuthorizables(window.CQ_SecurityAdmin.groupsGrid, true,
            admin.getMsg(admin.ACTIVATE_GROUPS_TITLE),
            admin.getMsg(admin.ACTIVATE_GROUP),
            admin.getMsg(admin.ACTIVATE_GROUPS));
};

/**
 * Activates the users selected in the users grid.
 */
CQ.security.SecurityAdmin.deactivateUsers = function() {
    var admin = window.CQ_SecurityAdmin;
    CQ.security.SecurityAdmin.replicateAuthorizables(window.CQ_SecurityAdmin.usersGrid, false,
    admin.getMsg(admin.DEACTIVATE_USERS_TITLE),
    admin.getMsg(admin.DEACTIVATE_USER),
    admin.getMsg(admin.DEACTIVATE_USERS));
};

/**
 * Activates the groups selected in the users grid.
 */
CQ.security.SecurityAdmin.deactivateGroups = function() {
    var admin = window.CQ_SecurityAdmin;
    CQ.security.SecurityAdmin.replicateAuthorizables(window.CQ_SecurityAdmin.groupsGrid, false,
    admin.getMsg(admin.DEACTIVATE_GROUPS_TITLE),
    admin.getMsg(admin.DEACTIVATE_GROUP),
    admin.getMsg(admin.DEACTIVATE_GROUPS));
};

/**
 * Replicates the authorizables selected in the given grid.
 * @param {CQ.Ext.grid.GridPanel} grid The grid.
 * @param {Boolean} activate True to activate, false to deactivate.
 * @param {String} title (optional) The (translated) title of the confirm box
 * @param {String} msgSingular (optional) The (translated) message of the confirm box if a single item is selected
 * @param {String} msgPlural (optional) The (translated) message of the confirm box if multiple items are selected
 */
CQ.security.SecurityAdmin.replicateAuthorizables = function(grid, activate, title, msgSingular, msgPlural) {
    if (activate) {
        title = title ? title : CQ.I18n.getMessage("Activate Authorizables");
        msgSingular = msgSingular ? msgSingular : CQ.I18n.getMessage("You are going to activate the following authorizable:");
        msgPlural = msgPlural ? msgPlural : CQ.I18n.getMessage("You are going to activate the following authorizables:");
    }
    else {
        title = title ? title : CQ.I18n.getMessage("Deactivate Authorizables");
        msgSingular = msgSingular ? msgSingular : CQ.I18n.getMessage("You are going to deactivate the following authorizable:");
        msgPlural = msgPlural ? msgPlural : CQ.I18n.getMessage("You are going to deactivate the following authorizables:");
    }

    var sel = grid.getSelectionModel().getSelections();
    var msg = CQ.security.SecurityAdmin.createConfirmMessage(sel, msgSingular, msgPlural);

    CQ.Ext.Msg.show({
        "title":title,
        "msg":msg,
        "buttons":CQ.Ext.Msg.YESNO,
        "icon":CQ.Ext.MessageBox.QUESTION,
        "fn":function(btnId) {
            if (btnId == "yes") {
                var admin = window.CQ_SecurityAdmin;
                admin.mask();
                var paths = [];
                for (var i=0; i<sel.length; i++) {
                    paths.push(sel[i].get("home"));
                }
                CQ.HTTP.post("/bin/replicate.json", null, {
                    "_charset_":"utf-8",
                    "cmd": activate ? "Activate" : "Deactivate",
                    "path": paths
                });
                grid.getStore().reload();
                admin.unmask();
            }
        },
        "scope":this
    });
};

CQ.security.SecurityAdmin.addUsers = function() {
    var admin = window.CQ_SecurityAdmin;
    var sel = window.CQ_SecurityAdmin.usersGrid.getSelectionModel().getSelections();
    CQ.security.SecurityAdmin.addMembers(sel,
            admin.getMsg(admin.ADD_THE_FOLLOWING_USER),
            admin.getMsg(admin.ADD_THE_FOLLOWING_X_USERS, sel.length));
};

CQ.security.SecurityAdmin.addGroups = function() {
    var admin = window.CQ_SecurityAdmin;
    var sel = window.CQ_SecurityAdmin.groupsGrid.getSelectionModel().getSelections();
    CQ.security.SecurityAdmin.addMembers(sel,
            admin.getMsg(admin.ADD_THE_FOLLOWING_GROUP),
            admin.getMsg(admin.ADD_THE_FOLLOWING_X_GROUPS, sel.length));
};

CQ.security.SecurityAdmin.addMembers = function(sel, msgSingular, msgPlural) {
    var admin = window.CQ_SecurityAdmin;

    var msg = (sel.length > 1) ? msgPlural : msgSingular;
    msg += "<br/><br/>";
    var list = CQ.security.SecurityAdmin.getSelectionList(sel, 6);
    msg += list.items.join("<br/>") + "<br/>";
    if (list.more) msg += list.more + "<br/>";
    msg += "<br/><br/>";
    msg += admin.getMsg(admin.TO_THE_FOLLOWING_GROUP);
    msg += "<br/><br/>";

    var groupField;
    var cfg = new CQ.Dialog({
        "title": admin.getMsg(admin.ADD_TO_GROUP_TITLE),
        "params": {
            "_charset_":"utf-8",
            "memberAction": "addMembers"
        },
        "items": {
            "xtype": "panel",
            "items": [
                new CQ.Static({
                    "html": msg
                }),
                groupField = new CQ.security.AuthorizableSelection({
                    "hideLabel": true,
                    "filter": "groups",
                    "displayField": "home"
                })
            ]
        },
        "buttons": CQ.Dialog.OKCANCEL,
        "listeners": {
            "beforesubmit": function() {
                admin.mask();
                groupField.disable();
                for (var i = 0; i < sel.length; i++) {
                    dialog.addHidden({"memberEntry": sel[i].data.id});
                }
                dialog.setFormUrl(groupField.getValue() + ".html");
            }
        }
    });

    var dialog = CQ.WCM.getDialog(cfg);
    dialog.success = function() {
        admin.reloadGroupsGrid();
        admin.showUserQuickView();
        admin.showGroupQuickView();
        admin.unmask();
    };
    dialog.failure = function() {
        admin.unmask();
    };
    dialog.show();
};

CQ.security.SecurityAdmin.mergeGroup = function() {
    var admin = window.CQ_SecurityAdmin;
    var sel = window.CQ_SecurityAdmin.groupsGrid.getSelectionModel().getSelections();

    var cfg = new CQ.Dialog({
        "title": admin.getMsg(admin.ADD_TO_GROUP_TITLE),
        "formUrl": sel[0].get("home"),
        "height": 250,
        "params": {
            "_charset_":"utf-8",
            "memberAction": "addMembers"
        },
        "items": {
            "xtype": "panel",
            "items": [
                new CQ.Static({
                    "html": admin.getMsg(admin.MERGE_THE_FOLLOWING_GROUP) + "<br><br>"
                }),
                new CQ.security.AuthorizableSelection({
                    "name": "memberEntry",
                    "hideLabel": true,
                    "filter": "groups",
                    "displayField": "id",
		     "forceSelection": true,
                    "listeners": {
    					"collapse": function(combo) {
     							 combo.validateValue();

  							  }
  						},
                    "validateValue" : function(value) {
    						var errs = this.getErrors(value);
						    if((value || value != "") && this.forceSelection){
        						var val = this.getRawValue(),
        						rec = this.findRecord(this.displayField, val);

        						if(!rec)
            					errs.push(CQ.I18n.getMessage("Please select valid list")); 
    						}

    						var error = errs[0];

    						if (error == undefined) {
        						return true;
    						} else {
        						this.markInvalid(error);
                                return false;
    						}
						}
                }),
                new CQ.Static({
                    "html": "<br>" + admin.getMsg(admin.WITH_GROUP, "<b>" + CQ.Ext.util.Format.htmlEncode(sel[0].get("name")) + "</b>") 
                })
            ]
        },
        "buttons": CQ.Dialog.OKCANCEL,
        "listeners": {
            "beforesubmit": function() {
                admin.mask();
            }
        }
    });

    var dialog = CQ.WCM.getDialog(cfg);
    dialog.success = function() {
        admin.reloadGroupsGrid();
        admin.showUserQuickView();
        admin.showGroupQuickView();
        admin.unmask();
    };
    dialog.failure = function() {
        admin.unmask();
    };
    dialog.show();
};

CQ.security.SecurityAdmin.removeMembership = function(groupPath, groupName, memberId, memberName, isUser) {
    var admin = window.CQ_SecurityAdmin;

    var txt = isUser ? admin.REMOVE_USER_FROM_GROUP : admin.REMOVE_GROUP_FROM_GROUP;
    CQ.Ext.Msg.show({
        "title": admin.getMsg(admin.REMOVE_MEMBERSHIP_TITLE),
        "msg": CQ.Ext.util.Format.htmlEncode(admin.getMsg(txt, [memberName, groupName])),
        "buttons":CQ.Ext.Msg.YESNO,
        "icon":CQ.Ext.MessageBox.QUESTION,
        "fn":function(btnId) {
            if (btnId == "yes") {
                var admin = window.CQ_SecurityAdmin;
                admin.mask();
                CQ.HTTP.post(groupPath, null, {
                    "_charset_":"utf-8",
                    "memberAction": "removeMembers",
                    "memberEntry": memberId
                });
                if (isUser) admin.refreshUserQuickView();
                else admin.refreshGroupQuickView();
                admin.unmask();
            }
        },
        "scope":this
    });
};

CQ.security.SecurityAdmin.removeMembers = function() {
    var admin = window.CQ_SecurityAdmin;
    var group = admin.groupsGrid.getSelectionModel().getSelections()[0];
    var sel = admin.membersGrid.getSelectionModel().getSelections();
    var msg = CQ.security.SecurityAdmin.createConfirmMessage(sel,
            admin.getMsg(admin.REMOVE_MEMBER, CQ.shared.XSS.getXSSRecordPropertyValue(group, "name")),
            admin.getMsg(admin.REMOVE_MEMBERS, CQ.shared.XSS.getXSSRecordPropertyValue(group, "name")));
    
    CQ.Ext.Msg.show({
        "msg":msg,
        "buttons":CQ.Ext.Msg.YESNO,
        "icon":CQ.Ext.MessageBox.QUESTION,
        "fn":function(btnId) {
            if (btnId == "yes") {
                var admin = window.CQ_SecurityAdmin;
                admin.mask();
                var members = [];
                for (var i=0; i<sel.length; i++) {
                    members.push(sel[i].get("id"));
                }
                CQ.HTTP.post(group.get("home"), null, {
                    "_charset_":"utf-8",
                    "memberAction": "removeMembers",
                    "memberEntry": members
                });
                admin.membersGrid.getStore().reload();
                admin.membersGrid.quickView.collapse();
                admin.groupsGrid.getStore().reload();
                admin.groupsPanel.refreshQuickView();
                admin.usersPanel.refreshQuickView();
                admin.unmask();
            }
        },
        "scope":this
    });
};

CQ.security.SecurityAdmin.showMembers = function() {
    try {
        var admin = window.CQ_SecurityAdmin;
        var sel = admin.groupsGrid.getSelectionModel().getSelections();
        var dialogCfg = CQ.WCM.getDialogConfig(admin.membersDialogPath);

        CQ.security.SecurityAdmin.injectGroup(dialogCfg, sel[0].get("id"));

        dialogCfg.buttons = CQ.Dialog.CANCEL;
        dialogCfg = CQ.Util.applyDefaults(dialogCfg, {
            "title": admin.getMsg(admin.MEMBERS_TITLE, [CQ.shared.XSS.getXSSRecordPropertyValue(sel[0], "name")]),
            "width": 850,
            "height": 450,
            "cancelText": CQ.I18n.getMessage("Close"),
            "closeAction": "close"
        });
        //todo: cache dialog?
        var dialog = CQ.WCM.getDialog(dialogCfg);
        dialog.show();
        admin.membersPanel = CQ.Ext.getCmp("membersPanel");
        admin.membersGrid = CQ.Ext.getCmp("membersGrid");
    }
    catch (e) {}
};

/**
 * Find the property object "queryCfg" and inject the property "group".
 * @param home
 * @private
 */
CQ.security.SecurityAdmin.injectGroup = function(cfg, groupId) {
    if (cfg.id == "membersGrid") {
        if (!cfg.queryCfg) cfg.queryCfg = {};
        cfg.queryCfg.group = groupId;
        return true;
    }
    if (typeof cfg == "object" && !(cfg instanceof Array)) {
        for (var elem in cfg) {
            var found = CQ.security.SecurityAdmin.injectGroup(cfg[elem], groupId);
            if (found) return true;
        }
    }
    return false;
},


CQ.security.SecurityAdmin.importCSV = function(dialog) {
    var admin = window.CQ_SecurityAdmin;
    if (!dialog) dialog = new CQ.mcm.ImportCsvWizard();
    dialog.on("beforesubmit", function() {admin.mask();});
    dialog.success = function() {
        admin.reloadUsersGrid();
        admin.reloadGroupsGrid();
        //todo: demo script hack
        if (admin.dashboard && admin.dashboard.listsDataView) {
            admin.dashboard.listsDataView.getStore().reload();
        }
        admin.unmask();
    };
    dialog.failure = function() {
        admin.unmask();
    };
    dialog.show();
};

CQ.security.SecurityAdmin.showGroupInGrid = function(home) {
    try {
        var admin = window.CQ_SecurityAdmin;
        admin.deck.layout.setActiveItem(admin.groupsPanel);
        var m = admin.groupsGrid.getStore();
        m.each(function(rec) {
            if (rec.id == home) {
                admin.groupsGrid.getSelectionModel().selectRecords([rec]);
                admin.showGroupQuickView();
                return false; // "break"
            }
        });
        admin.navButtons["groupsPanel"].toggle();
    }
    catch(e) {}
};

CQ.security.SecurityAdmin.THOUSANDS = CQ.I18n.getMessage("Thousands");
CQ.security.SecurityAdmin.HUNDREDS = CQ.I18n.getMessage("Hundreds");
CQ.security.SecurityAdmin.formatMax = function(max) {
    if (max >= 2000) return CQ.security.SecurityAdmin.THOUSANDS;
    else if (max >= 200) return CQ.security.SecurityAdmin.HUNDREDS;
    else return CQ.I18n.getMessage("More than {0}", max);
};
