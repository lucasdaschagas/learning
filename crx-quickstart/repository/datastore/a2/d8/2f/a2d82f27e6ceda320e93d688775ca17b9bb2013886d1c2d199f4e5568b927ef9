/*******************************************************************************
 * Copyright 2016 Adobe Systems Incorporated
 * All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
 ******************************************************************************/

"use strict";

use( function(){

    var EDITOR_CONST = {
            DD_TARGET: com.day.cq.wcm.api.components.DropTarget.CSS_CLASS_PREFIX + "image ",
            TOUCHUI_PLACEHOLDER: "cq-placeholder ",
            CLASSIC_PLACEHOLDER: "cq-image-placeholder"
        },
        METADATA_NODE = com.day.cq.dam.api.s7dam.constants.S7damConstants.S7_ASSET_METADATA_NODE,
        DM_FEATURE_FLAG = com.day.cq.dam.entitlement.api.EntitlementConstants.ASSETS_DYNAMICMEDIA_FEATURE_FLAG_PID,
        SCENE7_FEATURE_FLAG = com.day.cq.dam.entitlement.api.EntitlementConstants.ASSETS_SCENE7_FEATURE_FLAG_PID,
        RUNMODE_DMS7 = "dynamicmedia_scene7",
        S7_TYPE_NODE = com.day.cq.dam.api.s7dam.constants.S7damConstants.PN_S7_TYPE,
        SCENE7_FILE_PROP = METADATA_NODE + "/metadata/dam:scene7File",
        SCENE7_FILE_AVS_PROP = METADATA_NODE + "/metadata/dam:scene7FileAvs",
        SCENE7_FILE_AVS = "videoavs",
        JCR_NODE = javax.jcr.Node.JCR_CONTENT,
        PRODUCT_MEMBER_PROP = "areAllMembersProducts",
        PATH_TO_VTT_RELATED = "jcr:content/related/vtt/sling:members/",
        SVIDEO_VTT_EXT = ".svideo.vtt",
        VIEWER_PRESET_JCR = "/libs/dam/viewers/default/jcr:content",
        PROP_KEY = {
            sdkRoot : "sdkRootPath",
            sdkVersion: "sdkVersion",
            viewerRoot: "viewerRootPath",
            viewerVersion: "viewerVersion",
            lastReplication: "cq:lastReplicationAction"
        },
        SUPPORT_TYPE = {
            'carouselset': 'CarouselViewer',
            'video': 'InteractiveVideoViewer',
            'videoavs': 'InteractiveVideoViewer',
            'image': 'InteractiveImage'
        },
    //OOTB Default viewer preset as fallback except image CQ-74275
        OOTB_DEFAULT_VP = {
            "video": "/conf/global/settings/dam/dm/presets/viewer/Shoppable_Video_Dark|INTERACTIVE_VIDEO|false",
            "videoavs": "/conf/global/settings/dam/dm/presets/viewer/Shoppable_Video_Dark|INTERACTIVE_VIDEO|false",
            "carouselset": "/conf/global/settings/dam/dm/presets/viewer/Carousel_Dotted_light|CAROUSEL_SET|false",
            "image": "/conf/global/settings/dam/dm/presets/viewer/Shoppable_Banner|INTERACTIVE_IMAGE|false"
        },
    //String representing empty viewer preset
        EMPTY_VP = "||";


    //locale
    var pageLocale = inheritedPageProperties["jcr:language"];
    if (!pageLocale) {
        pageLocale = "en"; //default to English when page doesn't have language setup.
    }

    // flags
    var isDMEnabled;
    var isS7Enabled;

    // check Is DM enabled?
    if (sling.getService(org.apache.sling.featureflags.Features).getFeature(DM_FEATURE_FLAG) == null) {
        isDMEnabled = false;
    }
    else {
        isDMEnabled = sling.getService(org.apache.sling.featureflags.Features).isEnabled(DM_FEATURE_FLAG);
    }

    // check Is S7 enabled?
    if (sling.getService(org.apache.sling.featureflags.Features).getFeature(SCENE7_FEATURE_FLAG) == null) {
        isS7Enabled = false;
    }
    else {
        isS7Enabled = sling.getService(org.apache.sling.featureflags.Features).isEnabled(SCENE7_FEATURE_FLAG);
    }

    //Is WCM mode disabled? - for publish side
    var isWCMDisabled = (com.day.cq.wcm.api.WCMMode.fromRequest(request) == com.day.cq.wcm.api.WCMMode.DISABLED);

    //Adding variable to remove ambiguity caused by ln (!isS7Enabled && isWCMDisabled) below..
    var isS7Remote = isS7Enabled;

    //Is the editor in touchUI mode? 
    var isTouchUI = com.day.cq.wcm.foundation.Placeholder.isAuthoringUIModeTouch(request);
    var placeholderCSS = EDITOR_CONST.DD_TARGET;
    if (isTouchUI) {
        placeholderCSS = EDITOR_CONST.TOUCHUI_PLACEHOLDER + placeholderCSS;
    }
    else if (!isWCMDisabled) {
        placeholderCSS += EDITOR_CONST.CLASSIC_PLACEHOLDER
    }

    //Current component ID
    var componentId = "interactivemedia_" + getHashCode(resource.getPath());

    var viewerNode = null,
        s7sdkPath = "",
        viewerPath = "",
        s7viewerPath = "";
    if (currentSession.nodeExists(VIEWER_PRESET_JCR)) {
        viewerNode = currentSession.getNode(VIEWER_PRESET_JCR);
        var sdkRootPath = viewerNode.getProperty(PROP_KEY.sdkRoot).getString();
        var sdkVersion = viewerNode.getProperty(PROP_KEY.sdkVersion).getString();
        var viewerRootPath = viewerNode.getProperty(PROP_KEY.viewerRoot).getString();
        var viewerVersion = viewerNode.getProperty(PROP_KEY.viewerVersion).getString();
        s7sdkPath = request.contextPath + sdkRootPath + sdkVersion + "/js/",
            s7viewerPath = request.contextPath + viewerRootPath + viewerVersion + "/";
    }

    //Asset Info
    var fileReference = properties['./fileReference'],
        assetID = fileReference,
        assetNode = null,
        assetName = "",
        assetType = "",
        isRemoteAsset = false,
        s7assetType = "",
        svideoVTTPath = "",
        viewerPreset = properties['viewerPreset'],
        width = properties['width'],
        height = properties['height'],
        stageSize = "",
        containedOnlyCommerceProd = true,
        viewerPresetPath = viewerPreset,
        viewerPresetName = "";

    //default viewer preset from design dialog 
    var defaultVP = {
        "video": currentStyle['./defVPInteractiveVideo'],
        "videoavs": currentStyle['./defVPInteractiveVideo'],
        "image": currentStyle['./defVPInteractiveImage'],
        "carouselset": currentStyle['./defVPCarouselSet']
    };

    if (fileReference && currentSession.nodeExists(fileReference) ) {

        assetNode = currentSession.getNode(fileReference);
        assetName = assetNode.getName();
        if( assetNode.hasProperty(METADATA_NODE + "/" + S7_TYPE_NODE)) {
            assetType = assetNode.getProperty(METADATA_NODE + "/" + S7_TYPE_NODE).getString();
            s7assetType = assetType;
            assetType = assetType.toLowerCase();
        }

        if(isWCMDisabled) {
            assetID = properties["./assetID"];
        }
        else { //author node
            if (s7assetType == "") {
            	//non-DM has no s7assetType - reset selected assset to empty
                assetID = "";
            }
            else {
                // check if this is a remote asset
                if( assetNode.hasProperty(SCENE7_FILE_PROP)) {
                    if(assetType.equals(SCENE7_FILE_AVS) && assetNode.hasProperty(SCENE7_FILE_AVS_PROP)) {
                        assetID = assetNode.getProperty(SCENE7_FILE_AVS_PROP).getString();
                    }
                    else {
                        assetID = assetNode.getProperty(SCENE7_FILE_PROP).getString();
                    }
                    isRemoteAsset = true;
                }
            }
        }
    }

    if(isWCMDisabled) {
        svideoVTTPath = properties["./svideoVTTPath"];
        containedOnlyCommerceProd = properties["./containedOnlyCommerceProd"];
    }
    else if ( assetNode != null && (assetType == SCENE7_FILE_AVS || assetType == 'video')) {
        var svideoVTTRelPath = PATH_TO_VTT_RELATED + assetName + SVIDEO_VTT_EXT;
        if (assetNode.hasNode(svideoVTTRelPath)) {
            var svideoVTTRelNode = assetNode.getNode(svideoVTTRelPath);
            if (svideoVTTRelNode.hasProperty("sling:resource")) {

                svideoVTTPath = svideoVTTRelNode.getProperty("sling:resource").getString();

                // check to see if this is a remote asset if so use the scene7File instead of path
                if(isRemoteAsset && currentSession.nodeExists(svideoVTTPath)) {
                    var vttNode = currentSession.getNode(svideoVTTPath);

                    if(vttNode.hasProperty(SCENE7_FILE_PROP)) {
                        svideoVTTPath = vttNode.getProperty(SCENE7_FILE_PROP).getString();
                    }
                }
            }
        }
        //Check areAllMembersProducts for commerce product
        if (assetNode.hasProperty(METADATA_NODE + "/metadata/" + PRODUCT_MEMBER_PROP)) {
            containedOnlyCommerceProd = assetNode.getProperty(METADATA_NODE + "/metadata/" + PRODUCT_MEMBER_PROP).getString();
        }
    }

    //Author side only to save extra parameters to be used in publish side
    if (!isWCMDisabled) {
        //default viewer preset fallback
        if (!viewerPreset || viewerPreset == EMPTY_VP) {
            viewerPreset = defaultVP[assetType]; //fallback to default settings from design mode
            if (!viewerPreset || viewerPreset == EMPTY_VP) {
                viewerPreset = OOTB_DEFAULT_VP[assetType]; //fallback to OOTB viewer preset
            }
        }

        //get rid of existing viewer preset if the type is not matched
        if (!isMatchedViewerPreset(assetType, viewerPreset)) {
          viewerPreset = "";
          viewerPresetPath = "";
        }

        if (viewerPreset) {
            var vpPath = viewerPreset.substring(0, viewerPreset.indexOf("|"));
            if (currentSession.nodeExists(vpPath)) {
                var vpNode = currentSession.getNode(vpPath);

                if (vpNode.hasProperty(SCENE7_FILE_PROP)) {
                  viewerPresetPath = viewerPreset.replace(vpPath, "/" + vpNode.getProperty(SCENE7_FILE_PROP).getString());
                }
                if (vpNode.hasProperty(SCENE7_FILE_AVS_PROP)) {
                  viewerPresetPath = viewerPreset.replace(vpPath, "/" + vpNode.getProperty(SCENE7_FILE_AVS_PROP).getString());
                }

                // Required to make custom viewer preset css work
                // Viewer preset editor add preset name as a class to preset's css
                viewerPresetName = vpNode.getName();
            }
        }

        var props = resource.adaptTo(org.apache.sling.api.resource.ModifiableValueMap);
        props.put("assetID", assetID);
        props.put("containedOnlyCommerceProd", containedOnlyCommerceProd);
        props.put("assetType", s7assetType);
        props.put("imageserverurl", getPublishImageServerURL(fileReference, isRemoteAsset, isWCMDisabled));
        props.put("svideoVTTPath", svideoVTTPath);
        props.put("videoserverurl", getPublicVideoServerURL(isWCMDisabled, fileReference, isRemoteAsset));
        props.put("viewerPreset", viewerPreset || "");
        props.put("viewerPresetName", viewerPresetName || "");

        if (s7assetType == "") {
            //non-DM has no s7assetType - reset selected asset to empty
            props.put("fileReference", "");
        }

        if(isS7Enabled) {
            props.put("viewerPresetS7File", viewerPresetPath || "");
        }

        //make sure viewer is returned from delivery server if DMS7 runmode
        if(isS7Remote) {
        		viewerPath = getPublishImageServerURL(fileReference, isRemoteAsset);
            viewerPath += s7viewerPath.replace("/etc/dam/viewers/","");
            viewerPath = viewerPath.replace("/is/image", "");
            //save viewer path
            props.put("viewerPath", viewerPath);
        }

        resource.getResourceResolver().commit();
    }
    else {
    		//Update viewer path if applicable
        if(properties["viewerPath"]) {
          s7viewerPath = properties["viewerPath"];
        }

        //for publish side we don't have runmode so we rely on fileReference not match with ID
        if (assetID != fileReference) {
            isS7Enabled = true;
        }

        if (properties["./viewerPresetS7File"]) {
            viewerPresetPath = properties["./viewerPresetS7File"];
        }

        viewerPresetName = properties["./viewerPresetName"];
    }

    if (!width && width != 0) {
        width = -1;
    }
    if (!height && height != 0) {
        height = -1;
    }

    if (width > -1 && height > -1) {
        stageSize = width + "," + height;
    }

    // Convert preset name to kebab case to get preset class
    var viewerPresetClass = viewerPresetName ? viewerPresetName.replace(/([a-z0-9])([A-Z])/g, "$1-$2").toLowerCase() : ""

    return {
        componentId: componentId,
        isDMEnabled: isDMEnabled,
        isS7Enabled: isS7Enabled,
        isWCMDisabled: isWCMDisabled,
        pageLocale: pageLocale,
        className: "s7dm-interactive-media " + viewerPresetClass,
        placeholder: {
            dropCSS: EDITOR_CONST.DD_TARGET,
            css: placeholderCSS,
            text: component.title
        },
        asset: {
            path: assetID,
            name: assetName,
            s7damType: assetType,
            imageserver: getImageServerURL(isWCMDisabled, assetID),
            videoserver: getVideoServerURL(isWCMDisabled, isRemoteAsset),
            contenturl: getContentURL(isWCMDisabled, getImageServerURL(isWCMDisabled, assetID), request.contextPath, viewerPresetPath, isS7Enabled),
            config: viewerPresetPath,
            viewerType: getViewer(SUPPORT_TYPE, assetType),
            viewerPath: s7viewerPath,
            showProductAsset: properties['showProductAsset'],
            showProductPrice: properties['showProductPrice'],
            showProductForm: properties['showProductForm'],
            interactiveData: svideoVTTPath,
            onlyCommerceProd: containedOnlyCommerceProd,
            stageSize: stageSize
        }
    };
});

/**
 * Get Hashcode to be used as ID .. copy from DHTML viewer sj_textloader.js
 * @param d data to get hash code
 * @return UNIX style hash code
 */
function getHashCode(d){
    if (!d || d == "")
        return 1;
    var h = 0, g = 0;
    for (var i = d.length - 1; i >= 0; i--) {
        var c = parseInt(d.charCodeAt(i));
        h = ((h << 6) & 0xfffffff) + c + (c << 14);
        if ((g = h & 0xfe00000) != 0)
            h = (h ^ (g >> 21));
    }
    return h;
};

/**
 * @param typeList modified type list that this component support
 * @param assetType current asset type
 * @return true if the asset type is supported by the current component
 */
function isSupportType(typeList, assetType){
    if (typeList[assetType]) {
        return true;
    }
    return false;
}

/**
 * @param typeList modified type list that this component support
 * @param assetType current asset type
 * @return viewer constructor
 */
function getViewer(typeList, assetType){
    if (isSupportType(typeList, assetType)) {
        return typeList[assetType];
    }
    else {
        return "";
    }
}

function getImageServerURL(isWCMDisabled, assetPath){
    var imageServerURL = "";
    if (isWCMDisabled) {
        imageServerURL = properties['imageserverurl'];
    }
    else {
        imageServerURL = request.contextPath + "/is/image/";
    }
    return imageServerURL;
}

/**
 * @param isWCMDisabled
 * @param isRemote
 * @return video server URL depending on WCM disabled
 */
function getVideoServerURL(isWCMDisabled, isRemote){
    var videoServerURL = "";
    if (isWCMDisabled) {
        videoServerURL = properties['videoserverurl'];
    }
    else {
        videoServerURL = getPrivateVideoServerURL();
    }
    return videoServerURL;
}

/**
 * @param isWCMDisabled is WCM in disabled mode
 * @param imageServer image server url
 * @param contextPath
 * @param viewerPreset viewer preset string
 * @return content URL for static content (CSS, static viewer assets)
 */
function getContentURL(isWCMDisabled, imageServer, contextPath, viewerPreset, isS7Enabled){
    var contentPath = "/";
    if (isCustomPreset(viewerPreset)) {
        if (isWCMDisabled) {
            contentPath = imageServer.replace("/is/image", "/is/content");
        } else {
            contentPath = contextPath + "/is/content";
        }
    } else {
        if (isS7Enabled){
            //DMS7 case
            if (isWCMDisabled) {
                //Publish DMS7 - we got the content from publish IS
                contentPath = imageServer.replace("is/image", "is/content");
            }
            else {
                //Author DMS7 - we got the content from IS proxy
                contentPath = contextPath + "/is/content";
            }
        }
        else {
            //DM Hybrid - always get OOTB from publish AEM
            contentPath = contextPath + "/";
        }
    }
    return contentPath;
}

/**
 * @return video proxy URL
 */
function getVideoProxyURL() {
    var videoProxyURL = com.day.cq.dam.commons.util.DynamicMediaServicesConfigUtil.getServiceUrl(resource.getResourceResolver());
    if (videoProxyURL != null){
        if (!videoProxyURL.endsWith("/")) {
            //Adjust path by adding trailing /
            videoProxyURL += "/";
        }
        return videoProxyURL;
    }
    return "";
}

/**
 * @return public video server URL
 */
function getPublicVideoServerURL(isWCMDisabled, assetPath, isRemote) {

    if(isWCMDisabled) {
        return properties['videoserverurl'];
    }
    else if(isRemote) {
        var productionImageServerUrl = "";
        var assetResource = resource.getResourceResolver().getResource("/"+assetPath);
        var serverUrl = sling.getService(com.day.cq.dam.api.s7dam.utils.PublishUtils).externalizeImageDeliveryAsset(assetResource, "");
        serverUrl = serverUrl.replace("is/image","is/content");
        return serverUrl;
    }
    else {
        var videoProxyURL = getVideoProxyURL();
        if (videoProxyURL != null && videoProxyURL != "") {
            //get video public key for publish instance
            var videoPublicKey = com.day.cq.dam.commons.util.DynamicMediaServicesConfigUtil.getPublicKey(resource.getResourceResolver());
            if (videoPublicKey != null) {
                return videoProxyURL + "public/" + videoPublicKey;
            }
        }
    }
    return "";
}

/**
 * @param isRemote - is remote asset?
 * @return private video server URL
 */
function getPrivateVideoServerURL(isRemote) {
    if (isRemote) {
        //remote video served via forwarder proxy
        return "/is/content/";
    }
    var videoProxyURL = getVideoProxyURL();
    if (videoProxyURL != null && videoProxyURL != "") {
        //get video registration ID for temporary token
        var videoRegistrationId = com.day.cq.dam.commons.util.DynamicMediaServicesConfigUtil.getRegistrationId(resource.getResourceResolver());
        if (videoRegistrationId != null && videoRegistrationId.contains("|")){
            videoRegistrationId = videoRegistrationId.substring(0, videoRegistrationId.indexOf("|"));
        }
        if (videoRegistrationId != null) {
            return videoProxyURL + "private/" + videoRegistrationId;
        }
    }
    return "";
}

/**
 * @return publish image server URL
 */
function getPublishImageServerURL(assetPath, isRemote, isWCMDisabled) {

    var assetResource = resource.getResourceResolver().getResource("/"+assetPath);
    var productionImageServerUrl = "";

    if(isWCMDisabled) {
        return properties['imageserverurl'];
    }
    else if(isRemote && assetResource) {
        // get publish server
        return sling.getService(com.day.cq.dam.api.s7dam.utils.PublishUtils).externalizeImageDeliveryAsset(assetResource, "");
    }
    else {

        var defImageServerUrl = request.contextPath + "/is/image/"; //default embed IS
        var publishUtils = sling.getService(com.day.cq.dam.api.s7dam.utils.PublishUtils);
        productionImageServerUrl = publishUtils.externalizeImageDeliveryUrl(resource, defImageServerUrl);
    }
    return productionImageServerUrl;
}


/**
 * Check viewer preset type matching asset type
 * @param assetType
 * @param viewerPreset viewer preset string
 * @return true if the viewer preset can be used for the current asset
 */
function isMatchedViewerPreset(assetType, viewerPreset){
    var VIEWERPRESET_ASSETTYPE = {
        'video': 'interactive_video',
        'videoavs': 'interactive_video',
        'image': 'interactive_image',
        'carouselset': 'carousel_set',
        'none': ''
    };
    var presetParts = [],
        presetType = "none";
    if (viewerPreset) {
        presetParts = viewerPreset.split('|');
    }
    if (presetParts.length > 1){
        presetType = presetParts[1].toLowerCase();
    }
    return VIEWERPRESET_ASSETTYPE[assetType] == presetType;
}

/**
 * Is the viewer preset a custom preset?
 * @param viewerPreset viewer preset string
 * @return true if the preset is custom
 */
function isCustomPreset(viewerPreset){
    var presetParts = [];
    if (!viewerPreset) {
        return false;
    }
    else {
        presetParts = viewerPreset.split('|');
        if (presetParts.length > 2) {
            if (presetParts[2] == "") {
                return false;
            }
            else {
                return (presetParts[2] == "true");
            }
        }
        else {
            return false;
        }
    }
}
