/*
 * ADOBE CONFIDENTIAL
 *
 * Copyright 2020 Adobe Systems Incorporated
 * All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
 */
//CoralComponentFactory component
(function($){
    'use strict';

    var _self;

    // Initialize CoralComponentFactory
    function CoralComponentFactory(options) {
        this.init(options);
    }

    CoralComponentFactory.prototype.init = function(options) {

        _self = this;

        // This is the easiest way to have default options.
        var settings = $.extend({}, options );
    }

    // Add CoralComponentFactory to global namespace
    CoralComponentFactory.prototype.getComponentValue = function($cmp) {
        return $cmp.getVal();
    }


    /***
     * CORAL Field Wrapper
     */
    CoralComponentFactory.prototype.createFieldwrapper = function(options) {

        // field wrapper class name
        var className = options.className     || "";
        var wrapperClass = "coral-Form-fieldwrapper" + " " + className;

        // if additional classes are passed in, append to class
        if (options.classList) {
            wrapperClass += options.classList;
        }

        // create field wrapper
        var $fieldWrapper = $("<div></div>")
            .prop( "class", wrapperClass);

        if (options.label) {
            if (options.labelCss) {
                // hack to get style attribute in for checkbox
                var $fieldLabel = $(`<label ${options.labelCss}></label>`)
                .prop( "class", "coral-Form-fieldlabel");
            } else {
                var $fieldLabel = $("<label></label>")
                .prop( "class", "coral-Form-fieldlabel");
            }
            $fieldLabel.html(options.label);
        }

        // append label to fieldwrapper
        $fieldWrapper.append($fieldLabel);

        // add tooltip if applicable
        if (options.tooltip) {
            this.createToolTip({"tooltip": options.tooltip, "$wrapper": $fieldWrapper});
        }

        // return field wrapper
        return $fieldWrapper;
    }

    /** CORAL ICON **/
    CoralComponentFactory.prototype.createToolTip = function(options) {
        var placement   = options.placement || "top";
        var size        = options.icon      || "XS";
        var src         = options.src       || "infoCircle";
        var target      = options.target    || "_prev";
        var tooltip      = options.tooltip    || "Here is the tooltip";
        var $wrapper    = options.$wrapper   || undefined;

        var icon = new Coral.Icon().set({
            icon: src,
            placement: placement,
            target: target,
            size: size
          });

        var $icon = $(icon);

        if ($wrapper) {
            $wrapper.append($icon);
        }

        var tooltip = new Coral.Tooltip().set({
            content: {
              innerHTML: tooltip
            },
            placement: "top",
            target: target
          });

        $wrapper.append(tooltip);

        // return icon
        return $icon;
    }

    /***
     * CORAL AUTOCOMPLETE
     */
    CoralComponentFactory.prototype.createAutoComplete = function(options) {
        var className  = options.className || "";
        var items = options.items;
        var label = options.label   || "";
        var placeholder = options.prompt     || "Enter a word";
        var values = options.values;

        // auto complete
        var autoComplete = new Coral.Autocomplete().set({
            placeholder: placeholder,
            match: "startswith"
        });

        // add items if applicable
        if (items) {
            var len = items.length;
            for(var i = 0; i < len; i++) {
                autoComplete.items.add({
                    value: items[i],
                    content: {
                      innerHTML: items[i]
                    }
                  });
            }
        }

        // create field wrapper
        var $fieldWrapper = this.createFieldwrapper({"label":label, "className":className});

        // set class name and data
        var $autoComplete = $(autoComplete);
        $autoComplete.addClass(className);
        $autoComplete.data("items", []);
        $autoComplete.data("$tagWrapper", $fieldWrapper);

        // add autocomplete field wrapper
        $fieldWrapper.append($autoComplete);

        //
        if (values) {
            var len = values.length;
            for(var i = 0; i < len; i++) {

                // get previously added items
                var items = $autoComplete.data("items");

                // if item has already been added, bail.
                if (values[i].length > 0 && !items.includes(values[i])) {

                    // add item
                    items.push(values[i]);

                    // create coral tag
                    this.createTag({"$wrapper" : $($autoComplete).data("$tagWrapper"), eventTarget:$autoComplete, value: values[i], label: values[i]});

                }
            }
        }

        // handle events --> track mime filter changes
        $($autoComplete).on('change', function() {

            // get previously added items
            var items = $(this).data("items");

            // if item has already been added, bail.
            if (this.value.length > 0 && !items.includes(this.value)) {

                // add item
                items.push(this.value);

                // create coral tag
                _self.createTag({"$wrapper" : $($autoComplete).data("$tagWrapper"), value: this.value, label: this.value});

            }
            // clear text field
            $(this).find("input").val("");
        });
        options.$wrapper.append($fieldWrapper);

        // return component
        return $autoComplete;
    }
    
    /***
     * CAMERA CHOOSER
     */
    CoralComponentFactory.prototype.createCameraChooser = function(options) {
    	var className  = options.className || "";
    	var items = options.items;
    	var label = options.label   || "";
    	var placeholder = options.prompt     || "Enter a word";
    	var values = options.values;
    	
    	// auto complete
    	var autoComplete = new Coral.Autocomplete().set({
    		placeholder: placeholder,
    		match: "startswith"
    	});
    	
    	// add items if applicable
    	if (items) {
    		var len = items.length;
    		for(var i = 0; i < len; i++) {
    			autoComplete.items.add({
    				value: items[i].value,
    				content: {
    					innerHTML: items[i].label
    				}
    			});
    		}
    	}

    	// create field wrapper
    	var $fieldWrapper = this.createFieldwrapper({"label":label, "className":className, "tooltip":options.tooltip});
    
    	// set class name and data
    	var $autoComplete = $(autoComplete);
    	$autoComplete.addClass(className);
    	$autoComplete.data("items", []);
    	$autoComplete.data("$tagWrapper", $fieldWrapper);

    	// add autocomplete field wrapper
    	$fieldWrapper.append($autoComplete);

    	//
    	if (values) {
    		var len = values.length;
    		for(var i = 0; i < len; i++) {
    			
    			// get previously added items
    			var items = $autoComplete.data("items");

    			// if item has already been added, bail.
    			if (typeof values[i] === "object" && values[i].label) {

    				// add item
    				items.push(values[i]);

    				// create coral tag
    				this.createTag({"$wrapper" : $($autoComplete).data("$tagWrapper"), eventTarget:$autoComplete, value: values[i].value, label: values[i].label});
    			}
    		}
    	}
    	
    	// handle events --> track mime filter changes
    	$($autoComplete).on('change', function() {
    		
    		// get previously added items
    		var items = $(this).data("items");
    		var $selectedItem = $(this.selectedItem);
    		var val = $selectedItem.attr("value");
    		var label = $selectedItem.text();
    		
    		
    		// if item has already been added, bail.
    		if (val && !JSON.stringify(items).includes(val)) {
    			
    			// add item
    			items.push({
                    value: val,
                    label: label
                });

    			_self.createTag({"$wrapper" : $($autoComplete).data("$tagWrapper"), eventTarget:$(this), value: val, label: label});

                // notify
                $(this).change();
    		}
    		// clear text field
    		$(this).find("input").val("");
    	});
    	options.$wrapper.append($fieldWrapper);
    	
    	// return component
    	return $autoComplete;
    }

    /***
     * CORAL Tag
     */
    CoralComponentFactory.prototype.createTag = function(options) {

        // target to notify change happened
        var $eventTarget = options.eventTarget;

        // create coral tag
        var tag = new Coral.Tag().set({
            label: {
              innerHTML: options.label
            },
            value: options.value
          });

        // add listener for tag removal
        $(tag).off("click").on("click", function() {
            // remove from items collection
            var items = $(this).parent().find("coral-autocomplete").data("items");
            for (var i = 0; i < items.length; i++) {
                var value = $(this).val();
                if (typeof items[i] === "object" && items[i].value) {
                    if (value === items[i].value) {
                        items.splice(i, 1);
                        break;
                    }
                }
                else if (value === items[i]) {
                    items.splice(i, 1);
                    break;
                }
            }
            // remove listener and tag
            $(this).remove();

            // trigger change event from target component
            if ($eventTarget) {
                $eventTarget.trigger("tagremoved");
            }
        });
        $(tag).removeClass("tag");
        $(tag).addClass("tag");

        options.$wrapper.append(tag);

        // return field wrapper
        return tag;
    }

    /***
     * CORAL BUTTON
     */
    CoralComponentFactory.prototype.createButton = function(options) {

        var className  = options.className || "";
        var id  = options.id || "";
        var label = options.label   || "";
        var variant = options.variant || "quiet";

        var button = new Coral.Button().set({
            label: {
              innerHTML: label
            },
            id: id,
            variant: variant
          });
        // add class
        $(button).addClass(className);

        // add to wrapper
        options.$wrapper.append(button);

        return $(button);
    }

    /***
     * CORAL ICON BUTTON
     */
    CoralComponentFactory.prototype.createIconButton = function(options) {

        var id  = options.id || "";
        var className  = options.className || "";
        var icon = options.icon     || "";
        var label = options.label   || "";
        var size = options.size     || "";
        var variant = options.variant     || "quiet";

        var button = new Coral.Button().set({
            label: {
                innerHTML: label
            },
            icon: icon,
            id: id,
            iconSize: size,
            variant: variant
        });
        var $button = $(button);
        // add class
        $button.addClass(className);

        options.$wrapper.append(button);

        return $button;
    }


    /***
     * CORAL NumberInput
     */
    CoralComponentFactory.prototype.createNumberInput = function(options) {

        var id  = options.id || "0";
        var className  = options.className || "";
        var label = options.label || "";
        var min = options.min || 1;
        var max = options.max || 10000;
        var value = options.value || "";

        var numberInput = new Coral.NumberInput().set({
            id: id,
            placeholder: "Enter a number",
            value: value,
            min: min,
            max: max
        });
        var $numberInput = $(numberInput);
        // add class
        $numberInput.addClass(className);

        // if there is a label defined create formfield wrapper
        if (label) {
            var $fieldWrapper = this.createFieldwrapper(options);
            $numberInput = $fieldWrapper.append($numberInput);
        }

        // append field
        options.$wrapper.append($numberInput);
    }

    CoralComponentFactory.prototype.createTextfield = function(options) {
        var className  = options.className          || "";
        var errorMessage  = options.errorMessage    || "Please fill out this field.";
        var label  = options.label                  || "";
        var name  = options.name                    || "";
        var placeholder = options.placeholder       || "";
        var required = options.required             || false;
        var value = options.value                   || "";
        // var validator = options.validator           || "";

        var textfield = new Coral.Textfield().set({
            placeholder: placeholder,
            name: name,
            value: value,
            required: required
        });
        var $textfield = $(textfield);

        if (required) {
            $textfield.setCustomValidity(errorMessage);
        }

        if (options.data) {
            $textfield.data(options.data);
        }

        $textfield.addClass(className);

        // if there is a label defined create formfield wrapper
        if (label) {
            var $fieldWrapper = this.createFieldwrapper({"label":label, "className":className, "tooltip":options.tooltip});
            $textfield = $fieldWrapper.append($textfield);
        }

        options.$wrapper.append($textfield);

        return $textfield
    }


    /***
     * CORAL SELECT CONTROL
     */
    CoralComponentFactory.prototype.createSelectControl = function(options, data, val) {
        var className  = options.className || "";
        var label  = options.label || "";
        // options
        options.id = options.id || "select0",
        options.name = options.name || "Select",
        options.placeholder = options.placeholder ||"Choose an item";

        var select = new Coral.Select().set(options);
        var $select = $(select);

        // if there is a label defined create formfield wrapper
        if (label) {
            var $fieldWrapper = this.createFieldwrapper({"label":label, "className":className});
            $fieldWrapper.append($select);
        }

        // populate
        options.$wrapper.append($fieldWrapper);

        if (data) {
            addSelectControlItems(data, $select);

            // set select value
            if (val) {
                $select.val(val);
            }
        }
        return $select;
    }

    CoralComponentFactory.prototype.removeSelectItems = function($select) {
        var select = $select.get(0);
        var data = select.items.getAll();
        data.forEach(function(value, index) {
            select.items.remove(value);
        });
    }

    function addSelectControlItems(data, $select) {
        var select = $select.get(0);
        data.forEach(function(value, index) {
            select.items.add(value);
        });
    }


    /***
     * CORAL Slider
     */
    CoralComponentFactory.prototype.createSlider = function(options) {

        var icon = options.icon     || "";
        var label = options.label   || "";
        var size = options.size     || "";

        var slider = new Coral.Slider().set({
            placeholder: "Enter a number",
            name: "field"
        });

        options.$wrapper.append(slider);
    }


    /***
     * CORAL Switch
     */
    CoralComponentFactory.prototype.createSwitch = function(options) {

        var className = options.className;
        var label = options.label;

        // create field wrapper if label is defined
        var $fieldWrapper = this.createFieldwrapper({label:label});

        // coral switch
        var coralSwitch = new Coral.Switch();

        // add class
        var $switch = $(coralSwitch);
        $switch.addClass(className);

        $fieldWrapper.append($switch);
        options.$wrapper.append($fieldWrapper);

        return $switch;
    }

    /***
     * CORAL Checkbox
     */
    CoralComponentFactory.prototype.createCheckBox = function(options) {

        var className = options.className || "";
        var label = options.label || "";
        var checked = options.checked || false;

        // create field wrapper if label is defined
        var $fieldWrapper = this.createFieldwrapper({label:label, labelCss:'style="width:100%;"', className: this.className, tooltip:options.tooltip});

        // create coral tag
        var coralCheckbox = new Coral.Checkbox().set({ checked: checked});

        // add class
        var $checkbox = $(coralCheckbox);
        $checkbox.addClass(className);
        
        $fieldWrapper.append($("<br/>"));
        $fieldWrapper.append($checkbox);
        options.$wrapper.append($fieldWrapper);

        return $checkbox;
    }

    // Add CoralComponentFactory to global namespace
    window.CoralComponentFactory = CoralComponentFactory;
}(jQuery));