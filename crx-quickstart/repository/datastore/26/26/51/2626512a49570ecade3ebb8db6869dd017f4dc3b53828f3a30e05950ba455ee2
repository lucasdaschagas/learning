/*
 * Copyright 1997-2011 Day Management AG
 * Barfuesserplatz 6, 4001 Basel, Switzerland
 * All Rights Reserved.
 *
 * This software is the confidential and proprietary information of
 * Day Management AG, ("Confidential Information"). You shall not
 * disclose such Confidential Information and shall use it only in
 * accordance with the terms of the license agreement you entered into
 * with Day.
 */

/**
 * @class CQ.form.ImageMap.Helpers
 * @static
 * @private
 * This static class provides helper functions used by the image map component.
 */
CQ.form.ImageMap.Helpers = function() {

    return {

        /**
         * Checks if the specified relative intersection coordinate (either horizontal or
         * vertical) is inside the valid range (0< to deltaValue if deltaValue &gt; 0; else
         * deltaValue to 0.
         * @param {Number} intersectValue relative (to the respective line start coordinate)
         *        intersection coordinate to check
         * @param {Number} deltaValue range to check
         */
        checkIntersection: function(intersectValue, deltaValue) {
            if (deltaValue < 0) {
                return (intersectValue > deltaValue) && (intersectValue <= 0);
            } else {
                return (intersectValue >= 0) && (intersectValue < deltaValue);
            }
        },

        /**
         * Calculates the distance for lines that do not extend in one dimension (vertical
         * and horizontal lines).
         * @param {Number} paraDist Distance to the line in the dimension the line does not
         *        extend (for vertical lines: horizontal coordinate)
         * @param {Number} orthDist Distance to the line in the orthogonal dimension (for
         *        vertical lines: vertical coordinate)
         * @param {Number} orthDelta Extent of the line (for vertical lines: vertical length
         *        of the line)
         * @return {Number} The correct distance in pixels
         */
        calculateNoAngledDistance: function(paraDist, orthDist, orthDelta) {
            var distance = Math.abs(paraDist);
            var otherEndDist = orthDist - orthDelta;
            if (orthDelta < 0) {
                if (orthDist > 0) {
                    distance = Math.sqrt(Math.pow(orthDist, 2) + Math.pow(paraDist, 2));
                } else if (orthDist < orthDelta) {
                    distance = Math.sqrt(Math.pow(otherEndDist, 2) + Math.pow(paraDist, 2));
                }
            } else {
                if (orthDist < 0) {
                    distance = Math.sqrt(Math.pow(orthDist, 2) + Math.pow(paraDist, 2));
                } else if (orthDist > orthDelta) {
                    distance = Math.sqrt(Math.pow(otherEndDist, 2) + Math.pow(paraDist, 2));
                }
            }
            return distance;
        },

        /**
         * <p>Calculates the distance of a point to a specified line.</p>
         * <p>The distance is calculated using the orthogonal. If no orthogonal exists, the
         * minimum distance of the point to one of the extreme line points is used.</p>
         * @param {Object} lineStart Starting point of the line (properties x, y)
         * @param {Object} lineEnd Ending point of the line (properties x, y)
         * @param {Object} point Point for which the distance has to be calculated;
         *        (properties x, y)
         * @return {Number} The distance of the point to the specified line
         */
        calculateDistance: function(lineStart, lineEnd, point) {
            var xOrigin = lineStart.x;
            var yOrigin = lineStart.y;
            var deltaX = lineEnd.x - xOrigin;
            var deltaY = lineEnd.y - yOrigin;
            var xDist = point.x - xOrigin;
            var yDist = point.y - yOrigin;
            if ((Math.abs(deltaX) > 0) && (Math.abs(deltaY) > 0)) {
                // lines with angles != 0, 90, 180, 270 degrees
                var slope = deltaY / deltaX;
                var invSlope = 1 / slope;
                var intersectionX = (xDist * invSlope + yDist) / (slope + invSlope);
                var intersectionY = intersectionX * slope;
                var hasIntersection =
                    CQ.form.ImageMap.Helpers.checkIntersection(intersectionX, deltaX)
                    && CQ.form.ImageMap.Helpers.checkIntersection(intersectionY, deltaY);
                if (hasIntersection) {
                    return Math.sqrt(Math.pow(intersectionX - xDist, 2)
                        + Math.pow(yDist - intersectionY, 2));
                } else {
                    // if no intersection could be detected, use the minimal distance to
                    // one of the extreme points of the line
                    var distStart = Math.sqrt(Math.pow(xDist, 2) + Math.pow(yDist, 2));
                    var distEnd = Math.sqrt(
                        Math.pow(xDist - deltaX, 2) + Math.pow(yDist - deltaY, 2));
                    return (distStart < distEnd ? distStart : distEnd);
                }
            } else {
                // lines with angles == 0, 90, 180, 270 degrees
                if ((deltaX == 0) && (deltaY == 0)) {
                    // point
                    return Math.sqrt(Math.pow(xDist, 2), Math.pow(yDist, 2));
                } else if (deltaX == 0) {
                    // vertical line
                    return CQ.form.ImageMap.Helpers
                            .calculateNoAngledDistance(xDist, yDist, deltaY);
                } else {
                    // horizontal line
                    return CQ.form.ImageMap.Helpers
                            .calculateNoAngledDistance(yDist, xDist, deltaX);
                }
            }
        },

        /**
         * Calculates the distance of a point to a specified circle's outline.
         * @param {Object} circleDef Circle definition (properties: x, y [specifying the
         *        circle's center] and radius)
         * @param {Point} point Point (properties: x, y)
         * @return {Number} The distance of the point to the specified line
         */
        calculateDistanceToCircle: function(circleDef, point) {
            var deltaX = point.x - circleDef.x;
            var deltaY = point.y - circleDef.y;
            var slope = deltaY / deltaX;
            if ((deltaX != 0) && (deltaY != 0)) {
                var angle = Math.atan(slope);
                var outlineX = Math.cos(angle) * circleDef.radius;
                var outlineY = Math.sin(angle) * circleDef.radius;
                if (deltaX < 0) {
                    outlineY = -outlineY;
                    outlineX = -outlineX;
                }
                var diffX = outlineX - deltaX;
                var diffY = outlineY - deltaY;
                return Math.sqrt(Math.pow(diffX, 2) + Math.pow(diffY, 2));
            } else {
                return Math.abs(deltaY - circleDef.radius);
            }
        },

        /**
         * Compacts the specified array: All elements of value null will be removed, the
         * array size will be adjusted accordingly.
         * @param {Array} arrayToCompact array to compact
         */
        compactArray: function(arrayToCompact) {
            var elementCnt = arrayToCompact.length;
            var destIndex = 0;
            for (var compactIndex = 0; compactIndex < elementCnt; compactIndex++) {
                if (arrayToCompact[compactIndex] != null) {
                    if (compactIndex != destIndex) {
                        arrayToCompact[destIndex] = arrayToCompact[compactIndex];
                    }
                    destIndex++;
                }
            }
            arrayToCompact.length = destIndex;
        },

        /**
         * <p>Encodes the specified string as follows:</p>
         * <ul>
         * <li>""" will be encoded to "\""</li>
         * <li>"[" will be encoded to "\["</li>
         * <li>"]" will be encoded to "\]"</li>
         * <li>"\" will be encoded to "\\"</li>
         * <li>"|" will be encoded to "\|"</li>
         * </ul>
         * @param {String} str String to encode
         * @return {String} The encoded string
         */
        encodeString: function(str) {
            var charCnt = str.length;
            var destStr = "";
            var copyPos = 0;
            for (var charIndex = 0; charIndex < charCnt; charIndex++) {
                var charToCheck = str.charAt(charIndex);
                var escapedChar = null;
                switch (charToCheck) {
                    case '\\':
                        escapedChar = "\\\\";
                        break;
                    case '\"':
                        escapedChar = "\\\"";
                        break;
                    case '[':
                        escapedChar = "\\[";
                        break;
                    case ']':
                        escapedChar = "\\]";
                        break;
                    case '|':
                        escapedChar = "\\|";
                        break;
                }
                if (escapedChar != null) {
                    if (copyPos < charIndex) {
                        destStr += str.substring(copyPos, charIndex);
                    }
                    destStr += escapedChar;
                    copyPos = charIndex + 1;
                }
            }
            if (copyPos < charCnt) {
                destStr += str.substring(copyPos, charCnt);
            }
            return destStr;
        },

        /**
         * <p>Decodes a string (encoded using {@link #encodeString}) that is contained in
         * another string. The (partial) string to parse has to be enclosed in quotation
         * marks.</p>
         * <p>For example:<br>
         * decodeFromContainingString("x:\&quot;abc\\&quot;\&quot;", 2)<br>
         * will return<br>
         * { "decoded": "abc&quot;", "nextPos": 9 }</p>
         * @param {String} containingString The containing string
         * @param {Number} parseStartPos The position where parsing should start
         * @return {Object} The decoding result; properties decoded (the decoded string),
         *         nextPos (the first character position after the closing quotation);
         *         null if no string could have been decoded
         */
        decodeFromContainingString: function(containingString, parseStartPos) {
            var quotPos = containingString.indexOf("\"", parseStartPos);
            if (quotPos < 0) {
                return null;
            }
            var isDone = false;
            var currentCharPos = quotPos + 1;
            var text = "";
            var isEscaped = false;
            while (!isDone) {
                var charToProcess = containingString.charAt(currentCharPos);
                if ((charToProcess == '\"') && (!isEscaped)) {
                    isDone = true;
                } else if (charToProcess == '\\') {
                    if (isEscaped) {
                        text += "\\";
                        isEscaped = false;
                    } else {
                        isEscaped = true;
                    }
                } else if (isEscaped) {
                    text += charToProcess;
                    isEscaped = false;
                } else {
                    text += charToProcess;
                }
                currentCharPos++;
                if ((currentCharPos >= containingString.length) && (!isDone)) {
                    return null;
                }
            }
            return { "decoded": text, "nextPos": currentCharPos };
        },

        /**
         * Parses a coordinate from a containing string, starting at the specified position.
         * @param {String} str The containing string
         * @param {Number} parseStartPos The (character) position where parsing will begin
         * @return {Object} properties: coordinate, nextPos (next parsing position) and
         *         isError (set to true if there was a parsing error); null if no more
         *         coordinates could have been parsed
         */
        parseCoordinateFromContainingString: function(str, parseStartPos) {
            var strLen = str.length;
            var processingPos = parseStartPos;
            // skip leasing spaces
            while (processingPos < strLen) {
                var charToCheck = str.charAt(processingPos);
                if (charToCheck != " ") {
                    break;
                }
                processingPos++;
            }
            if (processingPos >= strLen) {
                return null;
            }
            var result = new Object();
            result.isError = false;
            // determine type of coordinate
            if (str.charAt(processingPos) == "(") {
                // coordinate pair
                var coordEndPos = str.indexOf(")", processingPos + 1);
                if (coordEndPos < 0) {
                    result.isError = true;
                    return result;
                }
                var coords = str.substring(processingPos + 1, coordEndPos);
                var coordArray = coords.split("/");
                if (coordArray.length != 2) {
                    result.isError = true;
                    return result;
                }
                var x = parseInt(coordArray[0]);
                var y = parseInt(coordArray[1]);
                if (isNaN(x) || isNaN(y)) {
                    result.isError = true;
                    return result;
                }
                result.coordinates = { "x": x, "y": y };
                result.isCoordinatesPair = true;
                processingPos = coordEndPos + 1;
            } else {
                // special notation
                var sepPos = str.indexOf(":", processingPos);
                if (sepPos < (processingPos + 1)) {
                    result.isError = true;
                    return result;
                }
                var key = str.substring(processingPos, sepPos);
                var endPosSpace = str.indexOf(" ", sepPos + 1);
                var endPosBrace = str.indexOf("(", sepPos + 1);
                var value;
                if ((endPosSpace >= 0) && (endPosBrace >= 0)) {
                    if (endPosSpace < endPosBrace) {
                        value = str.substring(sepPos + 1, endPosSpace);
                        processingPos = endPosSpace;
                    } else {
                        value = str.substring(sepPos + 1, endPosBrace);
                        processingPos = endPosBrace;
                    }
                } else if (endPosSpace >= 0) {
                    value = str.substring(sepPos + 1, endPosSpace);
                    processingPos = endPosSpace;
                } else if (endPosBrace >= 0) {
                    value = str.substring(sepPos + 1, endPosBrace);
                    processingPos = endPosBrace;
                } else {
                    if ((sepPos + 1) >= str.length) {
                        result.isError = true;
                        return result;
                    }
                    value = str.substring(sepPos + 1, str.length);
                    processingPos = str.length;
                }
                if (key == "r") {
                    // radius
                    var radius = parseInt(value);
                    if (isNaN(radius)) {
                        result.isError = true;
                        return result;
                    }
                    result.coordinates = { "radius" : radius };
                    result.isCoordinatesPair = false;
                } else {
                    result.isError = true;
                    return result;
                }
            }
            result.nextPos = processingPos;
            return result;
        },

        /**
         * Parses a coordinate string and returns a list of coordinates.
         * @param {String} str string to parse
         * @return {Object} Properties: coordinates (Array with coordinate objects
         *         [properties: x, y or radius if a radius was specified],
         *         coordinatesPairCnt (number of coordinate pairs; may differ from the size
         *         of the coordinates object, if a radius or such has been specified));
         *         null if an invalid coordinate string has been specified
         */
        parseCoordinateString: function(str) {
            var coords = new Array();
            var parsePos = 0;
            var coordinatesPairCnt = 0;
            while (parsePos >= 0) {
                var parsePart = CQ.form.ImageMap.Helpers
                        .parseCoordinateFromContainingString(str, parsePos);
                if (parsePart != null) {
                    if (parsePart.isError) {
                        return null;
                    }
                    coords[coords.length] = parsePart.coordinates;
                    if (parsePart.isCoordinatesPair) {
                        coordinatesPairCnt++;
                    }
                    parsePos = parsePart.nextPos;
                } else {
                    // we are done here
                    parsePos = -1;
                }
            }
            return { "coordinates": coords, "coordinatesPairCnt": coordinatesPairCnt };
        },

        /**
         * Parses a CSS "rect" definition (Format: "rect([top] [right] [bottom] [left])";
         * currently no parsing tolerance regarding the format implemented).
         * @param {String} rectDef The CSS "rect" definition to parse
         * @return {Object} The parsed values; properties: top, left, bottom, right
         */
        parseRectDef: function(rectDef) {
            var clipDef = null;
            var startPos = rectDef.indexOf("(");
            if (startPos >= 0) {
                var endPos = rectDef.indexOf(")", startPos + 1);
                if (endPos > startPos) {
                    var clipDefStr = rectDef.substring(startPos + 1, endPos);
                    var clipDefCoords = clipDefStr.split(" ");
                    if (clipDefCoords.length == 4) {
                        clipDef = new Object();
                        clipDef.top = clipDefCoords[0];
                        clipDef.left = clipDefCoords[3];
                        clipDef.bottom = clipDefCoords[2];
                        clipDef.right = clipDefCoords[1];
                    }
                }
            }
            return clipDef;
        }

    };
}();