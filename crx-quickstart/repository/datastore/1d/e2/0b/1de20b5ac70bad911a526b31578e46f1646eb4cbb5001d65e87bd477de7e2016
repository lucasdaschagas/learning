/*************************************************************************
 * ADOBE CONFIDENTIAL
 * ___________________
 *
 * Copyright 2019 Adobe
 * All Rights Reserved.
 *
 * NOTICE: All information contained herein is, and remains
 * the property of Adobe and its suppliers, if any. The intellectual
 * and technical concepts contained herein are proprietary to Adobe
 * and its suppliers and are protected by all applicable intellectual
 * property laws, including trade secret and copyright laws.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe.
 **************************************************************************/
(function(window, $) {
    "use strict";
    // This is code to adapt CoralUI component to foundation-field
    // i.e. `$(coralEl).adaptTo("foundation-field")`

    // Note that some of the implementations below are not completely implementing foundation-field API
    // due to the lack of API in the underlying Coral widgets.
    // If there is a need to support the missing implementation, either Coral needs to be enhanced first,
    // or our implementation needs to do an extra length to do it on behalf.

    function createGenericIsInvalid(el) {
        return function() {
            return el.attr("aria-invalid") === "true";
        };
    }

    function createGenericSetInvalid(el) {
        return function(value) {
            el.attr("aria-invalid", "" + value).toggleClass("is-invalid", value);
        };
    }

    function createGetter(cui, name) {
        return function() {
            return cui.get(name);
        };
    }

    function createSetter(cui, name) {
        return function(value) {
            cui.set(name, value);
        };
    }

    var registry = $(window).adaptTo("foundation-registry");


    registry.register("foundation.adapters", {
        type: "foundation-field",
        selector: ".coral-Textfield:not([is='coral-textfield']):not([is='coral-textarea'])",
        adapter: function(el) {
            return {
                getName: function() {
                    return el.name;
                },
                setName: function(name) {
                    el.name = name;
                },
                isDisabled: function() {
                    return el.disabled;
                },
                setDisabled: function(disabled) {
                    el.disabled = disabled;
                },
                isInvalid: function() {
                    return el.getAttribute("aria-invalid") === "true";
                },
                setInvalid: function(invalid) {
                    el.setAttribute("aria-invalid", invalid ? "true" : "false");
                    $(el).toggleClass("is-invalid", invalid);
                },
                isRequired: function() {
                    return el.getAttribute("aria-required") === "true";
                },
                setRequired: function(required) {
                    el.setAttribute("aria-required", required ? "true" : "false");
                },
                getValue: function() {
                    return el.value;
                },
                setValue: function(value) {
                    el.value = value;
                },
                getLabelledBy: function() {
                    return el.getAttribute("aria-labelledby");
                },
                setLabelledBy: function(labelledBy) {
                    if (labelledBy) {
                        el.setAttribute("aria-labelledby", labelledBy);
                    } else {
                        el.removeAttribute("aria-labelledby");
                    }
                },
                getValues: function() {
                    return [ this.getValue() ];
                },
                setValues: function(values) {
                    el.value = values[0];
                }
            };
        }
    });

    registry.register("foundation.adapters", {
        type: "foundation-field",
        selector: ".coral-DatePicker",
        adapter: function(el) {
            var field = $(el);
            var cui = field.data("datepicker");
            var input = field.find(".coral-InputGroup-input");
            var inputFieldAPI = input.adaptTo("foundation-field");

            return {
                isDisabled: createGetter(cui, "disabled"),
                setDisabled: createSetter(cui, "disabled"),
                isInvalid: createGetter(cui, "hasError"),
                setInvalid: createSetter(cui, "hasError"),
                isRequired: createGetter(cui, "required"),
                setRequired: createSetter(cui, "required"),
                getLabelledBy: inputFieldAPI.getLabelledBy,
                setLabelledBy: inputFieldAPI.setLabelledBy
            };
        }
    });

    registry.register("foundation.adapters", {
        type: "foundation-field",
        selector: ".coral-FileUpload",
        adapter: function(el) {
            var field = $(el);
            var cui = field.data("fileupload");
            var button = field.find(".coral-FileUpload-trigger");
            var input = field.find(".coral-FileUpload-input");
            var inputFieldAPI = input.adaptTo("foundation-field");

            return {
                isDisabled: createGetter(cui, "disabled"),
                setDisabled: createSetter(cui, "disabled"),
                isInvalid: createGenericIsInvalid(button),
                setInvalid: createGenericSetInvalid(button),
                getLabelledBy: inputFieldAPI.getLabelledBy,
                setLabelledBy: inputFieldAPI.setLabelledBy
            };
        }
    });

    registry.register("foundation.adapters", {
        type: "foundation-field",
        selector: ".coral-NumberInput",
        adapter: function(el) {
            var field = $(el);
            var cui = field.data("numberInput");
            var input = field.find(".coral-InputGroup-input");
            var inputFieldAPI = input.adaptTo("foundation-field");

            return {
                isDisabled: createGetter(cui, "disabled"),
                setDisabled: createSetter(cui, "disabled"),
                isInvalid: createGetter(cui, "hasError"),
                setInvalid: createSetter(cui, "hasError"),
                getLabelledBy: inputFieldAPI.getLabelledBy,
                setLabelledBy: inputFieldAPI.setLabelledBy
            };
        }
    });

    registry.register("foundation.adapters", {
        type: "foundation-field",
        selector: ".coral-Selector",
        adapter: function(el) {
            var field = $(el);

            return {
                isDisabled: function() {
                    field.find(".coral-Selector-input").each(function() {
                        if (!this.disabled) {
                            return false;
                        }
                    });
                    return true;
                },
                setDisabled: function(disabled) {
                    field.find(".coral-Selector-input").each(function() {
                        this.disabled = disabled;
                    });
                },
                isInvalid: createGenericIsInvalid(field),
                setInvalid: createGenericSetInvalid(field),
                getLabelledBy: function() {
                    var elements = field.find(".coral-Selector-input");
                    if (elements.length > 0) {
                        return elements[0].getAttribute("aria-labelledby");
                    } else {
                        return null;
                    }
                },
                setLabelledBy: function(labelledBy) {
                    field.find(".coral-Selector-input").each(function() {
                        if (labelledBy) {
                            this.setAttribute("aria-labelledby", labelledBy);
                        } else {
                            this.removeAttribute("aria-labelledby");
                        }
                    });
                }
            };
        }
    });

    registry.register("foundation.adapters", {
        type: "foundation-field",
        selector: ".coral-Slider",
        adapter: function(el) {
            var field = $(el);
            var cui = field.data("slider");
            var input = field.find(".coral-Slider-value input");
            var inputFieldAPI = input.adaptTo("foundation-field");

            return {
                isDisabled: createGetter(cui, "disabled"),
                setDisabled: createSetter(cui, "disabled"),
                isInvalid: createGenericIsInvalid(field),
                setInvalid: createGenericSetInvalid(field),
                getLabelledBy: inputFieldAPI.getLabelledBy,
                setLabelledBy: inputFieldAPI.setLabelledBy
            };
        }
    });

    registry.register("foundation.adapters", {
        type: "foundation-field",
        selector: ".coral-Switch",
        adapter: function(el) {
            var field = $(el);
            var input = field.children(".coral-Switch-input");
            var inputFieldAPI = input.adaptTo("foundation-field");

            // gets the internal labels since their id should not be surfaced
            var internalLabelIds = field
                .children(".coral-Switch-offLabel,.coral-Switch-onLabel")
                .map(function() {
                    return this.id;
                })
                .toArray()
                .join("|");

            var internalLabelIdsRegex = new RegExp(internalLabelIds, "g");

            return {
                isDisabled: function() {
                    return input.prop("disabled");
                },
                setDisabled: function(disabled) {
                    input.prop("disabled", disabled);
                },
                isInvalid: createGenericIsInvalid(input),
                setInvalid: createGenericSetInvalid(input),
                getLabelledBy: function() {
                    var label = inputFieldAPI.getLabelledBy();

                    if (label) {
                        label = label
                            .replace(internalLabelIdsRegex, "")
                            .trim();
                    }

                    return label === "" ? null : label;
                },
                setLabelledBy: function(value) {
                    var finalValue = value;

                    // makes sure that the external label, does not interfere with the internal ones
                    var currentLabel = inputFieldAPI.getLabelledBy();

                    var internalLabels = currentLabel ? currentLabel.match(internalLabelIdsRegex) : null;

                    // "match" can return null if no values are matched
                    if (internalLabels) {
                        finalValue = internalLabels.join(" ").trim() + (value ? " " + value : "");
                    }

                    inputFieldAPI.setLabelledBy(finalValue);
                }
            };
        }
    });

    registry.register("foundation.adapters", {
        type: "foundation-field",
        selector: ".coral-Checkbox:not(coral-checkbox)",
        adapter: function(el) {
            var field = $(el);
            var input = field.children(".coral-Checkbox-input");
            var inputFieldAPI = input.adaptTo("foundation-field");

            return {
                isDisabled: function() {
                    return input.prop("disabled");
                },
                setDisabled: function(disabled) {
                    field.children(".coral-Checkbox-input, input[type=hidden][name*='@']").each(function() {
                        this.disabled = disabled;
                    });
                },
                isInvalid: createGenericIsInvalid(input),
                setInvalid: createGenericSetInvalid(input),
                getLabelledBy: inputFieldAPI.getLabelledBy,
                setLabelledBy: inputFieldAPI.setLabelledBy
            };
        }
    });

    registry.register("foundation.adapters", {
        type: "foundation-field",
        selector: ".coral-Select",
        adapter: function(el) {
            var field = $(el);
            var button = field.children(".coral-Select-button");
            var select = field.children(".coral-Select-select");
            var inputFieldAPI = select.adaptTo("foundation-field");

            return {
                isDisabled: function() {
                    return select.prop("disabled");
                },
                setDisabled: function(disabled) {
                    button.prop("disabled", disabled);
                    select.prop("disabled", disabled);

                    field.children("input[type=hidden][name*='@']").each(function() {
                        this.disabled = disabled;
                    });
                },
                isInvalid: createGenericIsInvalid(button),
                setInvalid: createGenericSetInvalid(button),
                getLabelledBy: inputFieldAPI.getLabelledBy,
                setLabelledBy: inputFieldAPI.setLabelledBy
            };
        }
    });

    registry.register("foundation.adapters", {
        type: "foundation-field",
        selector: ".coral-Multifield:not(coral-multifield)",
        adapter: function(el) {
            var multifield = $(el);

            return {
                setDisabled: function(disabled) {
                    // eslint-disable-next-line max-len
                    var inputs = multifield.find(".js-coral-Multifield-list > .js-coral-Multifield-input > *:first-child");
                    inputs.each(function() {
                        var api = $(this).adaptTo("foundation-field");
                        if (api && api.setDisabled) {
                            api.setDisabled(disabled);
                        }
                    });
                },
                getLabelledBy: function() {
                    // eslint-disable-next-line max-len
                    var inputs = multifield.find(".js-coral-Multifield-list > .js-coral-Multifield-input > *:first-child");
                    var labelledBy = Array.prototype.reduce.call(inputs, function(memo, item) {
                        var api = $(item).adaptTo("foundation-field");
                        if (api && api.getLabelledBy) {
                            memo.push(api.getLabelledBy());
                        }
                        return memo;
                    }, []);

                    if (labelledBy.length) {
                        return labelledBy[0];
                    } else {
                        return null;
                    }
                },
                setLabelledBy: function(labelledBy) {
                    // eslint-disable-next-line max-len
                    var inputs = multifield.find(".js-coral-Multifield-list > .js-coral-Multifield-input > *:first-child");
                    inputs.each(function() {
                        var api = $(this).adaptTo("foundation-field");
                        if (api && api.setLabelledBy) {
                            api.setLabelledBy(labelledBy);
                        }
                    });
                }
            };
        }
    });

    registry.register("foundation.adapters", {
        type: "foundation-field",
        selector: ".coral-TagList",
        adapter: function(el) {
            var field = $(el);
            var cui = field.data("tagList");

            return {
                getName: function() {
                    return el.getAttribute("data-fieldname") || "";
                },
                setName: function(value) {
                    el.setAttribute("data-fieldname", value);

                    field.children("input[type=hidden][name*='@']").each(function() {
                        this.name = value;
                    });
                },
                isDisabled: function() {
                    return !!cui.get("disabled");
                },
                setDisabled: function(disabled) {
                    cui.set("disabled", disabled);
                },
                isInvalid: function() {
                    return el.getAttribute("aria-invalid") === "true";
                },
                setInvalid: function(invalid) {
                    el.setAttribute("aria-invalid", invalid ? "true" : "false");
                    field.toggleClass("is-invalid", invalid);
                },
                isRequired: function() {
                    return el.getAttribute("aria-required") === "true";
                },
                setRequired: function(required) {
                    el.setAttribute("aria-required", required ? "true" : "false");
                }
            };
        }
    });

    registry.register("foundation.adapters", {
        type: "foundation-field",
        selector: ".coral-ColorPicker",
        adapter: function(el) {
            var field = $(el);
            var cui = field.data("colorpicker");
            var $hiddenField = field.children("input[type='hidden']");

            return {
                getName: function() {
                    return field.data("name");
                },
                setName: function(name) {
                    $hiddenField.prop("name", name);
                    field.data("name", name);
                },
                isDisabled: createGetter(cui, "disabled"),
                setDisabled: function(disabled) {
                    $hiddenField.prop("disabled", disabled);
                    field.children(".coral-ColorPicker-button").prop("disabled", disabled);
                    cui.set("disabled", disabled);
                }
            };
        }
    });
})(window, Granite.$);
