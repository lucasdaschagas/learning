 /**
 *
 * ADOBE CONFIDENTIAL
 * __________________
 *
 *  Copyright 2017 Adobe Systems Incorporated
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
 */

(function (window, document, Granite, $, undefined) {

    "use strict";

    //
    // Property editing
    //

    function _updateCurrentSelectedFieldLabelDescriptor(value) {
        var f,
            field = $('#form-fields').find(".ui-selected")[0],
            type = $(field).data('rendertype'),
            id = $(field).data('id'),
            required = $('.field-properties[data-id=' + id + ']').find('.required').prop('checked');
        if (type === "text" || type === "number" || type === "hidden" || type === "datepicker" || type === "dropdown" || type ==="tab") {
            f = $(field).find('.coral-Form-fieldlabel');
            if (f.length) {
                if (required) {
                    f.text(value + " *");
                } else {
                    f.text(value);
                }
            } else if ($(field).find('.formbuilder-content-form span').length) {
                var $textValue = $(field).find('.formbuilder-content-form span');
                if (required){
                    $textValue.text(value + " *");
                } else {
                    $textValue.text(value);
                }
            } else {
                var $fieldLabel = $(field).find('.formbuilder-content-form .fieldlabel');
                if (required) {
                    $fieldLabel.text(value + " *");
                } else {
                    $fieldLabel.text(value);
                }
            }
        } else if (type === "section") {
            var $sectionFieldLabel = $(field).find('.formbuilder-content-form h3');
            if (required){
                $sectionFieldLabel.text(value + " *");
            } else {
                $sectionFieldLabel.text(value);
            }
        } else if (type === "checkbox") {
            f = $(field).find('.coral-Checkbox-description');
            if (f.length) {
                if(required) {
                    f.text(value + " *");
                } else {
                    f.text(value);
                }
            }
        }
    }

    // Update field label
    $(document).on('propertychange input paste', ".field-label-descriptor", function () {
        _updateCurrentSelectedFieldLabelDescriptor(this.value);
    });

    // Update field placeholder
    $(document).on('propertychange input paste', ".field-placeholder-descriptor", function () {
        var field = $('#form-fields').find(".ui-selected")[0],
            type = $(field).data('rendertype');
        if (type === "text" || type === "number" || type === "datepicker") {
            var multiTextField = $(field).find(".cfm-multieditor");
            if (multiTextField.length > 0) {
                $(field).find('.cfm-modeleditor-preview').text(this.value);
            } else {
                $(field).find('input').attr('placeholder', this.value);
            }
        }
        if (type === "dropdown") {
            $(field).find("coral-select").attr('placeholder', this.value);
        }
    });

    // Update default value
    $(document).on('propertychange keyup input paste change', ".field-default-descriptor", function () {
        var field = $('#form-fields').find(".ui-selected")[0],
            type = $(field).data('rendertype');
        if (type === "text" || type === "number" || type === "hidden") {
            $(field).find('.formbuilder-content-form input[type="text"]').val(this.value);
        }
    });

    // Update default date value
    $(document).on('propertychange keyup input paste change', '.field-default-descriptor.default-datepicker', function () {
        var field = $('#form-fields').find(".ui-selected")[0],
            type = $(field).data('rendertype');
        if (type === "datepicker") {
            // Get the full ISO-8601 formatted value from the default date picker.
            var value = $(this).closest('.default-datepicker')[0].value;

            // Based on the pickerType, format the value to the resp. semantic format
            var pickerType = $(this).closest('.default-datepicker')[0].type;
            var semanticValue = moment(value, datePickerProperties[pickerType].valueFormatForDefaultValue)
                .format(datePickerProperties[pickerType].valueFormat);

            // Set the formatted semantic value to the resp. date picker in the view.
            $(field).find('coral-datepicker')[0].value = semanticValue;
        }
    });

    // Update default checkbox value
    $(document).on('propertychange keyup input paste change', ".field-default-descriptor.default-checkbox", function () {
        var field = $('#form-fields').find(".ui-selected")[0];
        if ($(this)[0].checked) {
            $(field).find('input:checkbox').prop('checked', true);
        } else {
            $(field).find('input:checkbox').prop('checked', false);
        }
    });

    // Update default content reference value
    $(document).on('propertychange keyup input paste change', "foundation-autocomplete.field-default-descriptor", function() {
        var field = $('#form-fields').find(".ui-selected")[0],
            $this = $(this).find('[foundation-autocomplete-value]')[0];
        // on IE, an input event is triggered on page load, when no component has been
        // selected yet, which leads to an error; therefore check if there is a selected
        // field
        if (field) {
            $(field).find('foundation-autocomplete > [foundation-autocomplete-value]')[0].value = $this.value;
        }
    });

    // Update field text property
    $(document).on('propertychange keyup input paste', ".field-text-descriptor", function () {
        var field = $('#form-fields').find(".ui-selected")[0],
            type = $(field).data('rendertype');
        if (type === "checkbox") {
            var f = $(field).find('.formbuilder-content-form');
            if (!f.find('.foundation-field-edit').length) {
                f.find("coral-checkbox")[0].label.textContent = this.value;
            } else {
                f.find('.foundation-field-edit span').text(this.value);
            }
        }
    });

    // Update field instructions
    $(document).on('propertychange keyup input paste', ".field-instructions-descriptor", function () {
        var field = $('#form-fields').find(".ui-selected")[0],
            type = $(field).data('rendertype');
        if (type === "text" || type === "number") {
            $(field).find('coral-tooltip-content').text(this.value);
        } else if (type === "section") {
            $(field).find('.formbuilder-content-form span').text(this.value);
        }
    });

    // determines the correct value type from the current value type + the selected target
    // resource type
    function determineValueType(renderValue, type) {
        var startPos = renderValue.indexOf("[]");
        if (startPos > 0) {
            renderValue = renderValue.substring(0, startPos);
        }
        if (type.indexOf("multifield") >= 0 || type.indexOf("multicheckbox") >= 0) {
            renderValue += "[]";
        }
        return renderValue;
    }

    function enableDisableMultifieldProperties(fieldProperties, disabled) {

        var dataPropertiesForMultifield = fieldProperties.find('div[data-property-for*=multifield]');

        dataPropertiesForMultifield.each(function() {
            $(this).find('input').each(function() {
                if(disabled) {
                    $(this).attr('disabled', 'true');
                } else {
                    $(this).removeAttr('disabled');
                }
           });
        });

    }

    function showHideMultifieldProperties(container, multifieldEnabled) {
        var elementsToToggle = container.find('[data-multifield-toggle]');

        elementsToToggle.each(function() {
            if ((this.dataset.multifieldToggle === "show" && !multifieldEnabled) ||
                (this.dataset.multifieldToggle !== "show" && multifieldEnabled)) {
                this.setAttribute("hidden", "");
            } else {
                this.removeAttribute("hidden");
            }
        });
    }

    // Update valueType based on the renderAs resourceType
    $(document).on('change', ".field-resourceType-descriptor", function () {
        // get the input that should also change
        var fieldProperties = $(this).closest('.field-properties'),
            $renderValueInput = fieldProperties.find('input[name*="valueType"]');
        // find the renderValue
        var renderValue = $renderValueInput.attr("value");
        if (!renderValue) {
            renderValue = $(this).find('coral-select-item[value="' + this.value + '"]').attr('renderValue');
        }
        var valueType = determineValueType(renderValue, this.value);
        $renderValueInput.attr('value', valueType);
        var enable = (valueType.indexOf("[]") >= 0);
        if (this.value.indexOf("multicheckbox") >= 0) {
            enable = false
        }
        enableDisableMultifieldProperties(fieldProperties, !enable);
        showHideMultifieldProperties(fieldProperties, enable);
    });

    // Update valueType based on number type field
    $(document).on('change', '#number-Value-Select', function (event) {
        var selected = event.currentTarget.value;
        // get the input that should change
        var $renderValueInput = $(this).closest('.field-properties').find('input[name*="valueType"]');
        var currentValue = $renderValueInput.attr("value");
        var suffix = (currentValue.indexOf("[]") >= 0 ? "[]" : "");
        //update the value input
        $renderValueInput.attr('value', selected + suffix);

        var step;
        if(selected == "long") {
            step = "1";
        } else {
            step = "any";
        }

        var $defaultNumberValue = $(this).closest('.field-properties').find('.field-default-descriptor');
        $defaultNumberValue.attr("step", step);
        $defaultNumberValue.adaptTo('foundation-validation').checkValidity();
        $defaultNumberValue.adaptTo('foundation-validation').updateUI();
        $(this).closest('.field-properties').find('input#numberFieldStep').attr('value',step);


    });

    // function to update value in the hidden form
    function updateHiddenValue(event) {

        var value = event.currentTarget.value;
        var hiddenFieldSelector = event.currentTarget.name;
        var $correspondingInput = $('.form-fields [name=\"'+hiddenFieldSelector+'\"]');

        if($correspondingInput) {
            $.each($correspondingInput, function(index, object){
               $(object).attr('value', value);
            });
        }
    }

    // make sure property name gets updated in the hidden form; This should change after we change Model Editor forms
    $(document).on('propertychange keyup input paste', '.tab-form-settings .field-propertyName-descriptor', updateHiddenValue);

    // if the field is marked as required, put the required marker on the label
    $(document).on('change', '.form-properties .required', function(event) {

        var $tabFormSettings = $(event.currentTarget.closest('#builder-form'));
        var fieldDescriptorValue = $tabFormSettings.find('.field-properties-selected .field-label-descriptor')[0].value;
        _updateCurrentSelectedFieldLabelDescriptor(fieldDescriptorValue);

    });


    // properties used for date and time
    var datePickerProperties = {
        datetime: {
            displayedFormat: 'YYYY-MM-DD HH:mm',
            placeholder: 'YYYY-MM-DD HH:mm',
            valueType: 'calendar/datetime',
            valueFormat: 'YYYY-MM-DD[T]HH:mm:ss.000Z',
            valueFormatForDefaultValue: 'YYYY-MM-DD[T]HH:mm:ss.000Z',
            emptyText: 'YYYY-MM-DD HH:mm'
        },
        date: {
            displayedFormat: 'YYYY-MM-DD',
            placeholder: 'YYYY-MM-DD',
            valueType: 'calendar/date',
            valueFormat: 'YYYY-MM-DD',
            valueFormatForDefaultValue: 'YYYY-MM-DD[T]00:00:00.000+00:00',
            emptyText: 'YYYY-MM-DD'
        },
        time: {
            displayedFormat: 'HH:mm',
            placeholder: 'HH:mm',
            valueType: 'calendar/time',
            valueFormat: 'HH:mm',
            valueFormatForDefaultValue: '1970-01-01[T]HH:mm:00.000+00:00',
            emptyText: 'HH:mm'
        }
    };

    // update the default date picker and the date picker in the view to reflect date or time
    $(document).on('change', '#date-type-select', function(event){

        var $target = $(event.target);

        // picker views
        var fieldProperties = $target.closest('.field-properties'),
            id = $(fieldProperties).data('id'),
            defaultDatePicker = $(fieldProperties).find('.default-datepicker'),
            viewDatePicker = $('#form-builder-view .field[data-id='+ id + ']').find('.coral-Form-field'),
            value = $target.find('[selected]').attr('value');

        // picker inputs
        var valueTypeInput = $(fieldProperties).find('input[name*=valueType]'),
            valueFormatInput = $(fieldProperties).find('input[name*=valueFormat]'),
            displayedFormatInput = $(fieldProperties).find('input[name*=displayedFormat]'),
            emptyTextFormatInput = $(fieldProperties).find('input[name*=emptyText]');

        if(value && (value === 'datetime' || value === 'date' || value === 'time')) {
            viewDatePicker.attr('type', value);
            defaultDatePicker.attr('type', value);

            viewDatePicker.attr('displayformat', datePickerProperties[value].displayedFormat);
            defaultDatePicker.attr('displayformat', datePickerProperties[value].displayedFormat);

            viewDatePicker.attr('valueformat', datePickerProperties[value].valueFormat);
            defaultDatePicker.attr('valueformat', datePickerProperties[value].valueFormatForDefaultValue);

            viewDatePicker.attr('placeholder', datePickerProperties[value].placeholder);

            valueTypeInput.attr('value', datePickerProperties[value].valueType);
            valueFormatInput.attr('value', datePickerProperties[value].valueFormat);
            displayedFormatInput.attr('value', datePickerProperties[value].displayedFormat);
            emptyTextFormatInput.attr('value', datePickerProperties[value].emptyText);
        }
    });

    // Add Validation for Property Name field
    $(window).adaptTo('foundation-registry').register('foundation.validation.validator', {
        selector: '[data-foundation-validation=field-propertyName-validator]',
        validate: function(propertyNameField) {
            var input = propertyNameField.value;

            if(input === '') {
                return Granite.I18n.get('Field cannot be empty.');
            }

            // GraphQL supports only letters, digits and "_" sign in property name
            // https://github.com/graphql/graphql-spec/blob/master/spec/Section%202%20--%20Language.md#names
            if((/[^_0-9A-Za-z]/gm).test(input)) {
                return Granite.I18n.get('Property name must contain only Latin letters, digits and "_" sign.');
            }

            // Property name must start with Latin letter or "_" sign
            if((/^[^_A-Za-z]/gm).test(input)) {
                return Granite.I18n.get('Property name must start with Latin letter or "_" sign.');
            }

            // check if the property name was already used
            var propertyNameFields = $('input.field-propertyName-descriptor');
            for(var i = 0; i < propertyNameFields.length; i++) {
                if(propertyNameFields[i].value === input && propertyNameFields[i].name !== propertyNameField.name) {
                    return Granite.I18n.get('There is already an element with this property name.');
                }
            }
        }
    });

    $(window).adaptTo('foundation-registry').register('foundation.validation.validator', {
        selector: '[data-foundation-validation=field-optionLabel-validator]',
        validate: function(optionLabelField) {
            var input = optionLabelField.value;

            if(input === '') {
                return Granite.I18n.get('Option label cannot be empty');
            }
        }
    });

    $(window).adaptTo('foundation-registry').register('foundation.validation.validator', {
        selector: '[data-foundation-validation=field-optionValue-validator]',
        validate: function(optionValueField) {
            var input = optionValueField.value;

            if(input === '') {
                return Granite.I18n.get('Option value cannot be empty');
            }
        }
    });

})(window, document, Granite, Granite.$);
