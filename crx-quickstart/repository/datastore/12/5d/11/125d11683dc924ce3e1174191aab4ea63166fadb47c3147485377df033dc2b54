/*
 * ADOBE CONFIDENTIAL
 *
 * Copyright 2016 Adobe Systems Incorporated
 * All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
 */
(function (window, document, Granite, $) {
    "use strict";
    var ui = $(window).adaptTo("foundation-ui");
    $(document).on("foundation-contentloaded", function () {

        var selectableRow = $('.all-live-copies-row-selectable');
        var selectableCol = $('.all-live-copies-cell-selectable');
        var cellSelectionActions = $('.cq-wcm-msm-all-live-copies-cellselection-action');
        var deSelectButton = $('.granite-collection-deselect');
        var deSelectCloseButton = $('.granite-collection-deselect > coral-icon');
        var actionBar = $('.foundation-mode-switcher-item');
        var sourcePathCells = $('.all-live-copies-source-path');
        var liveCopyRollout = $('.cq-wcm-msm-all-live-copies-livecopy-rollout-activator');
        var tableSelectbutton = $('coral-checkbox[coral-table-select]');

        selectableCol = updateColAttr(selectableCol);

        selectableCol.on("click", function (e) {


            if (!this.hasAttribute('coral-table-cellselect')) {
                return;
            }

            var selectedCells = $('.all-live-copies-cell-selectable[selected]');

            if (selectedCells.length == 0) {
                // remove row selection
                //show single selection action

                actionBar.addClass('foundation-mode-switcher-item-active');
                deSelectButton.addClass('foundation-collection-action-hidden');
                // default all cell selection actions should be hidden
                cellSelectionActions.addClass('foundation-collection-action-hidden');
                enableCellSelectionAction(this);

            } else {
                if (selectedCells[0] == this) {
                    // all cell selection has been removed now
                    //remove cell selection action
                    //enable row selection

                    actionBar.removeClass('foundation-mode-switcher-item-active');
                    cellSelectionActions.addClass('foundation-collection-action-hidden');
                    deSelectButton.removeClass('foundation-collection-action-hidden');

                } else if (isRowSame(this, selectedCells[0])) {

                    cellSelectionActions.addClass('foundation-collection-action-hidden');
                    enableCellSelectionAction(this);

                } else {
                    // new cell has been selected
                    //remove all selections
                    // enable only muli selection action
                    //currently there is no multi cell selection actions so hide all actions
                    //TODO if multi cell selection exists
                    $(selectedCells[0]).removeClass('is-selected');
                    $(selectedCells[0]).removeAttr('selected');
                    cellSelectionActions.addClass('foundation-collection-action-hidden');
                    enableCellSelectionAction(this);
                }


            }


        });

        selectableRow.on("click", function (e) {

            var selectedCells = $('.all-live-copies-cell-selectable[selected]');

            cellSelectionActions.addClass('foundation-collection-action-hidden');
            if ($(this).parent('tr').hasClass('is-selected')) {
                // same row has been clicked, so no row selection remaining enable cell selection
                rowSelectionRemoved(selectableCol);

            } else {
                // remove cell selection and unselect selected cells;
                //show single selection action

                rowSelected(selectedCells, selectableCol, deSelectButton);

            }


        });


        tableSelectbutton.on("click", function (e) {

            var selectedCells = $('.all-live-copies-cell-selectable[selected]');
            cellSelectionActions.addClass('foundation-collection-action-hidden');

            if ($(this).attr('checked') != 'checked') {
                rowSelected(selectedCells, selectableCol, deSelectButton);
            } else {
                rowSelectionRemoved(selectableCol);
            }

        });


        deSelectCloseButton.on('click', function (e) {

            //this button appears only on row selection
            // so enable all cell section afte this

            $.each(selectableCol, function (i, l) {
                l.setAttribute('coral-table-cellselect', 'coral-table-cellselect');
            });

            $.each(selectableRow, function (i, l) {
                $(l).removeClass('is-selected')
                l.removeAttribute('selected');
            });


        });

        sourcePathCells.on('click', function (e) {

            var updatedLocation = this.getAttribute('data-source-path');
            var pageURITemplate = $('.granite-collection-pagetitle').data('graniteCollectionPagetitleSrc');
            if (pageURITemplate && updatedLocation) {
                var url  = Granite.URITemplate.expand(pageURITemplate, {
                    id: updatedLocation
                });
                window.location = url;
            }
        });


    });

    function updateColAttr(selectableCol) {

        $.each(selectableCol, function (i, l) {

            if ( !l.hasAttribute("data-actionrels")) {
                $(l).removeClass("all-live-copies-cell-selectable");
                l.removeAttribute('coral-table-cellselect');
                $(l).prepend("<div coral-table-cellselect hidden></div>");

            }
        });

        return $('.all-live-copies-cell-selectable');
    }
    
    function isRowSame(clickedCell, selectedCell) {
        var clickedCellSource = $.parseJSON(clickedCell.getAttribute('data-relationship'))['source'];
        var selectedCellSource = $.parseJSON(selectedCell.getAttribute('data-relationship'))['source'];

        return clickedCellSource == selectedCellSource;

    }

    function rowSelected(selectedCells, selectableCol, deSelectButton) {

        $.each(selectableCol, function (i, l) {
            l.removeAttribute('coral-table-cellselect');
        });

        $.each(selectedCells, function (i, l) {
            $(l).removeClass('is-selected');
            l.removeAttribute('selected');
        });
        deSelectButton.removeClass('foundation-collection-action-hidden');
    }

    function rowSelectionRemoved(selectableCol) {
        $.each(selectableCol, function (i, l) {
            l.setAttribute('coral-table-cellselect', 'coral-table-cellselect');
        });

    }

    function enableCellSelectionAction(selectedCell) {

        var actionRels = $.parseJSON(selectedCell.getAttribute('data-actionrels'));
        var selectedCellSource = $.parseJSON(selectedCell.getAttribute('data-relationship'))['source'];
        var selectedCellTarget = $.parseJSON(selectedCell.getAttribute('data-relationship'))['target'];
        $.each(actionRels, function (i, l) {

            var currAction = $('.' + l);
            currAction.removeClass('foundation-collection-action-hidden');

            if (l == "cq-wcm-msm-all-live-copies-reset-activator") {

                currAction.attr('data-sourcepath', selectedCellSource);
                currAction.attr('data-targetpath', selectedCellTarget);

            } else if (l == "cq-wcm-msm-all-live-copies-suspend-activator") {
                $('.cq-wcm-msm-all-live-copies-suspendactions').attr('data-targetpath', selectedCellTarget);

            } else if (l == "cq-wcm-msm-all-live-copies-resume-activator") {
                currAction.attr('data-targetpath', selectedCellTarget);
                currAction.attr('data-sourcepath', selectedCellSource);

            } else if (l == "cq-wcm-msm-all-live-copies-detach-activator") {
                currAction.attr('data-targetpath', selectedCellTarget);
            }

        });


    }

    $(document).on('coral-overlay:beforeopen', '#livecopy-rollout', function (e) {
        var sourcePath = $('.cq-wcm-msm-all-live-copies-livecopy-rollout-sourcepath');
        var targetPath = $('.cq-wcm-msm-all-live-copies-livecopy-rollout-targetpath');
        var selectedCell = $('.all-live-copies-cell-selectable[selected]')[0];
        var selectedCellSource = $.parseJSON(selectedCell.getAttribute('data-relationship'))['source'];
        var selectedCellTarget = $.parseJSON(selectedCell.getAttribute('data-relationship'))['target'];
        sourcePath.attr('value', selectedCellSource);
        targetPath.attr('value', selectedCellTarget);

    });


    $(window).adaptTo("foundation-registry").register("foundation.collection.action.action", {
        name: "cq.wcm.msm.relationshipstatus",
        handler: function (name, el, config, collection, selections) {
            var selectedCell = $('.all-live-copies-cell-selectable[selected]')[0];
            var selectedCellSource = $.parseJSON(selectedCell.getAttribute('data-relationship'))['source'];
            var selectedCellTarget = $.parseJSON(selectedCell.getAttribute('data-relationship'))['target'];
            var url = config.data.href + "?source=" + encodeURIComponent(selectedCellSource) + "&target=" + encodeURIComponent(selectedCellTarget);
            window.location = url;
        }
    });

    $(window).adaptTo("foundation-registry").register("foundation.collection.action.action", {
        name: "cq.wcm.msm.openlivecopy",
        handler: function (name, el, config, collection, selections) {
            var selectedCell = $('.all-live-copies-cell-selectable[selected]')[0];
            var selectedCellTarget = $.parseJSON(selectedCell.getAttribute('data-relationship'))['target'];
            var url = config.data.href + selectedCellTarget + '.html';
            window.location = url;
        }
    });

    function reset(data, path, targetPath) {
        ui.wait();
        $.ajax({
            url: data.uri,
            type: "POST",
            data: {
                _charset_: "UTF-8",
                cmd: "rollout",
                type: "page",
                reset: "true",
                path: path,
                "msm:targetPath": targetPath ? targetPath : ""
            },
            success: function () {
                document.location.reload();
            },
            error: function (xhr) {
                ui.clearWait();
                ui.alert(Granite.I18n.get("Error"), Granite.I18n.get("An error occurred while resetting the Live Copy."), "error");
            }
        });
    }

    $(window).adaptTo("foundation-registry").register("foundation.collection.action.action", {
        name: "cq.wcm.msm.reset",
        handler: function (name, el, config) {
            var message = $(document.createElement("div"));
            var blueprintPath = $(this).data("sourcepath");
            var livecopyPath = $(this).data("targetpath");

            $(document.createElement("p"))
                .text(Granite.I18n.get("You are going to reset this Live Copy to the state of the Source."))
                .appendTo(message);
            $(document.createElement("p"))
                .text(Granite.I18n.get("All local modifications will be lost."))
                .appendTo(message);

            ui.prompt(Granite.I18n.get("Reset Live Copy"), message.html(), "warning", [{
                text: Granite.I18n.get("Cancel")
            }, {
                text: Granite.I18n.get("Reset"),
                warning: true,
                handler: function () {
                    reset(config.data, blueprintPath, livecopyPath);
                }
            }]);
        }
    });

    function suspend(data, livecopyPath, isDeep) {
        ui.wait();

        $.ajax({
            url: livecopyPath + "/_jcr_content.msm.conf",
            type: "POST",
            data: {
                "_charset_": "UTF-8",
                "msm:status/msm:isCancelled": true,
                "msm:status/msm:isCancelledForChildren": isDeep ? true : ""
            },
            success: function () {
                document.location.reload();
            },
            error: function (xhr) {
                ui.clearWait();
                ui.alert(Granite.I18n.get("Error"), Granite.I18n.get("An error occurred while suspending Live Copy."), "error");
            }
        });
    }

    $(window).adaptTo("foundation-registry").register("foundation.collection.action.action", {
        name: "cq.wcm.msm.suspend",
        handler: function (name, el, config) {
            var livecopyPath = $(this).data("targetpath");
            var message = $(document.createElement("div"));

            var isDeep = false;
            if (config.data) {
                if (config.data.deep != undefined) {
                    isDeep = config.data.deep;
                }

            }

            var msg = isDeep ?
                Granite.I18n.get("You are going to suspend this Live Copy and its children.") :
                Granite.I18n.get("You are going to suspend this Live Copy.");

            $(document.createElement("p"))
                .text(msg)
                .appendTo(message);
            $(document.createElement("p"))
                .text(Granite.I18n.get("No action will be performed on a rollout."))
                .appendTo(message);

            ui.prompt(Granite.I18n.get("Suspend Live Copy"), message.html(), "warning", [{
                text: Granite.I18n.get("Cancel")
            }, {
                text: Granite.I18n.get("Suspend"),
                warning: true,
                handler: function () {
                    suspend(config.data, livecopyPath, isDeep);
                }
            }]);
        }
    });



    function getLiveRelationshipStatus(livecopyPath) {
    	if (!livecopyPath) {
            return;
        }

        livecopyPath += "/_jcr_content.msm.conf";

        return $.ajax({
            type: "GET",
            url: livecopyPath,
            data: "advancedStatus=true",
            traditional: true,
            cache: false
        });
    }


    function syncPage(blueprintPath, livecopyPath, isDeep) {
    	if (!blueprintPath || !livecopyPath) {
        	// nothing to do
                return;
        }

        ui.wait();
        return $.ajax({
                url: Granite.HTTP.externalize("/bin/wcmcommand"),
                type: "POST",
                data: {
                    _charset_: "UTF-8",
                    cmd: "rollout",
                    type: (isDeep) ? "deep" : "page",
                    reset: "false",
                    path: blueprintPath,
                    "msm:targetPath": livecopyPath ? livecopyPath : ""
                }
            }).done(function( data, textStatus, jqXHR ) {
                ui.clearWait();
                document.location.reload();
            }).fail(function(xhr) {
                ui.clearWait();
                ui.alert(Granite.I18n.get("Error"), Granite.I18n.get("An error occurred while" +
                    " synchronizing the Live Copy."), "error");
            });
        }


    function resume(data, livecopyPath, callback) {
        ui.wait();

        $.ajax({
            url: livecopyPath + "/_jcr_content.msm.conf",
            type: "POST",
            data: {
                "_charset_": "UTF-8",
                "msm:status/msm:isCancelled": false
            },
            success: function () {
                document.location.reload();

            	if (callback) {
                    callback.call(this);
                }
            },
            error: function (xhr) {
                ui.clearWait();
                ui.alert(Granite.I18n.get("Error"), Granite.I18n.get("An error occurred while resuming Live Copy."), "error");
            }
        });
    }

    $(window).adaptTo("foundation-registry").register("foundation.collection.action.action", {
        name: "cq.wcm.msm.resume",
        handler: function (name, el, config) {
            var blueprintPath = $(this).data("sourcepath");
            var livecopyPath = $(this).data("targetpath");
            var message = $(document.createElement("div"));

            $(document.createElement("p"))
                .text(Granite.I18n.get("You are going to resume this Live Copy."))
                .appendTo(message);

            var checkbox = new Coral.Checkbox().set({
                label: {
                    innerHTML: Granite.I18n.get("Synchronize after reverting inheritance")
                },
                name: "_syncAfterRevert",
                value: "true",
                checked: false
            });

	    $(checkbox).appendTo(message);

            ui.prompt(Granite.I18n.get("Resume Live Copy"), message.html(), "warning", [{
                text: Granite.I18n.get("Cancel")
            }, {
                text: Granite.I18n.get("Resume"),
                warning: true,
                handler: function () {

		    var $syncAfterRevertCheck = $('[name="_syncAfterRevert"]');
                    var syncNeeded = ($syncAfterRevertCheck) ? $syncAfterRevertCheck.prop("checked") : false;

                    if (syncNeeded) {
                        getLiveRelationshipStatus(livecopyPath).done(function(data) {
                                var isCancelledForChildren = data["msm:status"]["msm:isCancelledForChildren"];
                                resume(config.data, livecopyPath, function () {
                                    syncPage(blueprintPath, livecopyPath, isCancelledForChildren)
                                });
                            });
                    } else {
                        resume(config.data, livecopyPath);
                    }
                }
            }]);
        }
    });


    function detach(data, livecopyPath) {
        ui.wait();

        $.ajax({
            url: livecopyPath + ".msm.conf",
            type: "POST",
            data: {
                _charset_: "UTF-8",
                removeLCMarkers: "true",
                path: ""
            },
            success: function () {
                document.location.reload();
            },
            error: function (xhr) {
                ui.clearWait();
                ui.alert(Granite.I18n.get("Error"), Granite.I18n.get("An error occurred while detaching Live Copy from Source."), "error");
            }
        });
    }

    $(window).adaptTo("foundation-registry").register("foundation.collection.action.action", {
        name: "cq.wcm.msm.detach",
        handler: function (name, el, config) {
            var livecopyPath = $(this).data("targetpath");
            var message = $(document.createElement("div"));

            $(document.createElement("p"))
                .text(Granite.I18n.get("You are going to detach this Live Copy from its Source."))
                .appendTo(message);
            $(document.createElement("p"))
                .text(Granite.I18n.get("This cannot be undone."))
                .appendTo(message);

            ui.prompt(Granite.I18n.get("Detach Live Copy"), message.html(), "warning", [{
                text: Granite.I18n.get("Cancel")
            }, {
                text: Granite.I18n.get("Detach"),
                warning: true,
                handler: function () {
                    detach(config.data, livecopyPath);
                }
            }]);
        }
    });


})(window, document, Granite, Granite.$);


