/*************************************************************************
 *
 * ADOBE CONFIDENTIAL
 * __________________
 *
 *  Copyright 2011 Adobe Systems Incorporated
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
 **************************************************************************/

CQ.mcm.ListView = CQ.Ext.extend(CQ.Ext.grid.GridPanel, {

    baseId: "mcm-list-view",

    // switch Filter panel on in CampaignPlanner
    usesAdvancedFilter: true,

    constructor: function(config) {

        this.pagingToolbar = new CQ.Ext.PagingToolbar({
            pageSize: config.planner.pageSize,
            store: config.store,
            displayInfo: true,
            displayMsg: CQ.I18n.getMessage('Displaying experiences {0} - {1} of {2}'),
            emptyMsg: CQ.I18n.getMessage("No experiences to display")
        });

        var that = this;

        this.contextMenu = new CQ.Ext.menu.Menu({
            items: [{
            text: CQ.I18n.getMessage('Edit'),
            iconCls: 'edit',
            handler: function() { that.handleEditOf(that.contextMenuItem); },
            scope: that
            },{
            text: CQ.I18n.getMessage('Properties') + '&hellip;',
            iconCls: 'edit',
            handler: function() { that.handleProperties(that.contextMenuItem); },
            scope: that
            }]
        });

        CQ.Util.applyDefaults(config,  {
            enableColumnHide: false,
            stripeRows: true,
            viewConfig: {
                forceFit:true
            },
            selModel: new CQ.Ext.grid.RowSelectionModel({
                listeners: {
                    selectionchange: function(selModel) {
                        if(!selModel.hasSelection()) { // no selection
                            selModel.grid.topToolbar.items.each(function(item, index, length) {
                                item.setDisabled(item.noSelect === false);
                            });
                        } else if(selModel.getSelections().length > 1) { // multi selection
                            selModel.grid.topToolbar.items.each(function(item, index, length) {
                                if (false !== item.multiSelect) {
                                    that.checkSelectionEvent(item, selModel.getSelections());
                                } else {
                                    item.setDisabled(true);
                                }
                            });
                        } else { // single selection
                            selModel.grid.topToolbar.items.each(function(item, index, length) {
                                if (false !== item.singleSelect) {
                                    that.checkSelectionEvent(item, selModel.getSelections());
                                } else {
                                    item.setDisabled(true);
                                }
                            });
                        }
                    }
                }
            }),
            listeners: {
                rowdblclick: function(grid, rowIndex, evt) {
                    that.handleEditOf(grid.store.getAt(rowIndex));
                },
                rowcontextmenu: function(grid, rowIndex, event) {
                    if(event.altKey)
                        return;
                    event.stopEvent();
                    that.contextMenuItem = grid.store.getAt(rowIndex);
                    that.contextMenu.showAt(event.xy);
                }
            },
            columns: [
                {
                    header: CQ.I18n.getMessage("Image"),
                    dataIndex: 'image',
                    css: 'height:65px;',
                    width: 120,
                    fixed: true,
                    menuDisabled: true,
                    renderer: function(value, metaData, record, rowIndex, colIndex, store) {
                        return "<img src='" + CQ.HTTP.externalize(CQ.shared.XSS.getXSSValue(record.data.image)) + "' style='max-width:110px; max-height:55px;'/>";
                    }
                },{
                    header: CQ.I18n.getMessage("Experience"),
                    dataIndex: 'experienceTitle',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store) {
                        var html = "<p class='title'>" + CQ.shared.XSS.getXSSValue(record.data.experienceTitle) + "</p>";

                        if(record.data.segments && record.data.segments.length > 0) {
                            html += "<p class='textline'>Segments: ";
                            for(var i=0; i < record.data.segments.length; i++) {
                                html += (i > 0? ", ": "") + "<a target='_blank' href='" + CQ.HTTP.externalize(CQ.shared.XSS.getXSSValue(record.data.segments[i].path)) + ".html'>" + CQ.shared.XSS.getXSSValue(record.data.segments[i].title) + "</a>";
                            }
                            html += "</p>";
                        }

                        if(record.data.tags && record.data.tags.length > 0) {
                            html += "<p class='textline'>";
                            for(var i=0; i < record.data.tags.length; i++) {
                                html += "<span class='tag'>" + CQ.shared.XSS.getXSSValue(record.data.tags[i].title) + "</span>";
                            }
                            html += "</p>";
                        }
                        return html;
                    },
                    sortable: true
                },{
                    id: 'last',
                    header: CQ.I18n.getMessage("Touchpoint"),
                    dataIndex: 'touchpointTitle',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store) {
                        var html = "<p class='title'>"
                            + (record.data.touchpointTitle ? CQ.shared.XSS.getXSSValue(record.data.touchpointTitle)
                                : CQ.I18n.getMessage("No Touchpoints selected yet"))
                            + "</p>";
                        if(record.data.touchpointPage && record.data.touchpointPage != '')
                            html += "<p class='textline'>Page: <a href=''>" + CQ.shared.XSS.getXSSValue(record.data.touchpointPage) + "</a></p>";
                        if(record.data.touchpointChannel && record.data.touchpointChannel != '')
                            html += "<p class='channel textline'>Channel: " + CQ.shared.XSS.getXSSValue(record.data.touchpointChannel) + "</p>";
                        return html;
                    },
                    sortable: true
                },{
                    header: CQ.I18n.getMessage("On Time"),
                    dataIndex: 'onTime',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store) {
                        if (record.data.onTime) {
                            var formatter = new CQ.mcm.utils.RelativeDateFormatter();
                            var d = Date.parseDate(record.data.onTime, "Y-m-d\\TH:i:s.uP");
                            var tooltip = d.format("Y-m-d G:i");
                            return "<div title='" + tooltip + "'>" + formatter.format(d) + "</div>";
                        }
                        return "";
                    },
                    width: 100,
                    fixed: true,
                    sortable: true
                },{
                    header: CQ.I18n.getMessage("Off Time"),
                    dataIndex: 'offTime',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store) {
                        if (record.data.offTime) {
                            var formatter = new CQ.mcm.utils.RelativeDateFormatter();
                            var d = Date.parseDate(record.data.offTime, "Y-m-d\\TH:i:s.uP");
                            var tooltip = d.format("Y-m-d G:i");
                            return "<div title='" + tooltip + "'>" + formatter.format(d) + "</div>";
                        }
                        return "";
                    },
                    width: 100,
                    fixed: true,
                    sortable: true
                }
            ],
            tbar: [
                {
                    iconCls: 'cq-siteadmin-refresh',
                    handler: function() {this.handleRefresh();},
                    scope: this
                },
                "-",
                { // be aware that these buttons have to be the same in all views!
                    id: that.baseId + "-viewbutton-0",
                    enableToggle: true,
                    pressed: true,
                    allowDepress: false,
                    iconCls: "cq-cft-dataview-mosaic",
                    toggleGroup: "campaignview-calendar",
                    toggleHandler: that.switchCampaignView,
                    scope: that
                },{
                    id: that.baseId + "-viewbutton-1",
                    enableToggle: true,
                    allowDepress: false,
                    iconCls: "cq-cft-dataview-list",
                    toggleGroup: "campaignview-calendar",
                    toggleHandler: that.switchCampaignView,
                    scope: that
                },
                "-",
                {
                    text: CQ.I18n.getMessage("New..."),
                    handler: function() {this.handleNew();},
                    scope: this
                },
                {
                    text: CQ.I18n.getMessage("Edit"),
                    handler: function() {this.handleEdit();},
                    scope: this,
                    disabled: true,
                    multiSelect: false,
                    singleSelect: true,
                    noSelect: false
                },
                {
                    text: CQ.I18n.getMessage("Properties") +"&hellip;",
                    handler: function() {this.handleProperties();},
                    scope: this,
                    disabled: true,
                    multiSelect: false,
                    singleSelect: true,
                    noSelect: false
                },
                "-",
                {
                    text: CQ.I18n.getMessage("Simulate"),
                    handler: function() {this.handleSimulate();},
                    scope: this,
                    disabled: true,
                    multiSelect: false,
                    singleSelect: true,
                    noSelect: false,
                    enabledSelTypes: {"twitter": true, "tweet": true,
                                        "teaser": true, "newsletter":true}

                },
                {
                    text: CQ.I18n.getMessage("Analyze") + "&hellip;",
                    handler: function() {this.handleAnalyze();},
                    scope: this,
                    disabled: true,
                    multiSelect: false,
                    singleSelect: true,
                    noSelect: false,
                    disabledSelTypes: {"twitter": true, "tweet": true}
                },
                "-",
                {
                    text: CQ.I18n.getMessage("Delete"),
                    handler: function() {this.handleDelete();},
                    scope: this,
                    disabled: true,
                    multiSelect: true,
                    singleSelect: true,
                    noSelect: false
                },
                '->', // the right part of the toolbar should be the same for all views!!
                {
                    xtype: "textfield",
                    disabled: true,
                    emptyText: CQ.I18n.getMessage("Enter search term"),
                    id: this.baseId + "-searchfield",
                    listeners: {
                        specialkey: function(theField, e) {
                            if (e.getKey() == e.ENTER) {
                                config.planner.doSearch();
                            }
                        }
                    }
                }, {
                    text: CQ.I18n.getMessage("Search"),
                    disabled: true,
                    id: this.baseId + "-searchbutton",
                    handler: config.planner.doSearch,
                    scope: config.planner
                }, {
                    text: CQ.I18n.getMessage("Clear"),
                    disabled: true,
                    id: this.baseId + "-clearsearchbutton",
                    handler: config.planner.clearSearch,
                    scope: config.planner
                }, {
                    enableToggle: true,
                    disabled: true,
                    id: this.baseId + "-advancedtogglebutton",
                    text: CQ.I18n.getMessage("Advanced"),
                    toggleHandler: config.planner.switchAdvancedOptions,
                    scope: config.planner
                }
            ],
            bbar: that.pagingToolbar
        });

        CQ.mcm.ListView.superclass.constructor.call(this, config);
    },
    
    checkSelectionEvent: function(toolBarItem, items) {
        if (items && toolBarItem) {
            if (toolBarItem.enabledSelTypes) {
                var disabled = false;
                for (var i=0; i<items.length; i++) {
                    if (true !== toolBarItem.enabledSelTypes[items[i].data.type]) {
                        disabled = true;
                        break;
                    }
                }
                toolBarItem.setDisabled(disabled);
            } else if (toolBarItem.disabledSelTypes) {
                var disabled = false;
                for (var i=0; i<items.length; i++) {
                    if (true === toolBarItem.disabledSelTypes[items[i].data.type]) {
                        disabled = true;
                        break;
                    }
                }
                toolBarItem.setDisabled(disabled);
            } else {
                toolBarItem.setDisabled(false);
            }
        } else {
            toolBarItem.setDisabled(true);
        }
    },
    
    handleRefresh: function() {
        this.planner.refreshData(this.pagingToolbar.cursor);
    },
    
    switchCampaignView: function(button, state) {
        if(state == true) {
            var itemId = button.id.replace(this.baseId + "-viewbutton-", "");
            this.planner.switchCampaignView(itemId);
        }
    },
    
    handleNew: function() {
        CQ.mcm.Util.createPageAndOpenPropsDialog(CQ.I18n.getMessage("Create Experience"), this.planner.currentRootPath,
            function(propsDialog) {
                var titleField = propsDialog.getField("./jcr:title");
                //this.planner.setSearch(titleField.getValue()); // populates the search tab and shows only created expereince, does not look intutive.
            },
            function() {
                CQ.Ext.Msg.alert(
                    CQ.I18n.getMessage("Error"),
                    CQ.I18n.getMessage("Could not create experience.")
                );
            },
            this)
    },
    
    handleEdit: function() {
        var selection = this.selModel.getSelections();
        if(selection.length > 0) {
            this.handleEditOf(selection[0]);
        }
    },
    
    handleEditOf: function(item) {
        if(item) {
            var pagePath = "/bin/wcmcommand?cmd=open&path=" + item.id ;
        	if (item.data.type == "newsletter") {
                // ATTENTION: Hacking here. The parent separation is available in the EmulatorManager.
                // But because I cannot access the emulator manager of the new window, I cannot
                // read it's config. So hardcoding it here to 3.
                var cookiePath = CQ.Util.getAbsoluteParent(pagePath, 3);
                CQ.HTTP.setCookie("cq-emulator", "none", CQ.HTTP.externalize(cookiePath));
                CQ.shared.Util.open(CQ.HTTP.externalize(pagePath));
            } else {
            	CQ.shared.Util.open(CQ.HTTP.externalize(pagePath));
            }
        }
    },
    
    handleProperties: function(itemParam) {
        var item = null;
        if (itemParam) {
            item = itemParam;
        } else {
            var selection = this.selModel.getSelections();
            if(selection.length > 0) {
                item = selection[0];
            }
        }
        if (item != null) {
            var that = this;
            var refresher = function() {that.handleRefresh();};
            var contentPath = item.id + "/jcr:content";

            var dialogPath = CQ.mcm.PluginHook.getPlugin(item.data.pluginId).getExperiencePropertiesDialogPath(item);
            CQ.mcm.Util.openDialog(contentPath, dialogPath, false, refresher);
        }
    },
    
    handleAnalyze: function() {
        var selection = this.selModel.getSelections();
        if(selection.length > 0) {
            if(selection[0].data.analyzeUrl != "") {
                var dlg = CQ.WCM.getDialog(
                    {
                        "jcr:primaryType": "cq:Panel",
                        "xtype": "statistics",
                        "cls": "cq-propsdialog-impressions",
                        "header": false,
                        "bodyStyle": {padding:"15px 15px"},
                        "width":350,
                        "height":300,
                        "screen": {
                            "autoEl": {
                                "src": CQ.HTTP.getContextPath() + "/libs/cq/ui/resources/0.gif"
                            }
                        }
                    },
                    'impressions'
                );
                dlg.loadContent(selection[0].data.analyzeUrl + "/jcr:content");
                dlg.setTitle(CQ.I18n.getMessage("Page impressions of ") + selection[0].data.analyzeUrl);
                dlg.show();
            }
        }
    },
    
    handleSimulate: function() {
        var selection = this.selModel.getSelections();
        if(selection.length > 0) {

            if (selection[0].data.type == "newsletter") {
                // ATTENTION: Hacking here. The parent separation is available in the EmulatorManager.
                // But because I cannot access the emulator manager of the new window, I cannot
                // read it's config. So hardcoding it here to 3.
                var pagePath = selection[0].id + ".html";
                var cookiePath = CQ.Util.getAbsoluteParent(pagePath, 3);
                CQ.HTTP.setCookie("cq-emulator", "Gmail", CQ.HTTP.externalize(cookiePath));
                CQ.shared.Util.open(CQ.HTTP.externalize(pagePath));
                
            } else if (selection[0].data.type == "teaser") {
                if(selection[0].data.simulateUrl != "") {
                    var path = selection[0].id;
                    CQ_Analytics.PageDataMgr.setExperience(path);
                    CQ.WCM.setMode(CQ.WCM.MODE_PREVIEW);
                    CQ.HTTP.setCookie("show-clickstreamcloud", "true", "/");
                    CQ.shared.Util.open(CQ.HTTP.externalize(selection[0].data.simulateUrl));
                } else {
                    CQ.Ext.Msg.alert(
                        CQ.I18n.getMessage("Warning"),
                        CQ.I18n.getMessage("Cannot simulate teaser if no touchpoint is assigned.")
                    );
                }
            } else {
                var standardSimTypes = ["twitter", "tweet"];
                // just open standardSimTypes, nothing for the rest
                if (standardSimTypes.indexOf(selection[0].data.type) > -1) {
                    var path = CQ.HTTP.externalize(selection[0].id + ".html");
                    CQ.shared.Util.open(path);
                }
            }
        }
    },
    
     handleDelete: function() {
        var selection = this.selModel.getSelections();
        if(selection.length > 0) {
            CQ.Ext.Msg.confirm(
                CQ.I18n.getMessage("Delete offer"),
                        CQ.I18n.getMessage("Are you sure you want to delete this offer?"),
                        function (button) {
                            if (button == "yes") {
                               var data = {
               					 	":operation": "delete",
                					":applyTo": []
            						};
            				for(var i=0; i < selection.length; i++) {
            				    var name = selection[i].id.replace(/.*\/(.*)/, "$1");
            					data[":applyTo"].push(name);
           					 }
           				 CQ.HTTP.post(this.planner.currentRootPath, function() {
            				    this.handleRefresh();
            					}, data, this);
                            }
                        },
                this
                );

        }
    },

    
    
    openIframeFor: function(urlParam, titleParam) {
        var iframeDialog = null;
        var dlgConfig = {
            title: titleParam,
            width: 800,
            height: 500,
            cancelText: CQ.I18n.getMessage("Close"),
            buttons: [
                CQ.Dialog.CANCEL,
            ],
            success: function() {
                // run after successful ok() handler
            },
            listeners: {
                loadContent: function(dialog) {
                }
            }
        };

        iframeDialog = new CQ.IframeDialog(dlgConfig);

        iframeDialog.show();
        iframeDialog.loadContent(urlParam);

    }
    
});

CQ.Ext.reg("mcmlistview", CQ.mcm.ListView);
