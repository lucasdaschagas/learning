/*************************************************************************
* ADOBE CONFIDENTIAL
* ___________________
*
*  Copyright 2021 Adobe
*  All Rights Reserved.
*
* NOTICE:  All information contained herein is, and remains
* the property of Adobe and its suppliers, if any.  The
* intellectual and technical concepts contained herein are
* proprietary to Adobe and its suppliers and are protected
* by all applicable intellectual property laws, including
* trade secret and copyright laws.  Dissemination of this
* information or reproduction of this material is strictly
* forbidden unless prior written permission is obtained
* from Adobe.
***************************************************************************/
(function (window, document, Granite, $) {
    var Url_check_regex = new RegExp('^(https?:\\/\\/)?' + // protocol
        '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|' + // domain name
        '((\\d{1,3}\\.){3}\\d{1,3}))' + // OR ip (v4) address
        '(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*'); // port and path

 
    const ValidtionInputField = {
        PUB_SERVER_URL: {
            selector: 'publish.url.validation',
            validator: function (el) {
                var error_message = Granite.I18n.get("URL Format is incorrect");
                var emptyfield_message = Granite.I18n.get("Input field should not be empty");
                if(el.value.length == 0){
                    return emptyfield_message;

                }
                if (!Url_check_regex.test(el.value)) {
                    return error_message;
                }

 
            }
        },
        ORIGIN_REGEX: {
            selector: 'origin.url.validation',
            validator: function (el) {
                var error_message = Granite.I18n.get("URL Format is incorrect");
                var emptyfield_message = Granite.I18n.get("Input field should not be empty");
                if(el.value.length == 0){
                    return emptyfield_message;

                }
                if (!Url_check_regex.test(el.value)) {
                    return error_message;
                }
 
            }
        },
        AMT_REGEX: {
            selector: 'amt.regex',
            validator: function (el) {
                var error_message = Granite.I18n.get("Amount value should be in between 0 to 5");
                if (parseFloat(el.value) > 5 || parseFloat(el.value) < 0 || el.value == "" || el.value.match(/[a-z]/i)) {
                    return error_message;
                }
            }
        },
        RADIUS_REGEX: {
            selector: 'radius.regex.validation',
            validator: function (el) {
                var error_message = Granite.I18n.get("Radius value should be in between 0 to 250");
                if (parseFloat(el.value) > 250 || parseFloat(el.value) < 0 || el.value == "" || el.value.match(/[a-z]/i)) {
                    return error_message;
                }
            }
        },
        THRESHOLD_REGEX: {
            selector: 'regex.validation',
            validator: function (el) {
                var error_message = Granite.I18n.get("Threshold value should be in between 0 to 255");
                if (parseFloat(el.value) > 255 || parseFloat(el.value) < 0 || el.value == "" || el.value.match(/[a-z]/i)) {
                    return error_message;
                }
            }
        },
        PS_RES_REGEX: {
            selector: 'resolution.regex.validation',
            validator: function (el) {
                var res_regex_pattern = /^(0|[1-9]\d*)$/;
                var error_message = Granite.I18n.get("Resolution should be in numeric");
                var res_result = el.value.match(res_regex_pattern);
                if (res_result === null) {
                    return error_message;
                }
            }
 
        },
        PDF_RES_REGEX: {
            selector: 'pdf.resolution.regex.validation',
            validator: function (el) {
                var res_regex_pattern = /^(0|[1-9]\d*)$/;
                var error_message = Granite.I18n.get("Resolution should be in numeric");
                var res_result = el.value.match(res_regex_pattern);
                if (res_result === null) {
                    return error_message;
                }
            }
        },
        ILL_RES_REGEX: {
            selector: 'illustrator.resolution.regex.validation',
            validator: function (el) {
                var illustrator_regex_pattern = /^(0|[1-9]\d*)$/;
                var error_message = Granite.I18n.get("Resolution should be in numeric");
                var illustrator_result = el.value.match(illustrator_regex_pattern);
                if (illustrator_result === null) {
                    return error_message;
                }
            }
        }
 
    }
    for (let key in ValidtionInputField) {
        register(ValidtionInputField[key].selector, ValidtionInputField[key].validator);
    }
    function register(selector, validator) {
        foundationReg = $(window).adaptTo("foundation-registry");
        foundationReg.register("foundation.validation.validator", {
            selector: "[data-validation='" + selector + "']",
            validate: validator
        });
    }



    $(document).on('foundation-contentloaded', function () {
        var tooltip;
        var pdfExtractValue;
        var elementId = ["#info-publish-server","#info-origin-server","#info-overwrite","#info-preserve","#info-image-editing-amt","#info-image-editing-radius","#info-image-editing-threshold","#resolution","#info-image-editing-resolution","#info-illustrator-resolution"];
        for(var i=0; i<elementId.length; i++){
            var title = $(elementId[i]).attr('title');
            var ariaLabelBy =$(elementId[i]).attr('id');
            $(elementId[i]+" coral-icon").attr({
                alt:title,
                "aria-labelledby":ariaLabelBy,
                title:title
             });
        }

        var ui = $(window).adaptTo("foundation-ui");
        getGeneralSettingFormData(ui);
        $('.switchtoggle').on('change', function (event) {
            if (this.checked) {
                $('#dmgeneral-create-template').show();
                $('#dmgeneral-extract-text').show();
                $('#dmgeneral-extend-layer').show();
                $('#layernaming').show();
                $('#photoshopanchor').show();
            } else {
                $('#dmgeneral-create-template').hide();
                $('#dmgeneral-extract-text').hide();
                $('#dmgeneral-extend-layer').hide();
                $('#layernaming').hide();
                $('#photoshopanchor').hide();
            }
        });
        function getKeywordVal() {
            if (pdfExtractValue === "Search words" || pdfExtractValue === "Search words and links") {
                return true;
            }
            return false;
        }
        function getLinksVal() {
            if (pdfExtractValue === "Links" || pdfExtractValue === "Search words and links") {
                return true;
            }
            return false;
        }
        $('#dm-general-setting-form').on('input change click', 'input[name="gspublish"],input[name="gsorigin"],input[name="amt"],input[name="radius"],input[name="threshold"],input[name="aillresolution"],input[name="pdfresolution"],input[name="resolutionval"]', function () {
            setTimeout(function () {
                if ($('input[name="gspublish"],input[name="gsorigin"],input[name="amt"],input[name="radius"],input[name="threshold"],input[name="aillresolution"],input[name="pdfresolution"],input[name="resolutionval"]').hasClass('is-invalid')) {
                    $('#generalsave').prop('disabled', true);
                } else {
                    $('#generalsave').prop('disabled', false);
                }
            }, 1000);
        });
        $('#publishinp').on('keydown', function () {
            if ($('#server-change-tooltip').length > 0) return; // if tooltip already present then don't add new one
            tooltip = new Coral.Tooltip().set({
                content: {
                    innerHTML: "Changing Publish Server URL will impact AEM Sites pages using DM components"
                },
                variant: "info",
                placement: "right",
                open: true,
                target: '#publishinp',
                id: 'server-change-tooltip'
            });
            $(tooltip).insertAfter('#publishinp')
        })
        $('#publishinp').on('blur', function () {
            $('#server-change-tooltip').remove()
        })
        $('#generalsave').on('click', function () {
            pdfExtractValue = $('coral-select[name="pdfextract"]').val();
            $('#generalsave').prop('disabled', true);
            var wait = new Coral.Wait().set({
                size: "L",
                variant: "dots",
                centered: true
            });
            $('.foundation-wizard-step').append(wait);
            var generalData = {
                "generalSettingParams": {
                    "commonSettings": {
                        "application_server_prefix_published": $('input[name="gspublish"]').val(),
                        "application_overwriteMode": $('coral-select[name="Overwriteimg"]').val(),
                        "application_server_prefix_origin": $('input[name="gsorigin"]').val()
                    },
                    "pdfSettings": {
                        "keywords": getKeywordVal(),
                        "colorspace": $('coral-select[name="pdfcolorspace"]').val(),
                        "links": getLinksVal(),
                        "pdfprocess": $('coral-select[name="pdfprocess"]').val(),
                        "resolution": $('input[name="pdfresolution"]').val()
                    },
                    "postScriptSettings": {
                        "aialpha": $('input[name="illustratorswitch"]').is(':checked') ? "true" : "false",
                        "psprocess": $('coral-select[name="processingalign"]').val(),
                        "airesolution": $('input[name="aillresolution"]').val(),
                        "pscolorspace": $('coral-select[name="colorspace"]').val(),
                        "aiprocess": $('coral-select[name="aiprocess"]').val(),
                        "aicolorspace": $('coral-select[name="aicolorspace"]').val(),
                        "psresolution": $('input[name="resolutionval"]').val(),
                        "psalpha": $('input[name="pstoggleswitch"]').is(':checked') ? "true" : "false"
                    },
                    "photoshopSettings": {
                        "layerNaming": $('coral-select[name="photoshoplayernaming"]').val(),
                        "process": $('input[name="photoshopswitch"]').is(':checked') ? "MaintainLayers" : "None",
                        "anchor": $('coral-select[name="photoshopanchoring"]').val(),
                        "extractText": $('input[name="Extract-text"]').is(':checked'),
                        "extendLayers": $('input[name="extend-layer"]').is(':checked'),
                        "createTemplate": $('input[name="create-template"]').is(':checked')
                    },
                    "imageSettings": {
                        "usmAmount": $('input[name="amt"]').val(),
                        "preserveCrop": $('input[name="preserve-crop"]').is(':checked'),
                        "usmRadius": $('input[name="radius"]').val(),
                        "usmThreshold": $('input[name="threshold"]').val(),
                        "usmMonochrome": $('input[name="monochrome"]').is(':checked') ? "1" : "0"
                   }
                }
            };
            $.ajax({
                type: 'POST',
                dataType: "text",
                contentType: "application/json",
                url: Granite.HTTP.externalize('/assets.dmgeneralsettings.json'),
                data: JSON.stringify(generalData),
                cache: false
            }).done(function (data, textStatus, jqXHR) {
                $(wait).remove();
                var errorMessage = Granite.I18n.get("Changes have been saved successfully.");
                showErrorDialog(ui, "Success", errorMessage, "success");
            }).fail(function (jqXHR, textStatus, errorThrown) {
                var errorMessage = Granite.I18n.get("Failed to post data");
                showErrorDialog(ui, "Error", errorMessage, "error");
            });
        })
        $('html').attr({"role":"main","aria-label":"generalsetting"});
    });
 
})(window, document, Granite, Granite.$);
function redirect() {
    window.location.href = Granite.HTTP.externalize('/aem/start.html');
}
function showErrorDialog(ui, title, message, typeOfAlert) {
    ui.prompt(Granite.I18n.get(title), Granite.I18n.get(message), typeOfAlert,
        [{
            text: Granite.I18n.get("OK"),
            id: "ok",
            handler: function () {
                redirect();
            }
        }]
    );
}
function getGeneralSettingFormData(ui) {
    var wait;
    $.ajax({
        type: 'GET',
        url: Granite.HTTP.externalize('/assets.dmgeneralsettings.json'),
        cache: false,
        beforeSend: function () {
            wait = new Coral.Wait().set({
                size: "L",
                variant: "dots",
                centered: true
            });
            $('.foundation-wizard-step').append(wait);
        }
    }).done(function (data, textStatus, jqXHR) {
        $(wait).remove();
        var imageEditingAmt = data.generalSettingParams.imageSettings.usmAmount;
        var imageEditingRadius = data.generalSettingParams.imageSettings.usmRadius;
        var imageEditingThreshold = data.generalSettingParams.imageSettings.usmThreshold;
        var imageEditingMonochrome = data.generalSettingParams.imageSettings.usmMonochrome;
        var imageEditingPreserveCrop = data.generalSettingParams.imageSettings.preserveCrop;
        var psProcessing = data.generalSettingParams.postScriptSettings.psprocess;
        var psResolution = data.generalSettingParams.postScriptSettings.psresolution;
        var psColorspace = data.generalSettingParams.postScriptSettings.pscolorspace;
        var psToggleswitch = data.generalSettingParams.postScriptSettings.psalpha;
        var pdfProcess = data.generalSettingParams.pdfSettings.pdfprocess;
        var pdfResolution = data.generalSettingParams.pdfSettings.resolution;
        var pdfColorspace = data.generalSettingParams.pdfSettings.colorspace;
        var pdfLinks = data.generalSettingParams.pdfSettings.links;
        var pdfKeywords = data.generalSettingParams.pdfSettings.keywords;
        var maintainLayer = data.generalSettingParams.photoshopSettings.process;
        var createTemplate = data.generalSettingParams.photoshopSettings.createTemplate;
        var extractText = data.generalSettingParams.photoshopSettings.extractText;
        var extendLayers = data.generalSettingParams.photoshopSettings.extendLayers;
        var photoshopLayerNaming = data.generalSettingParams.photoshopSettings.layerNaming;
        var photoshopAnchor = data.generalSettingParams.photoshopSettings.anchor;
        var illProcessing = data.generalSettingParams.postScriptSettings.aiprocess;
        var illResolution = data.generalSettingParams.postScriptSettings.airesolution;
        var illColorspace = data.generalSettingParams.postScriptSettings.aicolorspace;
        var illSwitch = data.generalSettingParams.postScriptSettings.aialpha;
        var origin = data.generalSettingParams.commonSettings.application_server_prefix_origin;
        var publish = data.generalSettingParams.commonSettings.application_server_prefix_published;
        var overwrite = data.generalSettingParams.commonSettings.application_overwriteMode;

        //sanitise dropdown values
        var matchedPsProcessing = $('coral-select[name="processingalign"] coral-select-item').filter(function(){
            return matchCase(this.value,psProcessing)
        }).attr('value');
        var matchedPsColorspace = $('coral-select[name="colorspace"] coral-select-item').filter(function(){
            return matchCase(this.value,psColorspace)
        }).attr('value');
        var matchedPdfProcess = $('coral-select[name="pdfprocess"] coral-select-item').filter(function(){
            return matchCase(this.value,pdfProcess)
        }).attr('value');
        var matchedPdfColorspace = $('coral-select[name="pdfcolorspace"] coral-select-item').filter(function(){
            return matchCase(this.value,pdfColorspace)
        }).attr('value');

        var matchedPhotoshopLayerNaming = $('coral-select[name="photoshoplayernaming"] coral-select-item').filter(function(){
            return matchCase(this.value,photoshopLayerNaming)
        }).attr('value');

        var matchedPhotoshopAnchor = $('coral-select[name="photoshopanchoring"] coral-select-item').filter(function(){
            return matchCase(this.value,photoshopAnchor)
        }).attr('value');

        var matchedIllProcessing = $('coral-select[name="aiprocess"] coral-select-item').filter(function(){
            return matchCase(this.value,illProcessing)
        }).attr('value');

        var matchedIllColorspace = $('coral-select[name="aicolorspace"] coral-select-item').filter(function(){
            return matchCase(this.value,illColorspace)
        }).attr('value');

        $('coral-select[name="Overwriteimg"]').val(overwrite);
        $('input[name="gsorigin"]').val(origin);
        $('input[name="gspublish"]').val(publish);
        $('input[name="amt"]').val(imageEditingAmt);
        $('input[name="radius"]').val(imageEditingRadius);
        $('input[name="threshold"]').val(imageEditingThreshold);
        if(imageEditingMonochrome) {
            $('input[name="monochrome"]').prop('checked', Boolean(Number(imageEditingMonochrome)));
        }
        if(imageEditingPreserveCrop){
            $('input[name="preserve-crop"]').prop('checked', JSON.parse(imageEditingPreserveCrop));
        }
        $('coral-select[name="processingalign"]').val(matchedPsProcessing);
        if(psToggleswitch){
            $('input[name="pstoggleswitch"]').prop('checked', JSON.parse(psToggleswitch));
        }
        $('input[name="resolutionval"]').val(psResolution);
        $('coral-select[name="colorspace"]').val(matchedPsColorspace);
        $('coral-select[name="pdfprocess"]').val(matchedPdfProcess);
        $('input[name="pdfresolution"]').val(pdfResolution);
        $('coral-select[name="pdfcolorspace"]').val(matchedPdfColorspace);
        if (pdfLinks === "false" && pdfKeywords === "false") {
            $('coral-select[name="pdfextract"]').val("None");
        } else if (pdfLinks === "true" && pdfKeywords === "false") {
            $('coral-select[name="pdfextract"]').val("Links");
        } else if (pdfLinks === "false" && pdfKeywords === "true") {
            $('coral-select[name="pdfextract"]').val("Search words");
        } else {
            $('coral-select[name="pdfextract"]').val("Search words and links");
        }
        if (maintainLayer === "None") {
            $('input[name="photoshopswitch"]').prop('checked', false);
            $('#dmgeneral-create-template').hide();
            $('#dmgeneral-extract-text').hide();
            $('#dmgeneral-extend-layer').hide();
            $('#layernaming').hide();
            $('#photoshopanchor').hide();
        } else {
            $('input[name="photoshopswitch"]').prop('checked', true);
            $('#layernaming').show();
            $('#dmgeneral-create-template').show();
            $('#dmgeneral-extract-text').show();
            $('#dmgeneral-extend-layer').show();
            $('#photoshopanchor').show();
        }
        $('input[name="create-template"]').prop('checked', JSON.parse(createTemplate));
        $('input[name="Extract-text"]').prop('checked', JSON.parse(extractText));
        $('input[name="extend-layer"]').prop('checked', JSON.parse(extendLayers));
        $('coral-select[name="photoshopanchoring"]').val(matchedPhotoshopAnchor);
        $('coral-select[name="photoshoplayernaming"]').val(matchedPhotoshopLayerNaming);
        $('coral-select[name="aiprocess"]').val(matchedIllProcessing);
        $('input[name="illustratorswitch"]').prop('checked', JSON.parse(illSwitch));
        $('input[name="aillresolution"]').val(illResolution);
        $('coral-select[name="aicolorspace"]').val(matchedIllColorspace);
        $('input[name="gspublish"]').trigger("change"); 
        $('input[name="gsorigin"]').trigger("change");
 
    }).fail(function (jqXHR, textStatus, errorThrown) {
        var errorMessage = Granite.I18n.get("Failed to fetch data");
        showErrorDialog(ui, "Error", errorMessage, "error");
    });
}

/**
 * Utility to match dropdown-option and the stored jobparams
 * @param  Object Dropdown option values
 * @param  String JobParams
 */
function matchCase(dropdownValue,serverValue){
    return dropdownValue.toLowerCase() === serverValue.toLowerCase();
}