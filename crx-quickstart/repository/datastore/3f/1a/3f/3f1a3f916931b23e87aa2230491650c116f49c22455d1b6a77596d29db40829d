/*!************************************************************************
 *
 * ADOBE CONFIDENTIAL
 * ___________________
 *
 *  Copyright 2015 Adobe Systems Incorporated
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
 **************************************************************************/

/**
 * Create core 's7ve' application object
 */
(function (s7ve, $) {
    "use strict";

    /**
     * Prefix to resolve ID of info component, as well as ID for default blank asset
     * @type {string}
     */
    var ID_ASSET_INFO_PREFIX = "#dm-sample-",
        ID_BLANK_INFO = ID_ASSET_INFO_PREFIX + "blank";

    /**
     * Viewer SDK config object must be populated by external logic coordinating
     * initialization
     */
    s7ve.VIEWER_CONFIG = Object.seal({
        s7sdkPath: "",
        s7sdkVersion: "",
        s7sdkRootPath: "",
        s7viewerVersion: "",
        s7viewerRootPath: "",
        s7viewerPath: "",
        contextPath: ""
    });

    /**
     * Map viewers and assets to use for editor preview
     */
    s7ve.CATEGORY_MAP = Object.freeze({
        "FLYOUT_ZOOM": {
            // viewer constructor
            CTOR: "FlyoutViewer",
            // default OOTB preset to use as starting point
            OOTB: "Flyout",
            // default asset to load in viewer
            ASSET: "dynamicimageset-sample",
            // type key used by Image preview component
            TYPE: "FLYOUTZOOM",
            // viewer marker used in OOTB CSS
            MARKER: "s7flyoutviewer"
        },
        "IMAGE_SET": {
            CTOR: "ZoomViewer",
            OOTB: "ImageSet_light",
            ASSET: "dynamicimageset-sample",
            TYPE: "IMAGESET",
            MARKER: "s7zoomviewer"
        },
        "SPIN_SET": {
            CTOR: "SpinViewer",
            OOTB: "SpinSet_light",
            ASSET: "dynamicspinset-sample",
            TYPE: "SPINSET",
            MARKER: "s7spinviewer"
        },
        "ZOOM": {
            CTOR: "BasicZoomViewer",
            OOTB: "Zoom_light",
            ASSET: "dynamicmedia-sample.jpg",
            TYPE: "IMAGE",
            MARKER: "s7basiczoomviewer"
        },
        "VIDEO": {
            CTOR: "VideoViewer",
            OOTB: "Video_social",
            ASSET: "dynamicvideo-sample.mp4",
            TYPE: "VIDEO",
            MARKER: "s7videoviewer"
        },
        "MIXED_MEDIA": {
            CTOR: "MixedMediaViewer",
            OOTB: "MixedMedia_light",
            ASSET: "dynamicmixedmedia-sample",
            TYPE: "MIXEDMEDIASET",
            MARKER: "s7mixedmediaviewer"
        },
        "INTERACTIVE_IMAGE": {
            CTOR: "InteractiveImage",
            OOTB: "Shoppable_Banner",
            ASSET: "dynamicmedia-interactive-image.jpg",
            TYPE: "INTERACTIVEIMAGE",
            MARKER: "s7interactiveimage"
        },
        "INTERACTIVE_VIDEO": {
            CTOR: "InteractiveVideoViewer",
            OOTB: "Shoppable_Video_Dark",
            ASSET: "dynamicvideo-sample.mp4",
            TYPE: "INTERACTIVEVIDEO",
            MARKER: "s7interactivevideoviewer"
        },
        "CAROUSEL_SET": {
            CTOR: "CarouselViewer",
            OOTB: "Carousel_Dotted_light",
            ASSET: "dynamicmedia-carousel-sample",
            TYPE: "CAROUSELSET",
            MARKER: "s7carouselviewer"
        },
        "PANORAMIC_IMAGE": {
            CTOR: "PanoramicViewer",
            OOTB: "PanoramicImage",
            ASSET: "drawingroom",
            TYPE: "PANORAMICIMAGE",
            MARKER: "s7panoramicviewer"
        },
        "VERTICAL_ZOOM": {
            CTOR: "ZoomVerticalViewer",
            OOTB: "ZoomVertical_light",
            ASSET: "dynamicimageset-sample",
            TYPE: "VERTICAL_ZOOM",
            MARKER: "s7zoomverticalviewer"
        },
        "VIDEO_360": {
            CTOR: "Video360Viewer",
            OOTB: "Video360_social",
            ASSET: "dynamicvideo360-sample.mp4",
            TYPE: "VIDEO_360",
            MARKER: "s7video360viewer"
        },
        "SMART_CROP_VIDEO": {
            CTOR: "SmartCropVideoViewer",
            OOTB: "SmartCropVideo_social",
            ASSET: "dynamicvideo-sample.mp4",
            TYPE: "SMART_CROP_VIDEO",
            MARKER: "s7smartcropvideoviewer"
        },
        "DIMENSIONAL": {
            CTOR: "DimensionalViewer",
            OOTB: "Dimensional",
            ASSET: "dynamicmedia-3d-asset.glb",
            TYPE: "THREED",
            MARKER: "s7dimensionalviewer"
        }        
    });

    /**
     * Helper to access CATEGORY_MAP and check sanity
     */
    s7ve.getCategoryDesc = function (category) {
        var desc = s7ve.CATEGORY_MAP[category.toUpperCase()];
        if (!desc) {
            throw new Error("Invalid preset category!");
        }
        return desc;
    };

    /**
     * Module with helper functions for various initialization tasks
     */
    s7ve.Bootstrap = (function () {
        return {
            /**
             * Simple helper to read URL arguments interpreted by the Viewer Preset Editor
             */
            getUrlArgs: function () {
                return {
                    "presetType": s7ve.Util.getQueryParam("presetType") || "",
                    "presetName": s7ve.Util.getQueryParam("presetName") || "",
                    "preset": s7ve.Util.getQueryParam("preset") || ""
                };
            },
            /**
             * Set the necessary data attributes on a given element using provided
             * preset object to allow Image component to load viewer.
             */
            setViewerElement: function ($element, preset) {
                var category = preset.getCategory(),
                    s7type = s7ve.getCategoryDesc(category).TYPE,
                    s7preset = preset.getUri();

                // Read attributes from info component, fallback to blank sample if not available
                var infoData = $(ID_ASSET_INFO_PREFIX + category.toLowerCase() + ", " + ID_BLANK_INFO).first().data(),
                    s7asset = (infoData && infoData.assetPath) || "";
                if(category == "DIMENSIONAL" && infoData.remoteasset){
                    s7asset = "/content/dam/_DMSAMPLE/" + infoData.assetName;
                }
                // Only set if not already defined, this allows clients to specify precedence
                s7ve.Util.setAttrIfAbsent($element, "data-s7type", s7type);
                s7ve.Util.setAttrIfAbsent($element, "data-s7asset", s7asset);

                if (s7preset) {
                    // We will not set the preset since the editor will dynamically apply
                    // s7ve.Util.setAttrIfAbsent($element, "data-s7preset", s7preset);
                }
            },
            /**
             * Download OOTB viewer script given category
             */
            downloadOotbViewer: function (category) {
                var ctor = s7ve.getCategoryDesc(category).CTOR,
                    url = s7ve.VIEWER_CONFIG.s7viewerPath + "html5/js/" + ctor + ".js";

                // We use script method since OOTB viewers inspect script src
                return new Promise(function (resolve, reject) {
                    var script = document.createElement("script");
                    script.onload = function () {
                        resolve.apply(arguments);
                    };
                    script.onerror = function () {
                        reject.apply(arguments);
                    };
                    $(script).appendTo(document.head).attr("type", "text/javascript").attr("src", url);
                });
            },
            /**
             * Create new Preset instance using the existing OOTB presets as base for
             * modifier and css values. The OOTB preset used is determined by the given
             * category and the CATEGORY_TO_DEFAULT_PRESET map.
             */
            initDefaultPreset: function (id, category) {

                // Use OOTB preset as basis for new preset
                var ootbId = s7ve.getCategoryDesc(category).OOTB,
                    preset = new s7ve.Preset(ootbId);

                return preset.fetch().then(function (ootbPreset) {
                    var newPreset = new s7ve.Preset(id);
                    // set same properties as base OOTB preset
                    newPreset.setCategory(category);
                    newPreset.setModifiers(ootbPreset.getModifiers());
                    newPreset.setCss(ootbPreset.getCss());
                    newPreset.setRefStyle(ootbPreset.getStyle());
                    return newPreset;
                });
            }
        };
    }());

    /**
     * Class to simplify loading, creating and updating server-side preset data
     * @param {String} id Name of preset to represent
     */
    s7ve.Preset = function Preset(id) {

        var id = s7ve.Util.stripReserveredUriCharacters(id), iscustom = true,
            uri, category, css, style, refStyle, modifiers = {}, dirty = true, supressChangeEvent = true;

        if (!id || $.type(id) !== "string") {
            throw new Error("Invalid 'id' parameter! Must be string with length greater than zero.");
        }

        var commonParams = {
            "platform": "html5",
            // The name of this property is critical for utf-8 handling on server
            "_charset_": "utf-8"
        };

        this.getId = function () {
            return id;
        };
        this.getIsCustom = function () {
            return iscustom;
        };
        this.setCategory = function (value) {
            value = String(value).toUpperCase();
            if (!s7ve.CATEGORY_MAP[value]) {
                throw new Error("Invalid preset category!");
            }
            category = value;
            this.setDirty(true);
        };
        this.getCategory = function () {
            return category;
        };
        this.setModifiers = function (value) {
            modifiers = value;
            this.setDirty(true);
        };
        this.getModifiers = function (encode) {
            return encode ? getEncodedModifiers(modifiers) : modifiers;
        };
        this.setCss = function (value) {
            css = value;
            this.setDirty(true);
        };
        this.getCss = function () {
            return css || "";
        };
        this.getUri = function () {
            return uri;
        };
        this.getRefStyle = function () {
            return refStyle;
        };
        this.setRefStyle = function (value) {
            refStyle = value;
        };
        this.getStyle = function () {
            return style;
        };
        this.setStyle = function (value) {
            style = value;
            this.setDirty(true);
        };
        this.getDirty = function () {
            return dirty;
        };
        this.setDirty = function (value) {
            dirty = value;
            //if data is dirty and change is not suppressed
            if(value === true && !supressChangeEvent) {
                $(document).trigger({
                    type: s7ve.Event.PRESET_CHANGE,
                    preset: this
                });
            }
        };
        //Set supress of onChange event
        this.setSupressChangeEvent = function(value) {
            supressChangeEvent = value;
        }
        this.localClone = function (id) {
            var preset = new s7ve.Preset(id);
            preset.setCategory(this.getCategory());
            preset.setModifiers(this.getModifiers());
            preset.setCss(this.getCss());
            return preset;
        };

        /**
         * Convert modifiers object into Array of pipe delimited key value strings
         */
        function getEncodedModifiers() {
            var result = [];
            s7ve.Util.iterate(modifiers, function (value, key) {
                result.push(key + "|" + value);
            });
            return result;
        }

        function getPostUrl(id) {
            return ["/conf/global/settings/dam/dm/presets/viewer/", id, ".viewerpresets.json"].join("");
        }

        /**
         * Promise to post object to url
         */
        function post(url, params) {
            return new Promise(function (resolve, reject) {
                $.post(url, params, resolve).fail(reject);
            });
        }

        /**
         * Private helper to clear dirty flag, useful within promise chain
         */
        var clearDirty = function () {
            this.setDirty(false);
            // Allow promise handlers to have easy access to instance
            return this;
        }.bind(this);

        /**
         * Create a new preset on the server
         */
        this.create = function (skipFetch) {
            if (uri) {
                return Promise.reject("This preset has already been created! Try update method.");
            }
            var params = $.extend({
                ":operation": "create",
                "isactive": true,
                "category": category,
                "name": id,
                "css": this.getCss(),
                "modifier": this.getModifiers(true)
            }, commonParams);

            // If path to an existing CSS file is set using the 'style' property, then post the parameter to reference it
            // with the new preset. Otherwise the servlet will create a new associated CSS file using the text in 'css'.
            params = $.extend(this.getStyle() ? { "style": this.getStyle() } : { "css": this.getCss() }, params);

            // Post then immediately fetch so that we have all server generated data
           // return post(getPostUrl("viewers"), params).then(skipFetch ? clearDirty : this.fetch);
            return post(getPostUrl(''), params).then(skipFetch ? clearDirty : this.fetch);
        }.bind(this);

        /**
         * Update a preset that has been fetched from server
         */
        this.update = function (skipFetch) {
            if (!uri) {
                return Promise.reject("Cannot update a preset that has not been committed or loaded to/from server!");
            }
            var params = $.extend({
                ":operation": "update",
                "style": style,
                "css": this.getCss(),
                "modifier": this.getModifiers(true)
            }, commonParams);

            // for bc we need to support viewer presets located in /etc...
            var posturl = uri.startsWith("/etc/dam/presets/viewer") ? (uri + ".viewerpresets.json") : getPostUrl(id);
            return post(posturl, params).then(skipFetch ? clearDirty : this.fetch);
        }.bind(this);

        /**
         * Populate this instance with preset data from server
         */
        this.fetch = function () {

            return s7ve.Preset.getAllPresetJson().then(function (presetData) {
                var myPreset = presetData[id];

                if (!myPreset) {
                    return Promise.reject("Preset does not exist on server!");
                }

                modifiers = myPreset.modifiers;
                category = myPreset.category;
                uri = myPreset.uri;
                style = myPreset.style;
                iscustom = myPreset.iscustom;

                if ((style || "").match(/(.css)$/)) {
                    return s7ve.Util.downloadCss("/" + style);
                }

            }).then(function (cssText) {
                if (cssText) {
                    css = cssText;
                }
            }).then(clearDirty);

        }.bind(this);

        /**
         * Helper to simplify create/update. If uri has not been set, then
         * we have not fetched this preset from server, thus we must create.
         * Passing 'true' will prevent Preset class from making subsequent
         * fetch requests.
         */
        this.commit = function (skipFetch) {
            return uri ? this.update(skipFetch) : this.create(skipFetch);
        };
    };

    /**
     * Static helper promise to retrieve all preset data from server
     */
    s7ve.Preset.getAllPresetJson = function () {
        var url = "/.viewerpresets.json";

        return new Promise(function (resolve, reject) {
            $.ajax({
                url: url,
                dataType: "json",
                type: "get",
                cache: false,
                success: function (json) {
                    var result = {};

                    // clean up JSON response for result
                    (json || []).forEach(function (item) {
                        var content = item["jcr:content"],
                            userdata = content && content.userdata,
                            cleanData = userdata && cleanUserData(userdata);

                        if (userdata) {
                            //for 0dt, iscustom=false is now under 'jcr:content' for OOTB viewer preset instead of returning from servlet
                            var isCustomPreset = (typeof item['jcr:content'].iscustom != "undefined" ? item['jcr:content'].iscustom : true)
                            result[item.id] = {
                                "id": item.id,
                                "uri": item.uri,
                                "category": content.category,
                                "style": userdata.style,
                                "modifiers": cleanData,
                                "iscustom": isCustomPreset,
                                "isactive": content.isactive
                            };
                        }
                    });
                    resolve(result);
                },
                error: function () {
                    reject.apply(null, arguments);
                }
            });
        });
        function cleanUserData(userdata) {
            var cleanData = {};
            $.each(userdata, function (i, v) {
                if (!i.match(/^(id|uri|style|jcr:primaryType)$/)) {
                    cleanData[i] = v;
                }
            });
            return cleanData;
        }
    };

    /**
     * @class
     *
     * SymboleResolver constructor
     */
    s7ve.SymbolResolver = function SymbolResolver() {
        this.defaultTexts = {};
        this.localizedTexts = {};
        this.locale = "";
    };

    /**
     * Sets localized text for the viewer editor
     */
    s7ve.SymbolResolver.prototype.localizedTexts = {};

    /**
     * Merge symbols into default map
     */
    s7ve.SymbolResolver.prototype.addDefaultSymbolTexts = function (value) {
        // Iterate through symbols and merge into main defaultTexts object
        var symbol;
        for (symbol in value) {
            if (value.hasOwnProperty(symbol)) {
                this.defaultTexts[symbol] = value[symbol];
            }
        }
    };

    /**
     * Set current locale to resolve symbols to
     */
    s7ve.SymbolResolver.prototype.setLocale = function (locale) {
        this.locale = locale;
    };

    /**
     * Return resolved value given symbol name. If no localized text exists, return
     * text, otherwise return symbol name.
     */
    s7ve.SymbolResolver.prototype.getLocalizedText = function (symbolName) {
        var symbolsByLocale = this.localizedTexts[this.locale] || {},
            symbolValue = symbolsByLocale[symbolName];

        if ($.type(symbolValue) !== "string") {
            // check defaultText object if no localized text found
            symbolValue = this.defaultTexts[symbolName];

            if ($.type(symbolValue) !== "string") {
                // If the symbol has not been defined anywhere, just resolve to symbol name
                symbolValue = symbolName;
            }
        }

        return symbolValue;
    };

    /**
     * General utility functions
     */
    s7ve.Util = {
        /**
         * Wraps input function so that calls are queued and invoked only once per specified
         * time interval.
         */
        spacer: function (func, delay) {
            var intervalId,
                jobs = [];

            function pulse() {
                if (jobs.length) {
                    jobs.shift().call();
                } else {
                    clearInterval(intervalId);
                    intervalId = null;
                }
            }
            return function () {
                var invocationArgs = arguments;

                if (!intervalId) {
                    intervalId = setInterval(pulse, delay);
                }
                jobs.push(function () {
                    func.apply(null, invocationArgs);
                });
            };
        },
        /**
         * Wraps input function so that only the last invocation per defined time period is
         * executed.
         */
        debounce: function (setter, delay) {
            var timeoutId;

            return {
                press: function () {
                    var setArguments = arguments;

                    if (timeoutId !== null) {
                        clearTimeout(timeoutId);
                    }

                    return new Promise(function (resolve, reject) {
                        timeoutId = setTimeout(function () {
                            var result = setter.apply(null, setArguments);
                            resolve.apply(null, [result]);
                        }, delay);
                    });
                }
            };
        },
        /**
         * Helper to iterate own properties on an object
         */
        iterate: function (object, callback) {
            for (var property in object) {
                if (object.hasOwnProperty(property)) {
                    callback(object[property], property);
                }
            }
        },
        /**
         * Returns the value of the provided URL parameter.
         */
        getQueryParam: function (param) {
            var qStr = window.location.search.split('?')[1],
                val;

            if (qStr === undefined) {
                return qStr;
            }

            val = qStr.split(param + '=')[1];
            if (val === undefined) {
                return val;
            }

            val = val.split("&")[0];
            return decodeURIComponent(val);
        },
        /**
         * Returns a promise to download the CSS text from the provided url.
         */
        downloadCss: function (url) {
            return new Promise(function (resolve, reject) {
                $.ajax({
                    url: url,
                    cache: false,
                    complete: function (event) {
                        resolve(event.responseText);
                    },
                    error: function (event) {
                        reject(event);
                    }
                });
            });
        },
        setAttrIfAbsent: function (element, attribute, value) {
            var existing = $(element).attr(attribute),
                tokens = attribute.split("data-");
            if (typeof existing === "undefined" || existing === false) {
                $(element).attr(attribute, value);
                $(element).data(tokens[1], value);
            }
        },
        /**
         * Find control element that is handled for hiding or showing content
         */
        getControlElement: function (id) {
            // Remove leading '#' from id
            id = (id && id[0] === "#") ? id.substr(1) : "";

            // Find element that controls element with id
            return $("[aria-controls='" + id + "']");
        },
        /**
         * Helper to close css picker instances within promise objects
         */
        closePicker: function () {
            $('#csspicker').hide();
        },
        /**
         * Helper to wrap asset picker instances within promise objects. Asset pickers
         * are referenced by id. Invoking with the same id as a currently open picker
         * will cause the window to refresh and any prior promise will no longer resolve.
         */
        selectAsset: function () {

            var windowMap = {},
                windowNamespace = "s7ve_";

            function receiveMessage(event) {

                var srcIFrame = document.getElementById('csCSSPickerFrame');
                // Don't accept messages from other sources!
                if (!srcIFrame || event.origin !== location.origin ||  srcIFrame.contentWindow !== event.source) {
                    return;
                }

                var id = windowNamespace + 'csspicker',
                    responder = windowMap[id],
                    picker = event.source;

                if (!responder) {
                    // close picker
                    s7ve.Util.closePicker();
                    return;
                }
                var data = JSON.parse(event.data),
                    action = data.config && data.config.action;

                if (action === "close" || action === "done") {
                    delete windowMap[id];
                    // close picker
                    s7ve.Util.closePicker();
                }
                if(data.config !== undefined){
                  responder.resolve(data);
                }
            }

            window.addEventListener("message", receiveMessage, false);

            /**
             * Invokes asset picker create
             */
            return function (id, mime) {

                var mimeParam = mime ? ("&mimeType=" + mime) : "",
                    pickerUrl = Granite.HTTP.externalize("/aem/assetpicker?mode=single" + mimeParam),
                    fullId = windowNamespace + id,
                    responder = windowMap[fullId];

                return new Promise(function (resolve, reject) {
                    windowMap[fullId] = {
                        resolve: resolve,
                        reject: reject
                    };
                    
                    var callbackObj = { 'sid': 2 };
                    $(document).trigger({'type': 'cs-dm-launch-css-picker',
                        'id': fullId,
                        'path': Granite.HTTP.externalize(pickerUrl)});
                });
            };
        }(),
        /**
         * Trigger s7ve level dialog request event. This should be handled by host page
         * to display dialog.
         */
        triggerAlert: function (title, message, isConfirm) {
            return new Promise(function (resolve, reject) {
                $(document).trigger({
                    "type": s7ve.Event.ALERT_DIALOG,
                    "message": message,
                    "title": title,
                    "isconfirm": isConfirm,
                    "confirm": function () {
                        resolve(true);
                    },
                    "close": function () {
                        resolve(false);
                    }
                });
            });
        },
        getFnName: function (fn) {
            if (typeof fn.name !== "undefined") {
                return fn.name;
            }
            // Parse name from string representation of constructor
            return fn.toString().match(/function\s+(\w*)/)[1];
        },
        removeLeadingForwardSlash: function (path) {
            return path.replace(/^\//, "");
        },
        /**
         * Helper to manipulate paths defined using CSS url function notation. Callback is invoked
         * for every path matched in provided CSS text. Callback return value is used for replacement.
         */
        replaceCssUrlPaths: function (cssText, callback) {
            return cssText.replace(/\burl\(\s*["']?(.*?)["']?\s*\)/g, function (match, p1_path) {
                return 'url("' + callback(p1_path) + '")';
            });
        },
        /**
         * These characters are not currently supported in preset IDs as the servlet currently
         * creates node names as provided. If we encode the string, then it will be double
         * encoded on the server.
         */
        stripReserveredUriCharacters: function (str) {
            return str.replace(/[\!\#\$\&\'\(\)\*\+\,\/\:\;\=\?\@\[\]]/g, "");
        },
        firstLetterToUpperCase: function (str) {
            return str[0].toUpperCase() + str.slice(1);
        },
        /**
         * Regex helpers
         */
        regex: {
            /**
             * Search string for CSS url function and capture path at index[1]. This will
             * tolerate both single and double quotes as well as extra whitespace.
             */
            parseCssUrlFunc: function (str) {
                return str.match(/url\(["'\s]*(.*?)["'\s]*\)/);
            }
        }
    };

    /**
     * Wrappers to conditionally invoke console output
     */
    s7ve.log = function log() {
        if (s7ve.DEBUG && console && console.log) {
            console.log.apply(console, arguments);
        }
    };
    s7ve.warn = function warn() {
        if (s7ve.DEBUG) {
            if (console && console.warn) {
                console.warn.apply(console, arguments);
            } else {
                s7ve.log.apply(null, arguments);
            }
        }
    };

    /**
     * Global events broadcast by s7ve module
     */
    s7ve.Event = {
        ALERT_DIALOG: "s7ve-alertdialog",
        LOADED: "s7ve-loaded",
        PRESET_CHANGE: "s7ve-presetchange"
    }

    // Notify other components that may be embedding viewer preset editor
    // that we have loaded, and APIs can be invoked.
    $(document).trigger(s7ve.Event.LOADED);

}(this.s7ve = this.s7ve || {}, this.$));

/**
 * CQ-106298 - [AEM 6.3] nosamplecontent run mode breaks our ability to create custom viewer presets
 *
 * Dummy polyfill to allow graceful degradation when CodeMirror is unavailable
 */
(function (pkg, alias, force) {
    "use strict";

    // Default package is global object, with property name: 'CodeMirror'
    pkg[alias] = (!force && pkg[alias]) || (function () {

        function CodeMirrorDummy() {
            var _value, _cursor;
            return {
                setValue: function (value) {
                    _value = value;
                },
                getValue: function () {
                    return _value;
                },
                setCursor: function (cursor) {
                    _cursor = cursor
                },
                getCursor: function () {
                    return _cursor;
                },
                on: $.noop
            };
        };
        CodeMirrorDummy.isDummy = true;
        return CodeMirrorDummy;
    }());
}(this, "CodeMirror", false));