/*
 * Copyright 1997-2008 Day Management AG
 * Barfuesserplatz 6, 4001 Basel, Switzerland
 * All Rights Reserved.
 *
 * This software is the confidential and proprietary information of
 * Day Management AG, ("Confidential Information"). You shall not
 * disclose such Confidential Information and shall use it only in
 * accordance with the terms of the license agreement you entered into
 * with Day.
 */

/**
 * A helper class providing a set of MSM-related methods or properties.
 * @static
 * @singleton
 * @class CQ.wcm.msm.MSM
 */
CQ.wcm.msm.MSM = function() {
	var CFG_ROLLOUT_MGR = "com.day.cq.wcm.msm.api.RolloutManager";
    var CFG_ROLLOUT_EXCLUDE_PROPS = "rolloutmgr.excludedprops.default";
    var CFG_ROLLOUT_EXCLUDE_PARA_PROPS = "rolloutmgr.excludedparagraphprops.default";

    var serverConfig = null;

    var init = function() {
        var url = CQ.HTTP.externalize("/libs/wcm/msm/content/info.json", false);
        var serverResponse = CQ.utils.HTTP.get(url, null, this);
        if (CQ.utils.HTTP.isOk(serverResponse)) {
            var data = CQ.Util.eval(serverResponse);
            serverConfig = data.config;
        }
    };

    return {
        PARAM_SOURCEPATH: "msm:sourcePath",
        PARAM_TARGETPATH: "msm:targetPath",
        PARAM_SYNCPATH: "msm:syncPath",
        PARAM_LIVECOPY_PATH: "msm:liveCopyPath",
        PARAM_LIVECOPY_BPPATH: "msm:liveCopyBpPath",

        PARAM_IS_DEEP: "msm:isDeep",
        PARAM_STATUS: "msm:status",
        PARAM_TRIGGER: "msm:trigger",
        PARAM_COMPUTATION_TIME: "msm:computationTime",

        PARAM_ACTION_CONFIG: "msm:actionConfig",

        PARAM_IS_CANCELLED: "msm:isCancelled",
        PARAM_IS_CANCELLED_FOR_CHILDREN: "msm:isCancelledForChildren",
        PARAM_IS_CANCELLED_ON: "msm:isCancelledOn",
        PARAM_IS_EDITABLE: "msm:isEditable",
        PARAM_IS_PAGE: "msm:isPage",
        PARAM_IS_TARGET_EXISTING: "msm:isTargetExisting",
        PARAM_IS_TARGET_DELETED: "msm:isTargetDeleted",
        PARAM_IS_TARGET_MODIFIED: "msm:isTargetModified",
        PARAM_IS_TARGET_CANCELLED_CHILD: "msm:isTargetCancelledChild",
        PARAM_IS_TARGET_CANCELLED_PROPERTY: "msm:isTargetCancelledProperty",
        PARAM_IS_TARGET_MANUALLY_CREATED: "msm:isTargetManuallyCreated",
        PARAM_IS_TARGET_FROM_DIFFERENT_TREE: "msm:isTargetFromDifferentTree",
        PARAM_IS_TARGET_SKIPPED: "msm:isTargetSkipped",
        PARAM_IS_SOURCE_EXISTING: "msm:isSourceExisting",
        PARAM_IS_SOURCE_DELETED: "msm:isSourceDeleted",
        PARAM_IS_SOURCE_MODIFIED: "msm:isSourceModified",

        PARAM_LIVE_RELATIONSHIP: "msm:liveRelationship",
        PARAM_TARGETS: "msm:targets",

        PARAM_IS_LIVECOPY: "msm:isLiveCopy",
        PARAM_IS_IN_BLUEPRINT: "msm:isInBlueprint",
        PARAM_IS_SOURCE: "msm:isSource",

        PARAM_IS_INHERITED_CONFIG: "msm:isInheritedConfig",
        PARAM_IS_ROOT_CONFIG: "msm:isRootConfig",

        PARAM_PROPERTY_NAME: "msm:propertyName",
        PARAM_CANCELED_PROPERTIES: "msm:cancelledProperties",
        PARAM_PROPERTY_INHERITANCE_CANCELED: "cq:propertyInheritanceCancelled",

        MIXIN_LIVE_RELATIONSHIP: "cq:LiveRelationship",
        MIXIN_LIVE_SYNC: "cq:LiveSync",
        MIXIN_LIVE_SYNC_CANCELLED: "cq:LiveSyncCancelled",

        PARAM_SKIPPED_PAGES: "skippedPage",

        /**
         * Returns the default field for the sync trigger.
         * @return {CQ.Ext.form.ComboBox} Trigger combo
         * @static
         */
        getSyncTriggerConfig: function() {
            return new CQ.Ext.form.ComboBox({
                "stateful": false,
                "fieldLabel": CQ.I18n.getMessage("Sync Trigger"),
                "allowBlank": false,
                "defaultValue": "never",
                "value": "never",
                "name": "trigger",
                "cls": "cq-msm-synctrigger",
                "hiddenName": "msm:trigger",
                "displayField":"label",
                "valueField":"id",
                "typeAhead": true,
                "mode": "local",
                "triggerAction": "all",
                "store": new CQ.Ext.data.SimpleStore({
                    "fields": ["id", "label"],
                    "data": [
                        ["never", CQ.I18n.getMessage("Never")],
                        ["rollout", CQ.I18n.getMessage("On Rollout")],
                        ["modification", CQ.I18n.getMessage("On Modification")],
                        ["publish", CQ.I18n.getMessage("On Activation")],
                        ["deactivate", CQ.I18n.getMessage("On Deactivation")]
                    ]
                })
            });
        },

        /**
         * Returns a HTML view of the status of the given live relationship.
         * @param {Object} lr Live relationship
         * @return {String} HTML string
         * @static
         */
        getRelationStatus: function(lr /*live relationship*/) {
            var ret = "";
            if (lr && lr[CQ.wcm.msm.MSM.PARAM_SOURCEPATH] && lr[CQ.wcm.msm.MSM.PARAM_STATUS]) {
                if (!lr[CQ.wcm.msm.MSM.PARAM_STATUS][CQ.wcm.msm.MSM.PARAM_IS_CANCELLED]) {
                    if (lr[CQ.wcm.msm.MSM.PARAM_STATUS][CQ.wcm.msm.MSM.PARAM_IS_TARGET_EXISTING]
                    && lr[CQ.wcm.msm.MSM.PARAM_STATUS][CQ.wcm.msm.MSM.PARAM_IS_SOURCE_EXISTING]
                       && !lr[CQ.wcm.msm.MSM.PARAM_STATUS][CQ.wcm.msm.MSM.PARAM_IS_TARGET_MANUALLY_CREATED]) {

                        if (lr[CQ.wcm.msm.MSM.PARAM_STATUS][CQ.wcm.msm.MSM.PARAM_IS_SOURCE_MODIFIED]) {
                            if (lr[CQ.wcm.msm.MSM.PARAM_STATUS][CQ.wcm.msm.MSM.PARAM_IS_TARGET_CANCELLED_CHILD]
                                || lr[CQ.wcm.msm.MSM.PARAM_STATUS][CQ.wcm.msm.MSM.PARAM_IS_TARGET_CANCELLED_PROPERTY]) {
                                var text = CQ.wcm.msm.MSM.Texts.LR.States.getTextWithParams("msm-status-src-modified-cancelled-par",[CQ.wcm.msm.MSM.filterPagePath(lr[CQ.wcm.msm.MSM.PARAM_SOURCEPATH])]);
                                var clazz = CQ.wcm.msm.MSM.Texts.LR.States["msm-status-src-modified-cancelled-par"]["iconClass"];
                                return "<div class=\"msm-status " + clazz + "\" title=\"" + text + "\" alt=\"" + text + "\"></div>";
                            } else {
                                var text = CQ.wcm.msm.MSM.Texts.LR.States.getTextWithParams("msm-status-src-modified", [CQ.wcm.msm.MSM.filterPagePath(lr[CQ.wcm.msm.MSM.PARAM_SOURCEPATH])]);
                                var clazz = CQ.wcm.msm.MSM.Texts.LR.States["msm-status-src-modified"]["iconClass"];
                                return "<div class=\"msm-status " + clazz + "\" title=\"" + text + "\" alt=\"" + text + "\"></div>";
                            }
                        } else {
                            if (lr[CQ.wcm.msm.MSM.PARAM_STATUS][CQ.wcm.msm.MSM.PARAM_IS_TARGET_MODIFIED]) {
                                if (lr[CQ.wcm.msm.MSM.PARAM_STATUS][CQ.wcm.msm.MSM.PARAM_IS_TARGET_CANCELLED_CHILD]
                                    || lr[CQ.wcm.msm.MSM.PARAM_STATUS][CQ.wcm.msm.MSM.PARAM_IS_TARGET_CANCELLED_PROPERTY]) {
                                    var text = CQ.wcm.msm.MSM.Texts.LR.States.getTextWithParams("msm-status-target-modified-cancelled-par",[CQ.wcm.msm.MSM.filterPagePath(lr[CQ.wcm.msm.MSM.PARAM_TARGETPATH])]);
                                    var clazz = CQ.wcm.msm.MSM.Texts.LR.States["msm-status-target-modified-cancelled-par"]["iconClass"];
                                    return "<div class=\"msm-status " + clazz + "\" title=\"" + text + "\" alt=\"" + text + "\"></div>";
                                } else {
                                    // only modified
                                    var text = CQ.wcm.msm.MSM.Texts.LR.States.getTextWithParams("msm-status-target-modified", [CQ.wcm.msm.MSM.filterPagePath(lr[CQ.wcm.msm.MSM.PARAM_TARGETPATH])]);
                                    var clazz = CQ.wcm.msm.MSM.Texts.LR.States["msm-status-target-modified"]["iconClass"];
                                    return "<div class=\"msm-status " + clazz + "\" title=\"" + text + "\" alt=\"" + text + "\"></div>";
                                }
                            } else {
                                if (lr[CQ.wcm.msm.MSM.PARAM_STATUS][CQ.wcm.msm.MSM.PARAM_IS_TARGET_CANCELLED_CHILD]
                                    || lr[CQ.wcm.msm.MSM.PARAM_STATUS][CQ.wcm.msm.MSM.PARAM_IS_TARGET_CANCELLED_PROPERTY]) {
                                    var text = CQ.wcm.msm.MSM.Texts.LR.States.getTextWithParams("msm-status-synchronized-cancelled-par", [CQ.wcm.msm.MSM.filterPagePath(lr[CQ.wcm.msm.MSM.PARAM_SOURCEPATH]),CQ.wcm.msm.MSM.filterPagePath(lr[CQ.wcm.msm.MSM.PARAM_TARGETPATH])]);
                                    var clazz = CQ.wcm.msm.MSM.Texts.LR.States["msm-status-synchronized-cancelled-par"]["iconClass"];
                                    return "<div class=\"msm-status " + clazz + "\" title=\"" + text + "\" alt=\"" + text + "\"></div>";
                                } else {
                                    var text = CQ.wcm.msm.MSM.Texts.LR.States.getTextWithParams("msm-status-synchronized", [CQ.wcm.msm.MSM.filterPagePath(lr[CQ.wcm.msm.MSM.PARAM_SOURCEPATH]),CQ.wcm.msm.MSM.filterPagePath(lr[CQ.wcm.msm.MSM.PARAM_TARGETPATH])]);
                                    var clazz = CQ.wcm.msm.MSM.Texts.LR.States["msm-status-synchronized"]["iconClass"];
                                    return "<div class=\"msm-status " + clazz + "\" title=\"" + text + "\" alt=\"" + text + "\"></div>";
                                }
                            }
                        }
                    //not both existing and not manually created
                    } else {
                        if(lr[CQ.wcm.msm.MSM.PARAM_STATUS][CQ.wcm.msm.MSM.PARAM_IS_SOURCE_EXISTING]) {
                            var text, clazz;
                            if(lr[CQ.wcm.msm.MSM.PARAM_STATUS][CQ.wcm.msm.MSM.PARAM_IS_TARGET_DELETED]) {
                                text = CQ.wcm.msm.MSM.Texts.LR.States.getTextWithParams("msm-status-target-deleted", [CQ.wcm.msm.MSM.filterPagePath(lr[CQ.wcm.msm.MSM.PARAM_TARGETPATH])]);
                                clazz = CQ.wcm.msm.MSM.Texts.LR.States["msm-status-target-deleted"]["iconClass"];
                            } else if (lr[CQ.wcm.msm.MSM.PARAM_STATUS][CQ.wcm.msm.MSM.PARAM_IS_TARGET_MANUALLY_CREATED]) {
                                text = CQ.wcm.msm.MSM.Texts.LR.States.getTextWithParams("msm-status-new", [CQ.wcm.msm.MSM.filterPagePath(lr[CQ.wcm.msm.MSM.PARAM_TARGETPATH])]);
                                clazz = CQ.wcm.msm.MSM.Texts.LR.States["msm-status-new"]["iconClass"];
                            } else if(lr[CQ.wcm.msm.MSM.PARAM_STATUS][CQ.wcm.msm.MSM.PARAM_IS_TARGET_SKIPPED]) {
                                 text = CQ.wcm.msm.MSM.Texts.LR.States.getTextWithParams("msm-status-skipped", [CQ.wcm.msm.MSM.filterPagePath(lr[CQ.wcm.msm.MSM.PARAM_TARGETPATH])]);
                                clazz = CQ.wcm.msm.MSM.Texts.LR.States["msm-status-skipped"]["iconClass"];
                            } else {
                                text = CQ.wcm.msm.MSM.Texts.LR.States.getTextWithParams("msm-status-never-created", [CQ.wcm.msm.MSM.filterPagePath(lr[CQ.wcm.msm.MSM.PARAM_TARGETPATH])]);
                                clazz = CQ.wcm.msm.MSM.Texts.LR.States["msm-status-never-created"]["iconClass"];
                            }
                            return "<div class=\"msm-status " + clazz + "\" title=\"" + text + "\" alt=\"" + text + "\"></div>";
                        } else if (lr[CQ.wcm.msm.MSM.PARAM_STATUS][CQ.wcm.msm.MSM.PARAM_IS_SOURCE_DELETED]) {
                            text = CQ.wcm.msm.MSM.Texts.LR.States.getTextWithParams("msm-status-src-deleted", [CQ.wcm.msm.MSM.filterPagePath(lr[CQ.wcm.msm.MSM.PARAM_SOURCEPATH])]);
                            clazz = CQ.wcm.msm.MSM.Texts.LR.States["msm-status-src-deleted"]["iconClass"];
                            return "<div class=\"msm-status " + clazz + "\" title=\"" + text + "\" alt=\"" + text + "\"></div>";
                        }
                    }

                //canceled status
                } else {
                    if (lr[CQ.wcm.msm.MSM.PARAM_STATUS][CQ.wcm.msm.MSM.PARAM_IS_SOURCE_EXISTING]
                            || lr[CQ.wcm.msm.MSM.PARAM_STATUS][CQ.wcm.msm.MSM.PARAM_IS_SOURCE_DELETED]) {
                        var text = CQ.wcm.msm.MSM.Texts.LR.States.getTextWithParams("msm-status-cancelled", [CQ.wcm.msm.MSM.filterPagePath(lr[CQ.wcm.msm.MSM.PARAM_SOURCEPATH])]);
                        var clazz = CQ.wcm.msm.MSM.Texts.LR.States["msm-status-cancelled"]["iconClass"];
                        return "<div class=\"msm-status " + clazz + "\" title=\"" + text + "\" alt=\"" + text + "\"></div>";
                    }
                }
            }
            //fallback
            return "";
        },

        /**
         * Returns the set of action fields. Sync actions are extracted from {@link CQ.wcm.msm.MSM#MSM.ACTIONS ACTIONS} array.
         * Actions inheritance can be checked: if an action is flagged as inherited (action["inherited"] = true), then
         * it is disabled.
         * @param {Boolean} checkInheritance True to check inheritance
         * @return {CQ.Ext.form.FieldSet} Sync actions
         * @static
         */
        getSyncActionsConfig: function(checkInheritance) {
            var actions = new Array();
            for (var i = 0; i < CQ.wcm.msm.MSM.ACTIONS.length; i++) {
                var config = CQ.Util.applyDefaults({}, CQ.wcm.msm.MSM.ACTIONS[i]);
                if (checkInheritance) {
                    config = CQ.Util.applyDefaults(config, {
                        "listeners": {
                            "loadcontent": function(path, rec) {
                                if (rec.data[this.actionName] && rec.data[this.actionName]["inherited"]) {
                                    this.disable();
                                } else {
                                    this.enable();
                                }
                            }
                        }
                    });
                }
                actions.push(config);
            }

            return new CQ.Ext.form.FieldSet({
                "title": CQ.I18n.getMessage("Sync Actions"),
                "autoHeight": true,
                "stateful": false,
                "defaults": {
                    "anchor": "95%"
                },
                "items": actions
            });
        },

        /**
         * Returns a HTML view of the rollout info: describes what will happen
         * on rollout of the given live relationship.
         * @param {Object} lr Live relationship
         * @param {String} rolloutPath Rollout path
         * @return {String} HTML string
         * @static
         */
        getRolloutInfo: function(lr /*live relationship*/, rolloutPath) {
            var info = {
                "text": "",
                "shortText": "",
                "css": ""
            };
            if (lr && lr[CQ.wcm.msm.MSM.PARAM_SOURCEPATH] && lr[CQ.wcm.msm.MSM.PARAM_STATUS]) {
                if (rolloutPath && lr[CQ.wcm.msm.MSM.PARAM_SOURCEPATH].indexOf(rolloutPath) != 0) {
                    info.text = CQ.I18n.getMessage("Target page inherits from a different Blueprint. Rollout page {0} to update target page.", CQ.wcm.msm.MSM.filterPagePath(lr[CQ.wcm.msm.MSM.PARAM_SOURCEPATH]));
                    info.shortText = CQ.I18n.getMessage("No action");
                    info.css = "msm-rollout-plan-info-no-action";
                } else {
                    if (!lr[CQ.wcm.msm.MSM.PARAM_STATUS][CQ.wcm.msm.MSM.PARAM_IS_CANCELLED]) {
                        if (!lr[CQ.wcm.msm.MSM.PARAM_STATUS][CQ.wcm.msm.MSM.PARAM_IS_TARGET_MANUALLY_CREATED]
                                && lr[CQ.wcm.msm.MSM.PARAM_STATUS][CQ.wcm.msm.MSM.PARAM_IS_TARGET_EXISTING]
                                && lr[CQ.wcm.msm.MSM.PARAM_STATUS][CQ.wcm.msm.MSM.PARAM_IS_SOURCE_EXISTING]) {
                            if (lr[CQ.wcm.msm.MSM.PARAM_STATUS][CQ.wcm.msm.MSM.PARAM_IS_TARGET_CANCELLED_CHILD]
                                || lr[CQ.wcm.msm.MSM.PARAM_STATUS][CQ.wcm.msm.MSM.PARAM_IS_TARGET_CANCELLED_PROPERTY]) {
                                info.text = CQ.I18n.getMessage("Target page contains paragraphs or properties for which Live Copy has been canceled. These paragraphs or properties will not be updated, any others will be replaced.");
                                info.shortText = CQ.I18n.getMessage("Partial update");
                                info.css = "msm-rollout-plan-info-partial-update";
                            } else {
                                info.text = CQ.I18n.getMessage("Target page will be fully updated.");
                                info.shortText = CQ.I18n.getMessage("Full update");
                                info.css = "msm-rollout-plan-info-update";
                            }
                        } else {
                            if (!lr[CQ.wcm.msm.MSM.PARAM_STATUS][CQ.wcm.msm.MSM.PARAM_IS_SOURCE_EXISTING]
                                    && lr[CQ.wcm.msm.MSM.PARAM_STATUS][CQ.wcm.msm.MSM.PARAM_IS_SOURCE_DELETED]) {
                                info.text = CQ.I18n.getMessage("Target page will be deleted from Live Copy");
                                info.shortText = CQ.I18n.getMessage("Delete");
                                info.css = "msm-rollout-plan-info-delete";
                            } else {
                                if (lr[CQ.wcm.msm.MSM.PARAM_STATUS][CQ.wcm.msm.MSM.PARAM_IS_TARGET_MANUALLY_CREATED] ||
                                    (!lr[CQ.wcm.msm.MSM.PARAM_STATUS][CQ.wcm.msm.MSM.PARAM_IS_SOURCE_EXISTING]
                                            && !lr[CQ.wcm.msm.MSM.PARAM_STATUS][CQ.wcm.msm.MSM.PARAM_IS_SOURCE_DELETED])) {
                                    info.text = CQ.I18n.getMessage("Page has been created into Live Copy. No rollout action.");
                                    info.shortText = CQ.I18n.getMessage("No action");
                                    info.css = "msm-rollout-plan-info-no-action";
                                } else {
                                    if (lr[CQ.wcm.msm.MSM.PARAM_STATUS][CQ.wcm.msm.MSM.PARAM_IS_SOURCE_EXISTING]
                                            && !lr[CQ.wcm.msm.MSM.PARAM_STATUS][CQ.wcm.msm.MSM.PARAM_IS_TARGET_EXISTING]) {
                                        if (!lr[CQ.wcm.msm.MSM.PARAM_STATUS][CQ.wcm.msm.MSM.PARAM_IS_TARGET_DELETED]) {
                                            info.text = CQ.I18n.getMessage("Target page does not exist and will be created in Live Copy.");
                                            info.shortText = CQ.I18n.getMessage("Create");
                                            info.css = "msm-rollout-plan-info-create";
                                        } else {
                                            info.text = CQ.I18n.getMessage("Target page has been manually deleted. To restore it, use the version manager");
                                            info.shortText = CQ.I18n.getMessage("No action");
                                            info.css = "msm-rollout-plan-info-no-action";
                                        }
                                    }
                                }
                            }
                        }
                    } else {
                        info.text = CQ.I18n.getMessage("Live Copy has been cancelled for target page. No rollout action");
                        info.shortText = CQ.I18n.getMessage("No action");
                        info.css = "msm-rollout-plan-info-no-action";
                    }
                }
                if(lr[CQ.wcm.msm.MSM.PARAM_TRIGGER] == "never") {
                    info.shortText = CQ.I18n.getMessage("Rollout never triggered");
                }
            }
            return info;
        },

        /**
         * Returns a HTML view of the given live relationship.
         * @param {Object} Live relationship
         * @return {String} HTML string
         * @static
         */
        toHTML: function(lr /*live relationship*/) {
            var html = "<div>";
            if (lr) {
                if (lr[CQ.wcm.msm.MSM.PARAM_STATUS][CQ.wcm.msm.MSM.PARAM_IS_CANCELLED]) {
                    html += "cancelled"
                } else {
                    html += "sync"
                }
            }
            return html + "</div>";
        },

        isExcludedProperty: function(name) {
            if (!serverConfig) {
                init();
            }
            var excludes = serverConfig[CFG_ROLLOUT_MGR][CFG_ROLLOUT_EXCLUDE_PROPS];
            for (var i=0; i<excludes.length; i++) {
                if (name.match(excludes[i])) {
                    return true;
                }
            }
            excludes = serverConfig[CFG_ROLLOUT_MGR][CFG_ROLLOUT_EXCLUDE_PARA_PROPS];
            for (var i=0; i<excludes.length; i++) {
                if (name.match(excludes[i])) {
                    return true;
                }
            }
            return false;
        }
    };
}();

/**
 * Update Content sync action default config
 * @static
 * @final
 * @type Object
 * @deprecated since 5.4
 */
CQ.wcm.msm.MSM.UpdateContentAction = {
    "xtype": "selection",
    "fieldLabel": CQ.I18n.getMessage("Update Content"),
    "name": "msm:actionUpdate/status",
    "actionName": "msm:actionUpdate",
    "stateful":false,
    "type": "checkbox",
    "fieldDescription": CQ.I18n.getMessage("Enables content update"),
    "defaultValue": false
};

/**
 * Notify sync action default config
 * @static
 * @final
 * @type Object
 * @deprecated since 5.4
 */
CQ.wcm.msm.MSM.NotifyAction = {
    "xtype": "selection",
    "fieldLabel": CQ.I18n.getMessage("Enable Notification"),
    "name": "msm:actionNotify/target",
    "actionName": "msm:actionNotify",
    "stateful":false,
    "type": "checkbox",
    "fieldDescription": CQ.I18n.getMessage("Enables notification"),
    "defaultValue": false
};

/**
 * Workflow sync action default config
 * @static
 * @final
 * @type Object
 * @deprecated since 5.4
 */

CQ.wcm.msm.MSM.WorkflowAction = {
    "xtype": "combo",
    "fieldLabel": CQ.I18n.getMessage("Start Workflow"),
    "name": "actionWorkflow",
    "cls": "cq-msm-action-workflow",
    "hiddenName":"msm:actionWorkflow/target",
    "actionName":"msm:actionWorkflow",
    "stateful": false,
    "typeAhead":true,
    "triggerAction":"all",
    "inputType":"text",
    "emptyText": "",
    "minChars":0,
    "editable":true,
    "lazyInit": false,
    "displayField":"label",
    "valueField":"wid",
    "fieldDescription": CQ.I18n.getMessage("Select a workflow to be started on synchronization"),
    "tpl" :new CQ.Ext.XTemplate(
            '<tpl for=".">',
            '<div class="cq-msm-list cq-msm-workflow-list">',
            '<div class="cq-msm-list-entry cq-msm-workflow-list-entry">{[values.label==""? values.wid: values.label]}</div>',
            '</div>',
            '</tpl>'),
    "itemSelector" :"div.cq-msm-workflow-list",
    "store": new CQ.Ext.data.Store({
        "autoLoad":false,
        "proxy": new CQ.Ext.data.HttpProxy({
            "url": "/libs/cq/workflow/content/console/workflows.json",
            "method":"GET"
        }),
        "baseParams": { tags: 'wcm' },
        "reader": new CQ.Ext.data.JsonReader({
            "root":"workflows",
            "totalProperty":"results",
            "id":"wid",
            "fields":[ "wid", "label" ]
        })
    }),
    "defaultValue": ""
};

/**
 * Mandatory sync action default config
 * @static
 * @final
 * @type Object
 * @deprecated since 5.4
 */

CQ.wcm.msm.MSM.MandatoryAction = {
    "xtype": "combo",
    "fieldLabel": CQ.I18n.getMessage("Read only for"),
    "name": "actionMandatory",
    "cls": "cq-msm-action-mandatory",
    "hiddenName": "msm:actionMandatory/target",
    "actionName":"msm:actionMandatory",
    "stateful": false,
    "typeAhead":true,
    "triggerAction":"all",
    "inputType":"text",
    "displayField":"name",
    "valueField": "id",
    "emptyText": "",
    "minChars":0,
    "editable":true,
    "lazyInit": false,
    "queryParam": "filter",
    "fieldDescription": CQ.I18n.getMessage("Select the group that will have read-only access on the copies."),
    "tpl" :new CQ.Ext.XTemplate(
            '<tpl for=".">',
            '<div class="cq-msm-list cq-msm-mandatory-list">',
            '<div class="cq-msm-list-entry cq-msm-mandatory-list-entry">{[values.name==""? values.id: values.name]}</div>',
            '</div>',
            '</tpl>'),
    "itemSelector" :"div.cq-msm-mandatory-list",
    "store": new CQ.Ext.data.Store({
        "autoLoad":false,
        "proxy": new CQ.Ext.data.HttpProxy({
            "url": "/bin/security/authorizables.json?limit=25&hideUsers=true",
            "method":"GET"
        }),
        "reader": new CQ.Ext.data.JsonReader({
            "root":"authorizables",
            "totalProperty":"results",
            "id":"id",
            "fields":["name","id"]})
    }),
    "defaultValue": ""
};

/**
 * Create source version sync action default config
 * @static
 * @final
 * @type Object
 * @deprecated since 5.4
 */
CQ.wcm.msm.MSM.SourceVersionAction = {
    "xtype": "selection",
    "fieldLabel": CQ.I18n.getMessage("Create Blueprint version"),
    "name": "msm:actionSourceVersion/status",
    "actionName": "msm:actionSourceVersion",
    "stateful":false,
    "type": "checkbox",
    "fieldDescription": CQ.I18n.getMessage("Creates a version of the Blueprint page"),
    "defaultValue": false
};

/**
 * Create target version sync action default config
 * @static
 * @final
 * @type Object
 * @deprecated since 5.4
 */
CQ.wcm.msm.MSM.TargetVersionAction = {
    "xtype": "selection",
    "fieldLabel": CQ.I18n.getMessage("Create Live Copy version"),
    "name": "msm:actionTargetVersion/status",
    "actionName": "msm:actionTargetVersion",
    "stateful":false,
    "type": "checkbox",
    "fieldDescription": CQ.I18n.getMessage("Creates a version of the Live Copy page"),
    "defaultValue": false
};

/**
* @deprecated since 5.4
 **/
CQ.wcm.msm.MSM.MandatoryStructureAction = {
    "xtype": "combo",
    "fieldLabel": CQ.I18n.getMessage("Mandatory Structure for"),
    "name": "actionMandatoryStructure",
    "hiddenName": "msm:actionMandatoryStructure/target",
    "actionName":"msm:actionMandatoryStructure",
    "stateful": false,
    "typeAhead":true,
    "triggerAction":"all",
    "inputType":"text",
    "displayField":"name",
    "valueField": "id",
    "emptyText": "",
    "minChars":0,
    "editable":true,
    "lazyInit": false,
    "queryParam": "filter",
    "fieldDescription": CQ.I18n.getMessage("Select the group that will not be able to modify the Live Copy structure."),
    "tpl" :new CQ.Ext.XTemplate(
            '<tpl for=".">',
            '<div class="cq-msm-list cq-msm-mandatory-structure-list">',
            '<div class="cq-msm-list-entry cq-msm-mandatory-structure-list-entry">{[values.name==""? values.id: values.name]}</div>',
            '</div>',
            '</tpl>'),
    "itemSelector" :"div.cq-msm-mandatory-structure-list",
    "store": new CQ.Ext.data.Store({
        "autoLoad":false,
        "proxy": new CQ.Ext.data.HttpProxy({
            "url": "/bin/security/authorizables.json?limit=25&hideUsers=true",
            "method":"GET"
        }),
        "reader": new CQ.Ext.data.JsonReader({
            "root":"authorizables",
            "totalProperty":"results",
            "id":"id",
            "fields":["name","id"]})
    }),
    "defaultValue": ""
};

/**
* @deprecated since 5.4
 **/
CQ.wcm.msm.MSM.MandatoryContentAction = {
    "xtype": "combo",
    "fieldLabel": CQ.I18n.getMessage("Mandatory Content for"),
    "name": "actionMandatoryStructure",
    "hiddenName": "msm:actionMandatoryContent/target",
    "actionName":"msm:actionMandatoryContent",
    "stateful": false,
    "typeAhead":true,
    "triggerAction":"all",
    "inputType":"text",
    "displayField":"name",
    "valueField": "id",
    "emptyText": "",
    "minChars":0,
    "editable":true,
    "lazyInit": false,
    "queryParam": "filter",
    "fieldDescription": CQ.I18n.getMessage("Select the group that will not be able to modify the Live Copy content."),
    "tpl" :new CQ.Ext.XTemplate(
            '<tpl for=".">',
            '<div class="cq-msm-list cq-msm-mandatory-structure-list">',
            '<div class="cq-msm-list-entry cq-msm-mandatory-structure-list-entry">{[values.name==""? values.id: values.name]}</div>',
            '</div>',
            '</tpl>'),
    "itemSelector" :"div.cq-msm-mandatory-structure-list",
    "store": new CQ.Ext.data.Store({
        "autoLoad":false,
        "proxy": new CQ.Ext.data.HttpProxy({
            "url": "/bin/security/authorizables.json?limit=25&hideUsers=true",
            "method":"GET"
        }),
        "reader": new CQ.Ext.data.JsonReader({
            "root":"authorizables",
            "totalProperty":"results",
            "id":"id",
            "fields":["name","id"]})
    }),
    "defaultValue": ""
};

CQ.wcm.msm.MSM.filterPagePath = function(pagePath) {
    if(!pagePath) return "";

    if( pagePath.lastIndexOf("/jcr:content") == pagePath.length - 12) {
        return pagePath.substring(0, pagePath.length - 12);
    }
    return pagePath;
};

/**
 * Sync actions config set: contains all available sync actions configs.
 * @static
 * @final
 * @type Object[]
 * @deprecated since 5.4
 */

CQ.wcm.msm.MSM.ACTIONS = [
    CQ.wcm.msm.MSM.UpdateContentAction,
    CQ.wcm.msm.MSM.NotifyAction,
    CQ.wcm.msm.MSM.WorkflowAction,
    CQ.wcm.msm.MSM.MandatoryAction/*,
    CQ.wcm.msm.MSM.MandatoryStructureAction,
    CQ.wcm.msm.MSM.MandatoryContentAction*/
];


CQ.wcm.msm.MSM.Texts = {};
CQ.wcm.msm.MSM.Texts.LR = {};

//mapping between statuses and textes
CQ.wcm.msm.MSM.Texts.LR.States = {
    "msm-status-synchronized": {
        "text": CQ.I18n.getMessage("Live Copy page is up-to-date with its Blueprint page."),
        "textWithParams": CQ.I18n.getMessage("Live Copy page {1} is up-to-date with its Blueprint page {0}."),
        "iconClass": "msm-status-synchronized"
    },
    "msm-status-synchronized-cancelled-par": {
        "text": CQ.I18n.getMessage("Live Copy page is up-to-date with its Blueprint page and it contains paragraphs or properties for which inheritance has been cancelled."),
        "textWithParams": CQ.I18n.getMessage("Live Copy page {1} is up-to-date with its Blueprint page {0} and it contains paragraphs or properties for which inheritance has been cancelled."),
        "iconClass": "msm-status-synchronized-cancelled-par"
    },
    "msm-status-src-modified": {
        "text": CQ.I18n.getMessage("Blueprint page has been modified since last rollout."),
        "textWithParams": CQ.I18n.getMessage("Blueprint page {0} has been modified since last rollout."),
        "iconClass": "msm-status-src-modified"
    },
    "msm-status-src-modified-cancelled-par": {
        "text": CQ.I18n.getMessage("Blueprint page has been modified since last rollout. Live Copy page contains paragraphs or properties for which inheritance has been cancelled."),
        "textWithParams": CQ.I18n.getMessage("Blueprint page {0} has been modified since last rollout. Live Copy page {1} contains paragraphs or properties for which inheritance has been cancelled."),
        "iconClass": "msm-status-src-modified-cancelled-par"
    },
    "msm-status-target-modified": {
        "text": CQ.I18n.getMessage("Live Copy page has been modified."),
        "textWithParams": CQ.I18n.getMessage("Live Copy page {0} has been modified."),
        "iconClass": "msm-status-target-modified"
    },
    "msm-status-target-modified-cancelled-par": {
        "text": CQ.I18n.getMessage("Live Copy page has been modified since last rollout and it contains paragraphs or properties for which inheritance has been cancelled."),
        "textWithParams": CQ.I18n.getMessage("Live Copy page {0} has been modified since last rollout and it contains paragraphs or properties for which inheritance has been cancelled."),
        "iconClass": "msm-status-target-modified-cancelled-par"
    },
    "msm-status-new": {
        "text": CQ.I18n.getMessage("Page has been locally created inside Live Copy."),
        "textWithParams": CQ.I18n.getMessage("Page {0} has been locally created inside Live Copy."),
        "iconClass": "msm-status-new"
    },
    "msm-status-target-deleted": {
        "text": CQ.I18n.getMessage("Live Copy page has been deleted."),
        "textWithParams": CQ.I18n.getMessage("Live Copy page {0} has been deleted."),
        "iconClass": "msm-status-target-deleted"
    },
    "msm-status-never-created": {
        "text": CQ.I18n.getMessage("Live Copy page does not exist (it has never been created and deleted). It will be created during next rollout process."),
        "textWithParams": CQ.I18n.getMessage("Live Copy page {0} does not exist (it has never been created and deleted). It will be created during next rollout process."),
        "iconClass": "msm-status-never-created"
    },
    "msm-status-cancelled": {
        "text": CQ.I18n.getMessage("Live Copy page inheritance has been cancelled."),
        "textWithParams": CQ.I18n.getMessage("Live Copy page {0} inheritance has been cancelled."),
        "iconClass": "msm-status-cancelled"
    },
    "msm-status-src-deleted": {
        "text": CQ.I18n.getMessage("Blueprint page has been deleted."),
        "textWithParams": CQ.I18n.getMessage("Blueprint page {0} has been deleted."),
        "iconClass": "msm-status-src-deleted"
    },
    "msm-status-skipped": {
        "text": CQ.I18n.getMessage("Live Copy page does not exist or has been deleted and is skipped from rollout process."),
        "textWithParams": CQ.I18n.getMessage("Live Copy page {0} does not exist or has been deleted and is skipped from rollout process."),
        "iconClass": "msm-status-skipped"
    }
};

CQ.wcm.msm.MSM.Texts.LR.States.getTextWithParams = function(key, snippets) {
    for (var snippet in snippets) {
        if (snippets.hasOwnProperty(snippet)) {
            snippets[snippet] = CQ.shared.XSS.getXSSValue(snippets[snippet]);
        }
    }
    return CQ.Util.patchText(CQ.wcm.msm.MSM.Texts.LR.States[key]["textWithParams"], snippets);
};

//statuses meanings
CQ.wcm.msm.MSM.Texts.LR.Statuses = {
    "msm:isCancelled": CQ.I18n.getMessage("Cancelled inheritance"),
    "msm:isCancelledForChildren": CQ.I18n.getMessage("Cancelled inheritance for children"),
    "msm:isEditable": CQ.I18n.getMessage("Editable"),
    "msm:isPage": CQ.I18n.getMessage("Page relation"),

    "msm:isSourceExisting": CQ.I18n.getMessage("Blueprint page existing"),
    "msm:isSourceModified": CQ.I18n.getMessage("Blueprint page modified"),
    "msm:isSourceDeleted": CQ.I18n.getMessage("Blueprint page deleted"),

    "msm:isTargetExisting": CQ.I18n.getMessage("Live Copy page existing"),
    "msm:isTargetModified": CQ.I18n.getMessage("Live Copy page modified"),
    "msm:isTargetDeleted": CQ.I18n.getMessage("Live Copy page deleted"),
    "msm:isTargetManuallyCreated": CQ.I18n.getMessage("Live Copy page locally created"),
    "msm:isTargetCancelledChild": CQ.I18n.getMessage("Live Copy page has children for which inheritance has been cancelled"),
    "msm:isTargetCancelledProperty": CQ.I18n.getMessage("Live Copy page has properties or children with properties for which inheritance has been cancelled"),
    "msm:isTargetFromDifferentTree": CQ.I18n.getMessage("Live Copy page is a Live Copy from different Blueprint"),
    "msm:isTargetSkipped": CQ.I18n.getMessage("Live Copy page skipped")
};