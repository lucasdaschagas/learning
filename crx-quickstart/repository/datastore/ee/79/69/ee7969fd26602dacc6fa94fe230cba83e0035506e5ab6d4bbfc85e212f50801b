CQ.Ext.namespace("CQ_Analytics.TestTarget");
var CLIENT_CODE = 'clientCodeId';
var TENANT_ID = 'tenantIdID';
CQ_Analytics.TestTarget.publishTestTarget = function(operation, configpath, folderid, lastpublished) {
    if (!CQ.Ext.getCmp(window.CQ_OfferPublishDialog_id)) {
        var dialog = new CQ_Analytics.TestTarget.PublishDialog({
            "operation": operation,
            "configpath": configpath,
            "folderid": folderid,
            "lastpublished": lastpublished
        });
        dialog.show();
        dialog.alignToViewport("c");
    }
}

CQ_Analytics.TestTarget.showButtonIndicator = function(dialog, isShown) {
    if (!isShown) {
        CQ.Ext.Msg.wait(CQ.I18n.getMessage("Connection successful")).hide();
    } else {
        CQ.Ext.Msg.wait(CQ.I18n.getMessage("Connecting to Adobe Target..."));
    }
}

CQ_Analytics.TestTarget.setupA4T = function(dialog) {
    var a4tCCField = dialog.find("id", "a4tAnalyticsConfig")[0];
    var targetCloudConfigPath = dialog.path.replace(new RegExp('/jcr:content$'), '');
    CQ.HTTP.get("/libs/cq/analytics/testandtarget/accountoptions?configPath=" + targetCloudConfigPath, function(options, success, response) {
        if (success
                && response
                && response.responseText.indexOf("enableAnalytics") >= 0) {
            a4tCCField.enable();
        }
    });
};

CQ_Analytics.TestTarget.toggleFields = function(dialog) {
    var authentication = dialog.find("name", "./authentication")[0];
    var email = dialog.find("name", "./email")[0];
    var password = dialog.find("name", "./password")[0];
    var imsconfig = dialog.find("name", "./imsConfigId")[0];
    if(authentication.getValue() === "IMS"){
        email.hide();
        password.hide();
        imsconfig.show();
    }
    else{
        email.show();
        password.show();
        imsconfig.hide();
    }
};

CQ_Analytics.TestTarget.onClientLibrarySelectionChanged = function(comp, record, path) {
    var value = comp.getValue(),
        customMboxField =comp.ownerCt.findById("customMboxField"),
        customATField = comp.ownerCt.findById("customATField");

    if (value === "mboxjs") {
        customATField.hide();
        customMboxField.show();
        CQ.Ext.Msg.alert(CQ.I18n.getMessage("Warning"), CQ.I18n.getMessage("This is a deprecated feature and its support will end soon!"));
    } else if (value === "atjs") {
        customMboxField.hide();
        customATField.show();
    }
};

CQ_Analytics.TestTarget.onApiKindSelectionChanged = function(selectedValue) {
    if (selectedValue === "XML") {
        CQ.Ext.Msg.alert(CQ.I18n.getMessage("Warning"), CQ.I18n.getMessage("This is a deprecated feature and its support will end soon!"));
    }
};

CQ_Analytics.TestTarget.onAuthenticationSelectionChanged = function(comp, selectedValue) {
    var emailField = comp.ownerCt.findById("emailField"),
        passwordField = comp.ownerCt.findById("passwordField"),
        imsField = comp.ownerCt.findById("imsField");

    if (selectedValue === "IMS") {
        emailField.hide();
        passwordField.hide();
        imsField.show();
    } else {
        emailField.show();
        passwordField.show();
        imsField.hide();
    }
};

CQ_Analytics.TestTarget.onUseDtmChecked = function(comp,value, isChecked) {
    var customMboxField =comp.ownerCt.findById("customMboxField"),
        customATField = comp.ownerCt.findById("customATField");
    if (isChecked) {
        customMboxField.hide();
        customATField.hide();
    } else {
        customMboxField.show();
        customATField.show();
    }

};

CQ_Analytics.TestTarget.saveCloudConfig = function(dialog) {
    var clientCode = dialog.find('name', './public/clientcode')[0].getValue();
    var cloudConfigPath = dialog.path.replace(new RegExp('/jcr:content$'), '');
    // set the data for segments importer
    dialog.find('name','./segmentsPollConfig/source')[0].setValue('adobe-target-segments:' + cloudConfigPath);
    dialog.find('name','./segmentsPollConfig/target')[0].setValue('/etc/segmentation/adobe-target/' + clientCode);
    dialog.find('name','./segmentsPollConfig/interval')[0].setValue('1200');
    dialog.find('name','./segmentsPollConfig/interval@TypeHint')[0].setValue('Long');
    dialog.find('name','./segmentsPollConfig/jcr:mixinTypes')[0].setValue('cq:PollConfig');
    var segmentSync = dialog.find('name','segmentsPollConfig/enabled')[0].getValue();
    dialog.find('name', './segmentsPollConfig/enabled')[0].setValue(segmentSync);

    // set the data for account options updated
    dialog.find("name","./accountOptionsUpdatePollConfig/source")[0].setValue("adobe-target-account-options:"+cloudConfigPath);
    dialog.find("name","./accountOptionsUpdatePollConfig/target")[0].setValue(cloudConfigPath);
    dialog.find('name','./accountOptionsUpdatePollConfig/interval')[0].setValue(60*60*24);
    dialog.find('name','./accountOptionsUpdatePollConfig/interval@TypeHint')[0].setValue('Long');
    dialog.find('name','./accountOptionsUpdatePollConfig/jcr:mixinTypes')[0].setValue('cq:PollConfig');
    dialog.find('name','./accountOptionsUpdatePollConfig/enabled')[0].setValue("true");

    var imsConfigId = dialog.find('name','./imsConfigId')[0].getValue();
    if (imsConfigId !== "") {
        dialog.find('name','./connectedWhen')[0].setValue("imsConfigId");
    }

    CQ_Analytics.TargetRecommendations.setupResponseScope(dialog);
};

function fillTenantField(value) {
    var tenantId = document.getElementById(TENANT_ID);
    if(tenantId != null){
        tenantId.value = value;
    }
}

document.addEventListener('input', function (event) {
    var clientCode = document.getElementById(CLIENT_CODE);
    if (clientCode != null && clientCode.contains(event.target)) {
        var name = event.target.getAttribute('name');
        var value = event.target.value;
        fillTenantField(value);
    }
});

CQ_Analytics.TestTarget.doConnect = function(dialog) {
    var self = this;
    var authentication = dialog.find("name", "./authentication")[0];
    var clientCodeValue = dialog.find("name","./public/clientcode")[0];
    var tenantIdValue = dialog.find("name","./public/tenantId")[0]

    if (!clientCodeValue.getValue()) {
        CQ.Ext.Msg.show({
            "title": CQ.I18n.getMessage("Error"),
            "msg": CQ.I18n.getMessage("Please provide a valid Client Code"),
            "buttons": CQ.Ext.Msg.OK,
            "icon": CQ.Ext.Msg.INFO
        });
        return;
    }
    if (!tenantIdValue.getValue()) {
        CQ.Ext.Msg.show({
            "title": CQ.I18n.getMessage("Error"),
            "msg": CQ.I18n.getMessage("Please provide a valid Target Tenant ID"),
            "buttons": CQ.Ext.Msg.OK,
            "icon": CQ.Ext.Msg.INFO
        });
        return;
    }

    var clientcode = "";
    if(authentication.getValue() === "IMS"){
        clientcode = tenantIdValue;
    }
    else{
        clientcode = clientCodeValue;
    }
    var email = dialog.find("name","./email")[0];
    var password = dialog.find("name","./password")[0];
    var apiKind = dialog.find("name","./apiKind")[0];
    var imsConfigId = dialog.find("name","./imsConfigId")[0];

    var data = {
            clientcode: clientcode.getValue(),
            email: email.getValue(),
            password: password.getValue(),
            apiKind: apiKind.getValue(),
            imsConfigId: imsConfigId.getValue(),
            cmd: "connect"
    };
    
    this.showButtonIndicator(dialog, true);

    CQ.HTTP.post("/libs/cq/analytics/testandtarget/command",
        function(options, success, response) {
            self.showButtonIndicator(dialog, false);
            if(success) {
                var answer = CQ.HTTP.eval(response);
                if(answer.error !== undefined) {
                    var errorMsg = CQ.I18n.getMessage(answer.error);
                    if (answer.error.indexOf("Invalid email or password") >= 0) {
                        errorMsg = CQ.I18n.getMessage("Invalid email or password supplied. Email: {0}. Please contact your Customer Service Manager if you believe there is a problem with your login.",
                            [email.getValue()]);
                    }

                    CQ.Ext.Msg.show({
                        "title": CQ.I18n.getMessage("Error"),
                        "msg": CQ.I18n.getMessage("Connection failed for following reasons:<br>") + errorMsg,
                        "buttons": CQ.Ext.Msg.OK,
                        "icon": CQ.Ext.Msg.ERROR
                    }); 
                } else if (answer.success) {
                    CQ.Ext.Msg.show({
                        "title": CQ.I18n.getMessage("Success"),
                        "msg": CQ.I18n.getMessage("Connection successful"),
                        "buttons": CQ.Ext.Msg.OK,
                        "icon": CQ.Ext.Msg.INFO
                    }); 
                    CQ.cloudservices.getEditOk().enable();
                    
                    // check if the account has Recommendations capabilities
                    CQ_Analytics.TargetRecommendations.checkRecommendationsCapabilities(dialog);
                }
            }else {
                CQ.Ext.Msg.show({
                        "title": CQ.I18n.getMessage("Error"),
                        "msg": CQ.I18n.getMessage("Connection failed for unknown reason."),
                        "buttons": CQ.Ext.Msg.OK,
                        "icon": CQ.Ext.Msg.ERROR
            }); 
        }
    }, data, this, true); // suppress error messages
}

CQ_Analytics.TestTarget.getImsConfigurations = function(select) {

    var data = {
        cmd: "getImsConfigurations"
    };

    CQ.HTTP.post("/libs/cq/analytics/testandtarget/command",
        function(options, success, response) {
            if(success) {
                var options = [];
                var i=0;
                var items = JSON.parse(response.responseText);
                items.forEach(function(item){
                    options[i++] = {value:item.value, text:item.text};
                });
                select.setOptions(options);
            }else {
                CQ.Ext.Msg.show({
                    "title": CQ.I18n.getMessage("Error"),
                    "msg": CQ.I18n.getMessage("Cannot get IMS configs."),
                    "buttons": CQ.Ext.Msg.OK,
                    "icon": CQ.Ext.Msg.ERROR
                });
                select.setOptions([]);
            }
        }, data, this, true); // suppress error messages
}


CQ_Analytics.TestTarget.PublishDialog = CQ.Ext.extend(CQ.Dialog, {

    config: null,
    
    constructor: function(config) {
        var dialog = this;
        this.config = config;
        var defaults = {
                "title": CQ.I18n.getMessage("Create offer"),
                "width": 450,
                "height": 200,
                "closeAction": "destroy",
                "items": [{
                    "xtype": "panel",
                    "header": false,
                    "layout": "form",
                    "items": [{
                        "xtype": "dialogfieldset",
                        "border": false,
                        "labelWidth": 150,
                        "items": [{                           
                            "fieldLabel": CQ.I18n.getMessage("Adobe Target configuration"),
                            "id": "cq:cloudserviceconfig",
                            "name": "cq:cloudserviceconfig",
                            "rootPath": "/etc/cloudservices/testandtarget",
                            "xtype": "cloudservicescombo",
                            "value": config.configpath,
                            "selectFirst": true,
                            "flex": "{Long}1"
                        },{
                            "xtype": "static",
                            "style": "text-align:right;margin:3px 0px 5px 0px; text-decoration:underline;",
                            "html": '<a href="' + CQ.HTTP.externalize('/miscadmin#/etc/cloudservices') + '" target="_blank">' + CQ.I18n.getMessage("Manage configurations") + '</a>'
                        },{
                            "xtype":"externalpathfield",
                            "name":"folderid",
                            "editable": false,
                            "disabled": (config.lastpublished && config.lastpublished.length > 0),
                            "hidden": (config.operation != 'saveHTMLOfferContent'),
                            "fieldLabel": CQ.I18n.getMessage("Folder"),
                            "rootTitle": CQ.I18n.getMessage("Folders"),
                            "rootPath": "/",
                            "value": config.folderid,
                            "treeLoader": {
                                "dataUrl": CQ.shared.HTTP.getXhrHookedURL(CQ.Util.externalize("/libs/cq/analytics/testandtarget/folderlist.json")),
                                "listeners": {
                                    "beforeload":function(loader,node) {
                                        var path = dialog.form.findField("cq:cloudserviceconfig");
                                        this.baseParams.cfgpath = path.getValue();
                                    }
                                }
                            }
                        }]
                    }]
                }],
                "listeners": {
                    "render": function() {
                        window.CQ_OfferPublishDialog_id = dialog.id;
                    }
                },
                "buttons": [
                    {
                        "text": CQ.I18n.getMessage("OK"),
                        "tooltip": CQ.I18n.getMessage("Create this offer in Adobe Target"),
                        "handler": function() {
                            var title = CQ.I18n.getMessage("Overwrite offer");
                            var message = CQ.I18n.getMessage("Existing offer with name [{0}] may be overwritten. Do you want to continue?", [CQ.WCM.getPagePath().replace(/^\//,'').replace(/\//g,'-')]);
                            if (config.operation === "deleteWidgetOffer") {
                                title = CQ.I18n.getMessage("Delete offer");
                                message = CQ.I18n.getMessage("Do you really want to delete this offer in Adobe Target?");
                            }
                            
                            CQ.Ext.Msg.show({
                                "title":title,
                                "msg":message,
                                "buttons":CQ.Ext.Msg.YESNO,
                                "icon":CQ.Ext.MessageBox.QUESTION,
                                "fn":function(btnId) {
                                    if (btnId == "yes") {
                                        dialog.submitCommand(config.operation);
                                    }
                                },
                                "scope":this
                            });
                        }
                    },
                    CQ.Dialog.CANCEL
                ]
        };
        CQ.Util.applyDefaults(config, defaults);
        
        // init component by calling super constructor
        CQ_Analytics.TestTarget.PublishDialog.superclass.constructor.call(this, config);
    },
    
    submitCommand: function(command) {
        var data = {
            cfgpath: this.form.findField("cq:cloudserviceconfig").getValue(),
            path: CQ.WCM.getPagePath(),
            folderid: this.form.findField("folderid").getValue(),
            content: "<script type=\"text/javascript\">try{CQ_Analytics.TestTarget.pull('" + CQ.WCM.getPagePath() + "/_jcr_content/par.html');}catch(e){;}</script>",
            cmd: command
        };
        CQ.HTTP.post("/libs/cq/analytics/testandtarget/command",
            function(options, success, response) {
                if(success) {
                    var answer = CQ.HTTP.eval(response);
                    if (answer.error != undefined) {
                        CQ.Ext.Msg.show({
                            "title": CQ.I18n.getMessage("An error occured"),
                            "msg": answer.error,
                            "buttons": CQ.Ext.Msg.OK,
                            "icon": CQ.Ext.Msg.ERROR
                        }); 
                    } else {
                        var message = (command == 'saveHTMLOfferContent') ? CQ.I18n.getMessage("Offer published successfully") : CQ.I18n.getMessage("Offer unpublished successfully")
                        CQ.Ext.Msg.show({
                            "title": CQ.I18n.getMessage("Success"),
                            "msg": message,
                            "buttons": CQ.Ext.Msg.OK,
                            "icon": CQ.Ext.Msg.INFO
                        }); 
                        var button = document.getElementById("testandtarget-publish");
                        button.setAttribute("value", CQ.I18n.getMessage("Re-Push to Adobe Target"));
                        if (command == 'deleteWidgetOffer') {
                            button.setAttribute("onclick", "CQ_Analytics.TestTarget.publishTestTarget('saveHTMLOfferContent','" 
                                    + this.config.configpath + "'," + answer.folderid + "," + answer.lastpublished + ")");
                        } else {
                            button.setAttribute("onclick", "CQ_Analytics.TestTarget.publishTestTarget('saveHTMLOfferContent','" 
                                    + this.config.configpath + "','" + answer.folderid + "','" + answer.lastpublished + "')");
                        }
                        this.close();
                    }
                } else {
                    CQ.Ext.Msg.show({
                        "title": CQ.I18n.getMessage("An error occured"),
                        "msg": CQ.I18n.getMessage("Publishing failed. If this issue persists, please get in touch with an administrator."),
                        "buttons": CQ.Ext.Msg.OK,
                        "icon": CQ.Ext.Msg.ERROR
                    }); 
                }
            }, data, this, true); // suppress error messages
    }
});