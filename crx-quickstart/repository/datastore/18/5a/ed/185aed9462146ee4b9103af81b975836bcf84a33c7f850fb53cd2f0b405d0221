/*
 * ADOBE CONFIDENTIAL
 *
 * Copyright 2012 Adobe Systems Incorporated
 * All Rights Reserved.
 *
 * NOTICE: All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
 */
(function (document, $) {

    var DATA_RESERVEDVAL_PRODUCTTHUMBNAIL   = "reservedVal_productThumbnail";
    var DATA_RESERVEDVAL_PRODUCTPATH        = "reservedVal_productPath";
    var PRODUCT_PATH = "skuPath";
    var PRODUCT_THUMBNAIL_SRC = "skuThumbnailSrc";
    var PRODUCT_ORIG_TITLE = "productOrigTitle";
    var PRODUCT_TITLE = "title";

    var isTenant = $("#asset-info").data("isTenant");
    var typedUrl = "";
    
    //Label
    var CONTENT = Granite.I18n.get('Content'),
        ACTIONS = Granite.I18n.get('Actions');

    var HTTP_PROTOCOL = 'http://';
    var HTTPS_PROTOCOL = 'https://';
    var HREF_FIELD	= '#url-path';
    var HREF_INPUT = HREF_FIELD + ' input[is="coral-textfield"]';

    $.updateFragmentUIfn = function () { // late reinit fragment relative UI
        var $fragment_input = getFragmentUIElement();
        $fragment_input.on('keypress', adjustKeypressEvent);
        $fragment_input.on('focusin', initFocusIn);
        $fragment_input.on('focusout', adjustFocusOut);
        if (!isTenant) {
            $fragment_input.on('keyup', function(){
                //  console.log('$fragment_input  keyup');
            });
            $fragment_input.on('change', function(e){

                var curFragmentPath = $fragment_input.val();
                var data = $.getFragmentInfo({"value" :curFragmentPath});
                $fragment_input.data('path', Granite.HTTP.internalize(curFragmentPath));
                var title = data['title'] ? data['title'] : "";
                $fragment_input.data(PRODUCT_ORIG_TITLE, title);
                $fragment_input.data(PRODUCT_TITLE, title);
                dispatchNotification();

                // need to get the updated product and update UI
                var product = $.sv.getProductByID(segmentId, productId);
                updateUI(product);

                // we need to watch mixed swatches when "sku" is changed
                var EVENT_MODIFY_SWATCH = "sv-modify-swatch";
                $(document).trigger(EVENT_MODIFY_SWATCH);
            });
        }
    }
    
    $(document).one("foundation-contentloaded", function (e) {

        VAR_INSTRUCTION_TEXT ='Add Variable (i.e. var1=true)';
        productId = '';
        segmentId = 0;
        assetMetadata = '';
        $.srcProduct = undefined;

        var selTimelineDiv = null;
        var SV_EVENT_TIMELINE_ASSET_SELECTED = 'sv-timeline-asset-selected';
        var EVENT_TIMELINE_ASSET_DESELECTED = 'sv-timeline-asset-deselected';
        var EVENT_HISTORY_POSITION_CHANGE = "sv-history-position-change";
        var EVENT_MODIFY_SWATCH = "sv-modify-swatch";

        var $sku_input = getSkuUIElement();
        var $fragment_input = getFragmentUIElement();

        $(document).on(EVENT_HISTORY_POSITION_CHANGE, function(e){

            if(productId === '') {
                return;
            }

            //get product and update UI
            var product = $.sv.getProductByID(segmentId, productId);

            updateUI(product);
        });

        $(document).on("sv-action-change", function(e){
        });



    $(document).on(SV_EVENT_TIMELINE_ASSET_SELECTED, function(e){

        // Enable action panel tab in asset is selected
        enableActionPanelTab();
        
        if ($('.actionContainer').data('current-focus')) {
            issueFocusOut($('.actionContainer').data('current-focus'));
        }

        setTimeout( function() {
            //hide action containers
            $('#actions-panel-instructions').hide();

            //hide action containers until we get data
            $('.actionContainer').show();
            $.srcProduct = $(e.target);

            productId = e.url;
            segmentId = e.segmentId;

            //get product form data controller
            var product = $.sv.getProductByID(segmentId, productId);

            //get asset metadata
            loadMetadata(product);
        }, 100);
    });


    $(document).on(EVENT_TIMELINE_ASSET_DESELECTED, function(e){

        productId = e.url;
//      segmentId = e.segmentId;

        //hide action containers when product is deselected
        $('.actionContainer').hide();

        //hide action containers
        $('#actions-panel-instructions').show();
    });


    $('.actionRadioButton').on('change', function(e) {

        var prop = $(e.target).val();

        if(prop === 'quickview') {
            setHrefValue('');
            $('#url-wrapper').hide();

            $('#size-line').hide();
            $('#btn-add-variable').show();
            $('#generic-variables-container').show();
            $('#svfragmentPicker').closest(".coral-Form-fieldwrapper").hide();
            $('#svproductPicker').show();
            $('#quickview-wrapper').show();
            
            // If the asset has product reference, reset with the referred product's label and update the current product "data" info 
            if ($sku_input.data(PRODUCT_ORIG_TITLE) !== undefined) {
                $('#product-name').val($sku_input.data(PRODUCT_ORIG_TITLE));
                $sku_input.data(PRODUCT_TITLE, $sku_input.data(PRODUCT_ORIG_TITLE));
            }

            //update data and trigger sv-action-change-event
            dispatchNotification();
        } else if(prop === 'fragment') {
            setHrefValue('');
            $('#url-wrapper').hide();
            
            $('#size-line').show();
            $('#btn-add-variable').hide();
            $('#generic-variables-container').hide();
            $('#svproductPicker').hide();
            $('#svfragmentPicker').closest(".coral-Form-fieldwrapper").show();
            $('#quickview-wrapper').show();

            $('#fragment-dialog-wid').val('400');
            $('#fragment-dialog-hei').val('300');
            $('#size-line').trigger('change');
            
            //update data and trigger sv-action-change-event
            dispatchNotification();
            if(!$('.search-fragment').val()) {
                $('#btn-preview-fragment').addClass('is-disabled');
            } else {
                $('#btn-preview-fragment').removeClass('is-disabled');
            }
            

        } else if(prop === 'href') {

            var path = getHrefValue();
            var urlVal = ( path === '')? 'http://' : path;

            setHrefValue(urlVal);

            $('#url-wrapper').show();
            $('#quickview-wrapper').hide();


            // Update data and trigger sv-action-change-event even the default "urlVal" is not changed.
            // This is because the "quickview:sku=" needs to be updated
            dispatchNotification();
        }

        // we need to watch mixed swatches if "actions" is changed
        $(document).trigger(EVENT_MODIFY_SWATCH); 

    });

        //Register to preven enter key
        $('#product-name').on('keypress', adjustKeypressEvent);
        $(HREF_FIELD).on('keypress', adjustKeypressEvent);

        //Register focus in/out of fields
        $('#product-name').on('focusin', initFocusIn);
        $(HREF_FIELD).on('focusin', initFocusIn);
        $('#product-name').on('focusout', adjustFocusOut);
        $(HREF_FIELD).on('focusout', adjustFocusOut);

        $('#product-name').on('change', adjustFocusOut);
        $('#product-name').on('keyup', function(e){
            // need to save the customized title
            var $sku_input = $('input[value=fragment]').is(':checked') ? getFragmentUIElement() : getSkuUIElement();
            $sku_input.data(PRODUCT_TITLE, $(e.currentTarget).val());
        });

        // Just want to Keep a temporary record for typed url. The typed url won't be added the suffix forthfully.
        $(HREF_FIELD).on('keyup', function(e) {
            typedUrl = e.target.value; 
        });

        // Register 'url-path' change
        $(HREF_FIELD).on('change', function(e) {
            if (getHrefValue() !== typedUrl) {
                reviseHref(e.target.value); // reset the url with ".html" suffix
            }
            issueFocusOut($(e.target));
        });

        $sku_input.on('keypress', adjustKeypressEvent);
        $fragment_input.on('keypress', adjustKeypressEvent);
        $sku_input.on('focusin', initFocusIn);
        $fragment_input.on('focusin', initFocusIn);
        $sku_input.on('focusout', adjustFocusOut);
        $fragment_input.on('focusout', adjustFocusOut);

        if (!isTenant) {// "productPicker" is applied
            $sku_input.on('keyup', function(){
                // When "SKU" is manually set, its picked "product" info from "productPicker" needs to clear out.
                $sku_input.data(PRODUCT_PATH, "");
                $sku_input.data(PRODUCT_THUMBNAIL_SRC, "");
                $sku_input.data(PRODUCT_TITLE, "");

                // hide the SKU thumbnail
                $(".skuThumbnail").css("display", "none");
                $("#search-product-sku.search-product-sku").addClass("hide-thumbnail");
            });
            
            $fragment_input.on('keyup', function(){
            //  console.log('$fragment_input  keyup');
            });

            $sku_input.on('change', function(e){
                dispatchNotification();

                // need to get the updated product and update UI
                var product = $.sv.getProductByID(segmentId, productId);
                updateUI(product);

                // we need to watch mixed swatches when "sku" is changed
                $(document).trigger(EVENT_MODIFY_SWATCH); 
            });

            $fragment_input.on('change', function(e){
                dispatchNotification();

                // need to get the updated product and update UI
                var product = $.sv.getProductByID(segmentId, productId);
                updateUI(product);

                // we need to watch mixed swatches when "sku" is changed
                $(document).trigger(EVENT_MODIFY_SWATCH); 
            });
        }

        $('.windowMethodRadio').on('change', function(e) {
            //update data and trigger sv-action-change-event
            dispatchNotification();
        });

        //event listeners
        $('#btn-add-variable').on('click', function() {
            addGenericVariable();
        });


        //hide action containers until we get data
        $('.actionContainer').hide();

        //set default state
        initActionsTab();

        function initActionsTab() {

            $('#image-wrapper').append('<img alt="" id="product-image"/>');

            //set default to HREF
            $('input[value="href"]').prop('checked','checked');

            setHrefValue('');
            $('#url-wrapper').hide();
            $('#quickview-wrapper').show();

            //set default for window target
            $('input[value="_blank"]').prop('checked','checked');
        }

        $('#btn-preview-fragment').on('click', function(e) {
            var product = $.sv.getProductByID(segmentId, productId);
            var inData = {};
            for(var i=0; i <  product.vars.length; i++) {
                var cur = product.vars[i];
                inData[cur.id] = cur.val;
            }
            s7dmQuickviewFragment.callCommercePlugin(inData);
        });

    });
    
    function enableActionPanelTab() {
        
        // If already active return
        if($( "coral-tab > coral-tab-label:contains('"+ACTIONS+"')").parent().get(0).selected) {
            return;
        }
        
        //enable actions pane
        $( "coral-tab > coral-tab-label:contains('"+CONTENT+"')").parent().attr('disabled', false);
        $( "coral-tab > coral-tab-label:contains('"+ACTIONS+"')").parent().attr('disabled', false);
        
        //set action tab selected
        $( "coral-tab > coral-tab-label:contains('"+ACTIONS+"')").parent().get(0).selected = true;
    }

    /**
     * Adjust keypress event to filter out enter key
     * @param e event
     */
    function adjustKeypressEvent(e){
        e.stopPropagation();
        if(e.keyCode == 13){
            e.preventDefault();
            if ( hasPendingChange($(e.target)) ){
                dispatchNotification();
                resetOrigFieldVal($(e.target));
        }
        }
    }

    function adjustFocusOut(e){
        issueFocusOut($(e.target));
    }

    function issueFocusOut(target) {
        if ( hasPendingChange(target) ){
            dispatchNotification();
            resetOrigFieldVal(target);
        }
        $('.actionContainer').data('current-focus', null);
    }

    function hasPendingChange(target) {
        return (target.data('s7-original') != target.val());
    }

    function resetOrigFieldVal(target) {
        target.data('s7-original', target.val());
    }

    function initFocusIn(e) {
        resetOrigFieldVal($(e.target));
        $('.actionContainer').data('current-focus', $(e.target));
    }

    /**
     * Update product information to GUI
     * If product or individual value is null or undefined, set info to blank, action defaults to URL
     * @param product Product with information to display on GUI
     */
    function updateUI(product){
        var asset   = product ? product.asset : null;
        var href    = product ? product.href : null;
        var target  = product ? product.target : null;
        var vars    = product ? product.vars : null;
        var prodName    = null;
        var isFragment = href.indexOf('quickview:fragment=') == 0;
        var $sku_input = getSkuUIElement(); 
        var $fragment_input = getFragmentUIElement(); 
        var hasReferredProduct = false;

        if (assetMetadata["dam:scene7File"]){
            asset = "/" + assetMetadata["dam:scene7File"] + "?hei=250&fmt=jpg";
        }
        
        //clear original value for HREF value (s7Original).  If a user selects the same URL for a different asset the there will be no "change event"
        //because the value of the text input is technically the same.
        $('.sv-with-wcm-url-path input[is="coral-textfield"]').data('s7Original', '');

        //set product image
        $('#product-image').attr('src', asset ? Granite.HTTP.externalize('/is/image' + asset) : null);

        //clear fields
        $sku_input.val('');
        $fragment_input.val('');
        
        $('#product-name').val('');
        setHrefValue('')
        $('#generic-variables-container').empty();
        $(".skuThumbnail").empty();
        
        if(!isFragment) {
            if (!isTenant) {// "productPicker" is applied
                // init product data
                $sku_input.data(PRODUCT_PATH, "");
                $sku_input.data(PRODUCT_THUMBNAIL_SRC, "");
                $sku_input.data(PRODUCT_TITLE, "");

                // add SKU thumbnail
                var skuThumbailUrl = getSKUThumbailUrl(vars);
                if (skuThumbailUrl === "" || skuThumbailUrl === undefined) {
                    // hide the left button
                    $(".skuThumbnail").css("display", "none");
                    $("#search-product-sku.search-product-sku").addClass("hide-thumbnail");
                } else {
                    hasReferredProduct = true;
                    $(".skuThumbnail").show();
                    $(".skuThumbnail").append("<img src='" + Granite.HTTP.externalize(skuThumbailUrl) + "'>");
                    $("#search-product-sku.search-product-sku").removeClass("hide-thumbnail");
                }
            }
        } else {
            $fragment_input.data('path', '');
            $fragment_input.data(PRODUCT_TITLE, '');
        }

        //set product title: which will be displayed with the swatch image in preview video playback
        var productTitle = "";
        if (product) {
            prodName = product.name;
            productTitle = product.label;

            $('#product-name').val(productTitle);
            if(!isFragment) {
                $sku_input.data(PRODUCT_TITLE, productTitle);
            } else {
                $fragment_input.data(PRODUCT_TITLE, productTitle);
            }

            // to keep a record of the referred product's title if it isn't done yet
            if(hasReferredProduct && !product.hasOwnProperty(PRODUCT_ORIG_TITLE)){
                $sku_input.data(PRODUCT_ORIG_TITLE, productTitle);
            }
        }
        
        //set action type
        var action = 'href';
        if(href && href.split('quickview:').length > 1) {
            action = href.split('quickview:')[1].split('=')[0] == 'fragment' ? 'fragment' : 'quickview'; 
        }

        //update ui for "actions"
        $('input[value='+action+']').prop('checked','checked');

        if(action === 'quickview') {

            //update ui for quickview
            setHrefValue('');
            $('#url-wrapper').hide();

            $('#size-line').hide();
            $('#btn-add-variable').show();
            $('#generic-variables-container').show();
            $('#svfragmentPicker').closest(".coral-Form-fieldwrapper").hide();
            $('#svproductPicker').show();
            $('#quickview-wrapper').show();

            var quickviewSku = href.split('quickview:sku=')[1];
            if (quickviewSku == '') {
                quickviewSku = prodName;
            }

            function stripFileExt(string){
                // remove extension only when string contains '.'
                if (string.indexOf('.') == -1) {
                    return string;
                } else {
                    var str = string.split(".");
                    str.pop();
                    return str.join(".");
                }
            }

            //update sku value: asset name without extension
            $sku_input.val(stripFileExt(quickviewSku));

            //clear variables
            $('#generic-variables-container').empty();

            //build generic variables
            var i;
            var len = vars.length;

            for(i=0;i<len;i++) {

                var obj = vars[i];
                var varStr = obj['id'] + '=' + obj['val'];

                // we need to take care of DATA_RESERVEDVAL_PRODUCTPATH that is in the name-value set too. DATA_RESERVEDVAL_PRODUCTPATH is used for viewer's plugin quickview
                if (obj['id'] === DATA_RESERVEDVAL_PRODUCTPATH) {
                    //update SKU product data
                    $sku_input.data(PRODUCT_PATH, obj['val']);
                } else if (obj['id'] === DATA_RESERVEDVAL_PRODUCTTHUMBNAIL){
                    //update SKU product data
                    $sku_input.data(PRODUCT_THUMBNAIL_SRC, Granite.HTTP.internalize(obj['val']));
                } else{
                    addGenericVariable(varStr);
                }
            }
        } else if(action === 'fragment') {
            //update ui for quickview
            setHrefValue('');
            $('#url-wrapper').hide();

            $('#size-line').show();
            $('#btn-add-variable').hide();
            $('#generic-variables-container').hide();
            $('#svproductPicker').hide();
            $('#svfragmentPicker').closest(".coral-Form-fieldwrapper").show();
            $('#quickview-wrapper').show();

            updateFragmentSizeControls('400', '300');
            
            var fragment = href.split('quickview:fragment=')[1];
            if (fragment == '') {
                fragment = prodName;
            }
            
            $fragment_input.val(fragment);
            
            $('#generic-variables-container').empty();

            for(var i=0; i < vars.length; i++) {
                var obj = vars[i];
                var varStr = obj['id'] + '=' + obj['val'];
                // we need to take care of DATA_RESERVEDVAL_PRODUCTPATH that is in the name-value set too. DATA_RESERVEDVAL_PRODUCTPATH is used for viewer's plugin quickview
                if (obj['id'] === DATA_RESERVEDVAL_PRODUCTPATH) {
                    $fragment_input.data('path', obj['val']);
                    $fragment_input.val(obj['val']);
                } else if (obj['id'] === 'size'){
                    updateFragmentSizeControls(obj['val']);
                } else{
                    addGenericVariable(varStr);
                }
            }
            if(!$('.search-fragment').val()) {
                $('#btn-preview-fragment').addClass('is-disabled');
            } else {
                $('#btn-preview-fragment').removeClass('is-disabled');
            }
        } else {
            //update method radio
            $('input[value='+target+']').prop('checked','checked');

            var urlVal = ( href === '')? 'http://' : href;

            setHrefValue(urlVal);
            $('#url-wrapper').show();
            $('#quickview-wrapper').hide();
            $sku_input.val(prodName); 
        }
    }

    function updateFragmentSize(e) {
        if(!$('.search-fragment').val()) {
            $('#btn-preview-fragment').addClass('is-disabled');
        } else {
            $('#btn-preview-fragment').removeClass('is-disabled');
        }
        dispatchNotification();
    }
    
    function updateFragmentSizeControls(size) {
        $('#fragment-dialog-wid').off('change');
        $('#fragment-dialog-hei').off('change');

        size = size != null ? size : "400,300";
        $('#fragment-dialog-wid').val(size.split(',')[0]);
        $('#fragment-dialog-hei').val(size.split(',')[1]);
        if(!$('.search-fragment').val()) {
            $('#btn-preview-fragment').addClass('is-disabled');
        } else {
            $('#btn-preview-fragment').removeClass('is-disabled');
        }
        
        $('#fragment-dialog-wid').on('change', updateFragmentSize);
        $('#fragment-dialog-hei').on('change', updateFragmentSize);
    }
    
    function isEmpty (str) {
        return str === undefined || str === "";
    }

    function addGenericVariable(variableStr) {

        var variableLabel = '<span>' + Granite.I18n.get('Generic variable') + '</span><br/>';
        var variableText = (variableStr == undefined)? VAR_INSTRUCTION_TEXT : variableStr;

        //add variable
        var variableMarkup = '<span id="generic-variable-text" class="genericVariable coral-Form-field">';
        variableMarkup += '<input is="coral-textfield" value="'+variableText+'">';
        variableMarkup += '<button is="coral-button" class="btnClearText" icon="delete" iconsize="S">';
        variableMarkup += '</button>';
        variableMarkup += '</span>';

        //add html markup
        $('#generic-variables-container').append(variableLabel);
        var tempInput = $('#generic-variables-container').append(variableMarkup);
        
        tempInput.find('input').on('keyup keydown', function(e) {

            if(e.keyCode == 13) {
                e.preventDefault();
            }

        });

        //click handler for variable deletion
        $('.genericVariable > input').on('change', function(e) {

          //update data and trigger sv-action-change-event
            dispatchNotification();
        });

        $('.genericVariable > input').on('focus', function(e) {
            if($(this).val().length > 1 && $(this).val() === VAR_INSTRUCTION_TEXT) {
                $(this).val('');
            }
        });

        $('.genericVariable > input').on('focusout', function(e) {

            if($(this).val().length < 1) {
                $(this).val(VAR_INSTRUCTION_TEXT);
            }
        });

        //click handler for variable deletion
        $('.btnClearText').on('click', function(e) {
            
            //remove <br> el
            $(this).parent().prev().remove();
            //remove <span> for generic var label
            $(this).parent().prev().remove();
            //remove text field and "x" button
            $(this).prev().val('');
            $(this).parent().remove();

            //update data and trigger sv-action-change-event
            dispatchNotification();
        });
    }

    function loadMetadata(product) {

        var metadataPath = productId + '/_jcr_content/metadata.json?ts=' + new Date().getTime();

        $.get( metadataPath, function(data) {
            assetMetadata = data;
            setProductData(product);
        })
        .fail(function() {
            console.log('error loading metadata');
        })
        .always(function() {
            refreshProductData();
            updateUI(product);
        });
    }

    /**To retrieve and set proper product info based on the initial product info
     * 1. Product label: used as the swatch label in Video playback
     *    If the swatch image is associated with a commerce product, the commerce product title (or name if no "title") is returned. 
     *    If the swatch image is not associated with a commerce productOtherwise, the image "title" (or name if no "title") will be returned. 
     * 2. Product name: used for SKU name. This is different than product title 
     */
    function setProductData(product) {
        var productReference = assetMetadata.hasOwnProperty("cq:productReference") ? assetMetadata["cq:productReference"] : "";

        if (product.hasOwnProperty("name")){
            // "Product" was updated with "name". Its logical "title" was applied as well
            return;
        };

        if (productReference !== "") {
            // To get the product metadata and set product label with the product metadata
            $.ajax({
                type:"GET",
                url:productReference + ".json",
                async:false
            }).done(function (data) {
                product.label = data['jcr:title'];
                product.name  = data["identifier"];
                product[PRODUCT_ORIG_TITLE] = data['jcr:title'];
            }).fail(function() {
                console.log("Get product metadata failed." );
            });
        } else {
            // To set product label with the img info
            var imgTitle = assetMetadata['dc:title'];
            var imgName  = productId.split('.')[0];
            var strArr = imgName.split('/');
            imgName = strArr[strArr.length-1];

            //To use the image title,  if there is no title, image name is used
            product.label = ((typeof imgTitle == 'undefined') ? imgName : imgTitle);
            product.name  = imgName;
        }
    }

    function refreshProductData(){
        var $sku_input = getSkuUIElement();
        $sku_input.removeData();
    }

    function getGenericVariables() {

        var i;
        var genericVars = $('.genericVariable').find('input');
        var len = genericVars.length;
        var variablesArray = [];
        var variableName = '';
        var variableText = '';

        for(i=0;i<len;i++) {
            var variable = {};

            variableName = $(genericVars[i]).val().split('=')[0];
            variableText = $(genericVars[i]).val().split('=')[1];

            if(variableName == undefined || variableName.length<1) {
                continue;
            }
            if(variableText == undefined || variableText.length<1) {
                continue;
            }

            //build var
            var genericVar = $.sv.buildVar(variableName, variableText);

            variablesArray.push(genericVar);
        }
        return variablesArray;
    }

    function dispatchNotification() {

        var actionType  = ($('input[value=quickview]').is(':checked')) ? 'quickview' : (($('input[value=fragment]').is(':checked')) ? 'fragment' : 'hyperlink');
        var target      = ($('input[value=_blank]').is(':checked'))? '_blank' : '_parent';
        target = (actionType === 'hyperlink') ? target : '';
        var vars = (actionType === 'hyperlink') ? [] : getGenericVariables();

        // save updated product path/thumbnail to the reserved data
        var $elem_input = (actionType === 'fragment') ? getFragmentUIElement() : getSkuUIElement();
        if (actionType === 'quickview') {
            var val_productpath = $.sv.buildVar(DATA_RESERVEDVAL_PRODUCTPATH, getPickedProductInfo(PRODUCT_PATH, ""));
            vars.push(val_productpath);
            var isTenant = $("#asset-info").data("isTenant");
            if (!isTenant) { // Since "productPicker" is applied, the product thumbnail will display.
                var val_productThumbnail = $.sv.buildVar(DATA_RESERVEDVAL_PRODUCTTHUMBNAIL, getPickedProductInfo(PRODUCT_THUMBNAIL_SRC, ""));
                vars.push(val_productThumbnail);
            }
        } else if (actionType === 'fragment') {
            var val_productpath = $.sv.buildVar(DATA_RESERVEDVAL_PRODUCTPATH, getPickedFragmentInfo('path', ''));
            vars.push(val_productpath);
            vars.push({'id' : 'size', 'val' : $('#fragment-dialog-wid').val() + "," + $('#fragment-dialog-hei').val()});
        }

//      var href = (actionType === 'quickview') ? 'quickview:sku=' + $sku_input.val() : getHrefValue();
        var href = (actionType === 'hyperlink') ? getHrefValue() : 'quickview:' + (actionType === 'fragment' ? 'fragment' : 'sku') + '=' + $elem_input.val();
        var product = $.sv.buildProduct(productId, href, target, vars, $('#product-name').val());
        var prodTitle = actionType === 'fragment' ? getPickedFragmentInfo(PRODUCT_TITLE, product.asset) : getPickedProductInfo(PRODUCT_TITLE, product.asset);
        product.label = (prodTitle === "" ? product.label : prodTitle); // replace its value if a product is picked
        product.name  = $elem_input.val();

        //send notification
        $.srcProduct.trigger({type:'sv-action-change', 'segmentId':segmentId, 'productId':productId, 'product':product});

    }

    function getSkuUIElement(){
        // We need to keep "#sku" for AoD since it doesn't install wcm package, ".search-product-sku" is only for AEM for now
        var isTenant = $("#asset-info").data("isTenant");
        return isTenant ? $("#sku") : $(".search-product-sku");
    }

    function getFragmentUIElement(){
        return $(".search-fragment");
    }

    function getSKUThumbailUrl(vars) {
        var thumbnailUrl = '';
        if (!vars){
            return;
        }
        // find the user picked product thumbnail from vars first
        vars.map(function(item, i) {
            if (item['id'] === DATA_RESERVEDVAL_PRODUCTTHUMBNAIL) {
                thumbnailUrl = item['val'];
            }
        })

        // find the product thumbnail from asset metadata
        if (thumbnailUrl === "") {
            var productReference = assetMetadata.hasOwnProperty("cq:productReference") ? assetMetadata["cq:productReference"] : "";
            if (productReference !== "") {
                thumbnailUrl = productReference + "/assets/asset.thumbnail.319.png/" + new Date().getTime();
            }
        }
        return thumbnailUrl;
    }


    function setHrefValue(value){
        $(HREF_INPUT).val(value);
    }

    function getHrefValue(){
        value = $(HREF_INPUT).val();
        /*
            return _g.shared.XSS.getXSSValue(value);

            this is what we were doing previously
            HTML Encoding the url by using _g.shared.XSS.getXSSValue which is a wrapper over _g.utils.htmlEncode
            Removing it because html encoding is not required for url.
            URI encoding will be sufficient in this case which we are already doing at submit action
        */ 
        return value;
    }

    function reviseHref(value){
        var contextPath = Granite.HTTP.getContextPath();
        //add context path if applicable and if it has not been added already
        if (value !== ''  
                && (contextPath.length != 0 ? value.substring(0, contextPath.length) !== contextPath : true)
                && value.substring(0, HTTP_PROTOCOL.length) !== HTTP_PROTOCOL
                && value.substring(0, HTTPS_PROTOCOL.length) !== HTTPS_PROTOCOL
                && value.substring(0, 'www'.length) !== 'www') {

            if(value.startsWith('/')) {
                if(contextPath !== "" && value.indexOf(contextPath) != 0){
                    value = contextPath + value;
                }
                if(!value.endsWith(".html") && !(/\.([^\/\.]+)$/.test(value))){
                    value += '.html';
                }
                setHrefValue(value);
            }
        }
        return value;
    }
    
    /**
     * To get user picked product info, if there is no picked product, we fall back to the image's "cq:productReference".
     * If no "cq:productReference", fall back to get the image info: "productID" etc.
     */
    function getPickedProductInfo(name, assetPath){
        var $sku_input = getSkuUIElement();
        var productInfo = $sku_input.data(name);

        if (isEmpty(productInfo)) {
            var productReference = assetMetadata.hasOwnProperty("cq:productReference") ? assetMetadata["cq:productReference"] : "";
            if (productReference !== "") {
                if (name === PRODUCT_PATH) {
                    productInfo = productReference;
                }else if (name === PRODUCT_THUMBNAIL_SRC){
                    productInfo = productReference + "/assets/asset.thumbnail.319.png/" + new Date().getTime();
                }else if(name === PRODUCT_TITLE){
                    productInfo = $sku_input.data(PRODUCT_TITLE);
                }
            } else {
                if (name === PRODUCT_PATH || name === PRODUCT_THUMBNAIL_SRC){ // no need to return image path/thumbmnailSrc for "vars"
                    productInfo = "";
                }else if(name === PRODUCT_TITLE){
                    productInfo = assetMetadata.hasOwnProperty("dc:title") ? assetMetadata["dc:title"] : "";
                    if (productInfo === "") {
                        // if there is no asset tilte, fall back to the asset name 
                        var idx = assetPath.lastIndexOf("/");
                        productInfo = assetPath.substr(idx + 1, assetPath.length).split(".")[0];
                    }
                }
            }
        }

        return productInfo;
    }

    function getPickedFragmentInfo(name, assetPath){
        var $fragment_input = getFragmentUIElement();
        var productInfo = $fragment_input.data(name);
        if (isEmpty(productInfo)) {
            
        }
        return productInfo;
    }
    
 }(document, Granite.$));
