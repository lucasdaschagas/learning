/*************************************************************************
* ADOBE CONFIDENTIAL
* ___________________
*
* Copyright 2015 Adobe
* All Rights Reserved.
*
* NOTICE: All information contained herein is, and remains
* the property of Adobe and its suppliers, if any. The intellectual
* and technical concepts contained herein are proprietary to Adobe
* and its suppliers and are protected by all applicable intellectual
* property laws, including trade secret and copyright laws.
* Dissemination of this information or reproduction of this material
* is strictly forbidden unless prior written permission is obtained
* from Adobe.
**************************************************************************/
(function(window, $, Coral, moment) {
    "use strict";

    var DEBOUNCE_TIMEOUT = 500;

    var requiredString;
    function getRequiredString() {
        if (!requiredString) {
            requiredString = Granite.I18n.get("Error: Please fill out this field.");
        }
        return requiredString;
    }

    function handleValidation(el) {
        var api = el.adaptTo("foundation-validation");
        if (api) {
            api.checkValidity();
            api.updateUI();
        }
    }

    function handleShow(element, message) {
        var el = $(element);

        var field = el.closest(".coral-Form-field");
        var coralFormVertical = field.closest(".foundation-form, .coral-Form").hasClass("coral-Form--vertical");

        var fieldAPI = el.adaptTo("foundation-field");
        if (fieldAPI && fieldAPI.setInvalid) {
            fieldAPI.setInvalid(true);
        }

        showHideInfoTooltip(field, false);

        var error = _retrieveErrorElement(field);
        var labelledByElement;

        if (coralFormVertical) {
            var label = $(error).data("foundation-validation.internal.error.label");
            if (label) {
                label.innerHTML = message;
                labelledByElement = label;
            }
        } else {
            var tooltip = $(error).data("foundation-validation.internal.error.tooltip");
            if (tooltip) {
                tooltip.content.innerHTML = message;
                labelledByElement = tooltip;
            }
        }

        if (!error.parentNode && labelledByElement) {
            // append label ID to the labelledby attribute of field
            setLabelledBy(fieldAPI, getLabel(getLabelledBy(fieldAPI), labelledByElement.id));
            field.after(error, labelledByElement);

            error.setAttribute("aria-describedby", labelledByElement.id);
            error.setAttribute("tabindex", 0);
            error.alt = message;
        }
    }

    /**
     * Retrieves the invalid error data on a given field.
     * If the invalid error data does not exist, then it creates it and sets it on the element.
     *
     * @param field
     * @private
     */
    function _retrieveErrorElement(field) {
        var error = field.data("foundation-validation.internal.error");

        if (error) {
            return error;
        }

        var label;
        var tooltip;

        error = new Coral.Icon();
        error.icon = "alert";
        error.classList.add("coral-Form-fielderror");

        label = document.createElement("label");
        label.classList.add("coral-Form-errorlabel");
        label.id = Coral.commons.getUID();
        label.setAttribute("tabindex", 0);
        $(error).data("foundation-validation.internal.error.label", label);

        tooltip = new Coral.Tooltip();
        tooltip.variant = "error";
        tooltip.placement = "bottom";
        tooltip.target = error;
        tooltip.id = Coral.commons.getUID();
        tooltip.setAttribute("aria-hidden", "true");

        $(error).data("foundation-validation.internal.error.tooltip", tooltip);

        field.data("foundation-validation.internal.error", error);
        return error;
    }

    function handleClear(element) {
        var el = $(element);

        var field = el.closest(".coral-Form-field");

        var fieldAPI = el.adaptTo("foundation-field");
        if (fieldAPI && fieldAPI.setInvalid) {
            fieldAPI.setInvalid(false);
        }

        var error = field.data("foundation-validation.internal.error");
        if (error) {
            var tooltip = $(error).data("foundation-validation.internal.error.tooltip");
            var label = $(error).data("foundation-validation.internal.error.label");

            if (tooltip) {
                tooltip.hide();
                tooltip.remove();
            }

            if (label) {
                label.remove();
            }

            error.remove();

            // Remove the ID of error from the label of field
            var labelledBy = getLabelledBy(fieldAPI);
            var newLabel;
            var labelledById = tooltip ? tooltip.id : label.id;
            if (labelledBy && labelledBy.indexOf(labelledById) !== -1) {
                newLabel = labelledBy.split(" ")
                    .filter(function(v) {
                        return v !== labelledById;
                    })
                    .join(" ");
                setLabelledBy(fieldAPI, newLabel);
            }
        }
        showHideInfoTooltip(field, true);
    }

    /**
     * Method that shows or hides the info circle from a coral-Form input when that input is invalid.
     *
     * @param field - the field associated with the tooltip
     * @param show - boolean to either show or hide the info tooltip
     * @private
     */
    function showHideInfoTooltip(field, show) {
        if (show) {
            field.nextAll(".coral-Form-fieldinfo").removeClass("u-coral-screenReaderOnly");
            field.nextAll(".coral-Form-fieldinfo").map(
                function(index, element) {
                    element.setAttribute("tabindex", 0);
                });
        } else {
            field.nextAll(".coral-Form-fieldinfo").addClass("u-coral-screenReaderOnly");
            field.nextAll(".coral-Form-fieldinfo").map(
                function(index, element) {
                    element.setAttribute("tabindex", 1);
                });
        }
    }

    function getLabel(label, errorId) {
        if (label) {
            return label + " " + errorId;
        }
        return errorId;
    }

    /**
     * This method sets value of labelledby attribute on field.
     *
     * @param fieldAPI foundation-field
     * @param labelledBy value of labelledby attribute to set on field
     */
    function setLabelledBy(fieldAPI, labelledBy) {
        if (fieldAPI && fieldAPI.setLabelledBy) {
            fieldAPI.setLabelledBy(labelledBy);
        }
    }

    /**
     * This method gets value of labelledby attribute from field.
     *
     * @param fieldAPI foundation-field
     */
    function getLabelledBy(fieldAPI) {
        if (fieldAPI && fieldAPI.getLabelledBy) {
            return fieldAPI.getLabelledBy();
        }
    }

    /**
    * This method computes whether a dividend is divisible by the divisor
    * or not.
    * It is capable of handling floating point arithmetic as well.
    */
    function isDivisible(dividend, divisor) {
        if (!divisor) {
            return true;
        }
        var dividendDecimal = dividend.toString().split(".");
        var divisorDecimal = divisor.toString().split(".");
        var dividendDecimalLength = (dividendDecimal[1] && dividendDecimal[1].length) || 0;
        var divisorDecimalLength = (divisorDecimal[1] && divisorDecimal[1].length) || 0;

        if (dividendDecimalLength === 0 && divisorDecimalLength === 0) {
            return (dividend % divisor) === 0;
        }
        var higherDecimalLength =
        dividendDecimalLength > divisorDecimalLength
            ? dividendDecimalLength + 1
            : divisorDecimalLength + 1;
        // Math round is added to avoid javascipt
        // floating point number precision
        return (Math.round(dividend * Math.pow(10, higherDecimalLength + 1)) %
                   Math.round(divisor * Math.pow(10, higherDecimalLength + 1))) === 0;
    }

    var debounce = Granite.UI.Foundation.Utils.debounce;
    var registry = $(window).adaptTo("foundation-registry");

    var formFieldSelector = [ ".coral-Form-fieldwrapper .coral-Form-field",
        ".coral-Form-fieldwrapper .coral-Form-field.coral-InputGroup .coral-InputGroup-input",
        ".coral-Form-fieldwrapper .coral-Form-field.coral-DecoratedTextfield .coral-DecoratedTextfield-input",
        ".coral-Form-fieldwrapper .coral-Form-field.coral-PathBrowser .js-coral-pathbrowser-input",
        ".coral-Form-fieldwrapper .coral-Form-field.coral-Checkbox .coral-Checkbox-input",
        ".coral-Form-fieldwrapper .coral-Form-field.coral-Switch .coral-Switch-input",
        ".coral-Form-fieldwrapper .coral-Form-field.coral-Select .coral-Select-select",
        ".coral-Form-fieldwrapper .coral-Form-field.coral-FileUpload .coral-FileUpload-input" ];

    registry.register("foundation.validation.validator", {
        selector: formFieldSelector.join(", "),
        show: function(element, message) {
            handleShow(element, message);
        },
        clear: function(element) {
            handleClear(element);
        }
    });


    // Validator for password retype field
    registry.register("foundation.validation.validator", {
        selector: "input[type=password]",
        validate: function(el) {
            var $el = $(el);

            if (!el.value) {
                return;
            }

            // Note that we show the error message at the retype field.

            var retypeName = el.getAttribute("data-granite-password-retype");
            if (retypeName) {
                var $retypeField = $el.closest("form").find("input[type=password]").filter(function() {
                    return this.name === retypeName;
                });
                if ($retypeField.val()) {
                    handleValidation($retypeField);
                }
            } else {
                // If el has no selector attribute, check for another password fields that are pointing to el
                // We have to validate el against those.

                var isValid = true;

                $el.closest("form").find("input[type=password][data-granite-password-retype]").each(function() {
                    retypeName = this.getAttribute("data-granite-password-retype");

                    if (!retypeName || retypeName !== el.name) {
                        return;
                    }

                    if (this.value && this.value !== el.value) {
                        isValid = false;
                        return false;
                    }
                });

                if (!isValid) {
                    return Granite.I18n.get("Passwords do not match!");
                }
            }
        }
    });


    // Selector for coral-checkbox, coral-radio, coral-switch
    registry.register("foundation.validation.selector", {
        submittable: "coral-checkbox, coral-radio, coral-switch",
        candidate: [
            "coral-checkbox:not([readonly]):not([disabled])",
            "coral-radio:not([readonly]):not([disabled])",
            "coral-switch:not([readonly]):not([disabled])"
        ].join(", "),
        exclusion: "coral-checkbox *, coral-radio *, coral-switch *"
    });

    // Validator for required of coral-checkbox, coral-radio, coral-switch
    registry.register("foundation.validation.validator", {
        selector: "coral-checkbox, coral-radio, coral-switch",
        validate: function(el) {
            if (el.required && !el.checked) {
                return getRequiredString();
            }
        }
    });


    // Selector for coral-datepicker, coral-numberinput, coral-slider, coral-colorinput
    registry.register("foundation.validation.selector", {
        submittable: "coral-datepicker, coral-numberinput, coral-slider, coral-colorinput",
        candidate: [
            "coral-datepicker:not([readonly]):not([disabled])",
            "coral-numberinput:not([readonly]):not([disabled])",
            "coral-slider:not([readonly]):not([disabled])",
            "coral-colorinput:not([readonly]):not([disabled])"
        ].join(", "),
        exclusion: "coral-datepicker *, coral-numberinput *, coral-slider *, coral-colorinput *"
    });

    // Validator for required of coral-slider and coral-colorinput
    registry.register("foundation.validation.validator", {
        selector: "coral-slider, coral-colorinput",
        validate: function(el) {
            // Check required attribute
            if (el.required && el.value.length === 0) {
                return getRequiredString();
            }
        }
    });

    registry.register("foundation.validation.validator", {
        selector: "coral-numberinput",
        validate: function(el) {
            if (el.required && !el.value) {
                return getRequiredString();
            }

            if (el.max !== null && el.valueAsNumber > el.max) {
                return Granite.I18n.get("Please enter a value that is no more than {0}.", [ el.max ], "{0}=max number");
            }

            if (el.min !== null && el.valueAsNumber < el.min) {
                return Granite.I18n.get("Please enter a value that is no less than {0}.", [ el.min ], "{0}=min number");
            }

            if (!isNaN(el.step) && !isNaN(el.valueAsNumber) && !isDivisible(el.valueAsNumber, el.step)) {
                return Granite.I18n.get("Please enter a value that is a multiple of {0}.", [ el.step ], "{0}=step");
            }
        }
    });

    // Validator for required of coral-datepicker
    registry.register("foundation.validation.validator", {
        selector: "coral-datepicker",
        validate: function(el) {
            // Check required attribute
            if (el.required && el.value.length === 0) {
                return getRequiredString();
            }

            var $el = $(el);

            var beforeAttributeName = "data-granite-datepicker-before";
            var afterAttributeName = "data-granite-datepicker-after";
            var validationResult;

            var beforeSelector = el.getAttribute(beforeAttributeName);

            if (beforeSelector) {
                $(beforeSelector).each(function() {
                    validationResult = validateAfter(el, this);
                    if (validationResult) {
                        return false;
                    }
                });
                if (validationResult) {
                    return validationResult;
                }
            }

            var afterSelector = el.getAttribute(afterAttributeName);

            if (afterSelector) {
                $(afterSelector).each(function() {
                    validationResult = validateBefore(el, this);
                    if (validationResult) {
                        return false;
                    }
                });
                if (validationResult) {
                    return validationResult;
                }
            }

            // If el has no selector attribute, check for another datepickers that are pointing to el
            // We have to validate those (because the attribute is set there) against el.

            $("coral-datepicker[" + beforeAttributeName + "]").each(function() {
                if ($el.is(this.getAttribute(beforeAttributeName))) {
                    validationResult = validateBefore(el, this);
                    if (validationResult) {
                        handleValidation($(this));
                    }
                }
            });

            $("coral-datepicker[" + afterAttributeName + "]").each(function() {
                if ($el.is(this.getAttribute(afterAttributeName))) {
                    validationResult = validateAfter(el, this);
                    if (validationResult) {
                        handleValidation($(this));
                    }
                }
            });
        }
    });

    /**
     * Checks if the given beforeEl is before the afterEl.
     */
    function validateBefore(beforeEl, afterEl) {
        if (beforeEl.valueAsDate === null || afterEl.valueAsDate === null) {
            // It cannot be compared so ignore it.
            // The validity of the date is checked by other validator. We are dealing solely with comparison.
            return;
        }

        if (beforeEl.valueAsDate.getTime() >= afterEl.valueAsDate.getTime()) {
            return Granite.I18n.get(
                "The date is not before {0}.",
                moment(afterEl.valueAsDate).format(afterEl.displayFormat)
            );
        }
    }

    /**
     * Checks if the given afterEl is after the beforeEl.
     */
    function validateAfter(afterEl, beforeEl) {
        if (beforeEl.valueAsDate === null || afterEl.valueAsDate === null) {
            // It cannot be compared so ignore it.
            // The validity of the date is checked by other validator. We are dealing solely with comparison.
            return;
        }

        if (beforeEl.valueAsDate.getTime() >= afterEl.valueAsDate.getTime()) {
            return Granite.I18n.get(
                "The date is not after {0}.",
                moment(beforeEl.valueAsDate).format(beforeEl.displayFormat)
            );
        }
    }


    // Selector for coral-autocomplete, coral-select, coral-taglist, coral-fileupload, coral-buttongroup
    registry.register("foundation.validation.selector", {
        submittable: "coral-autocomplete, coral-select, coral-taglist, coral-fileupload, coral-buttongroup",
        candidate: [
            "coral-autocomplete:not([readonly]):not([disabled])",
            "coral-select:not([readonly]):not([disabled])",
            "coral-taglist:not([readonly]):not([disabled])",
            "coral-fileupload:not([readonly]):not([disabled])",
            "coral-buttongroup:not([readonly]):not([disabled])"
        ].join(", "),
        exclusion: "coral-autocomplete *, coral-select *, coral-taglist *, coral-fileupload *, coral-buttongroup *"
    });

    // Validator for required of coral-autocomplete, coral-select, coral-taglist, coral-fileupload, coral-buttongroup
    registry.register("foundation.validation.validator", {
        selector: "coral-autocomplete, coral-select, coral-taglist, coral-fileupload, coral-buttongroup",
        validate: function(el) {
            if (el.required) {
                if (el.values.length === 0 || (el.values.length === 1 && el.value === "")) {
                    return getRequiredString();
                }
            }
        }
    });

    // Selector for coral-multifield
    registry.register("foundation.validation.selector", {
        submittable: "coral-multifield",
        candidate: "coral-multifield",
        exclusion: "[coral-multifield-template], [coral-multifield-template] *"
    });

    // Validator for required of coral-multifield
    registry.register("foundation.validation.validator", {
        selector: "coral-multifield",
        validate: function(el) {
            if (el.getAttribute("aria-required") === "true" && el.items.getAll().length === 0) {
                return getRequiredString();
            }
        }
    });

    // Driver for coral fields
    var changeCssSelector = [
        "coral-autocomplete",
        "coral-checkbox",
        "coral-switch",
        "coral-datepicker",
        "coral-numberinput",
        "coral-colorinput",
        "coral-radio",
        "coral-select",
        "coral-slider",
        "coral-taglist",
        "coral-multifield",
        "coral-fileupload",
        "coral-buttongroup"
    ].join(", ");
    $(document).on("change", changeCssSelector, function(e) {
        handleValidation($(this));
    });

    // As it is not a ShadowDOM and Coral doesn't retarget the input event from its shadow element,
    // we have to retarget on behalf.
    var inputCssSelector = [
        "coral-datepicker input[handle]",
        "coral-numberinput input[handle]",
        "coral-colorinput input[handle]"
    ].join(", ");
    $(document).on("input", inputCssSelector, debounce(function(e) {
        handleValidation($(this).closest("coral-datepicker, coral-numberinput, coral-colorinput"));
    }, DEBOUNCE_TIMEOUT));


    // Selector for radiogroup
    registry.register("foundation.validation.selector", {
        submittable: ".coral-RadioGroup",
        candidate: ".coral-RadioGroup",
        exclusion: ".coral-RadioGroup *"
    });

    // Validator for required of radiogroup
    registry.register("foundation.validation.validator", {
        selector: ".coral-RadioGroup",
        validate: function(el) {
            var $el = $(el);

            if ($el.attr("aria-required") !== "true") {
                return;
            }

            var coral3 = $el.find("coral-radio");
            if (coral3.length) {
                if (coral3.filter("[checked]").length === 0) {
                    return getRequiredString();
                }
            } else if ($el.find("> * > :checked").length === 0) {
                return getRequiredString();
            }
        }
    });

    // Driver for coral radiogroup
    $(document).on("change", ".coral-RadioGroup", function(e) {
        handleValidation($(this));
    });


    // Selector for autocomplete
    registry.register("foundation.validation.selector", {
        submittable: ".coral-Autocomplete:not(coral-autocomplete)",
        candidate: ".coral-Autocomplete:not(coral-autocomplete)", // TODO handle readonly and disabled
        exclusion: ".coral-Autocomplete:not(coral-autocomplete) *"
    });

    // Validator for required for autocomplete
    registry.register("foundation.validation.validator", {
        selector: ".coral-Autocomplete:not(coral-autocomplete)",
        validate: function(element) {
            var el = $(element);

            // value is not required, so validation is skipped
            if (el.attr("aria-required") !== "true") {
                return;
            }

            var autocomplete = el.data("autocomplete");

            // validates both multiple and non-multiple options
            if (autocomplete.getValue().length === 0) {
                return getRequiredString();
            }
        }
    });

    // Driver for autocomplete

    $(document).on("change:value", ".coral-Autocomplete:not(coral-autocomplete)", function(e) {
        handleValidation($(this));
    });

    var acValidateHandler = function(e) {
        var el = $(this);
        var ac = el.closest(".coral-Autocomplete");

        if (ac.data("autocomplete").options.multiple) {
            return;
        }

        handleValidation(ac);
    };

    $(document).on("change", ".js-coral-Autocomplete-textfield", acValidateHandler);
    $(document).on("input", ".js-coral-Autocomplete-textfield", debounce(acValidateHandler, DEBOUNCE_TIMEOUT));


    function pushInvalid(container, invalid) {
        var key = "coral-tabview.internal.invalids";

        var invalids = container.data(key);
        if (invalids === undefined) {
            invalids = [];
            container.data(key, invalids);
        }

        if (invalids.indexOf(invalid) < 0) {
            invalids.push(invalid);
        }
    }

    $(document).on("foundation-validation-invalid", "coral-panel", function(e) {
        var panel = $(this);
        var tabview = panel.parent().parent("coral-tabview")[0];

        if (!tabview) {
            // Not the panel of the tabview.
            return;
        }

        // Wait for element upgrade
        requestAnimationFrame(function() {
            var tab = tabview.tabList.items.getAll()[panel.index()];
            // Only when tabs are used in tabview
            if (tab) {
                tab.invalid = true;
            }
            pushInvalid(panel, e.target);
        });
    });

    $(document).on("foundation-validation-valid", "coral-panel", function(e) {
        var panel = $(this);
        var tabview = panel.parent().parent("coral-tabview")[0];

        if (!tabview) {
            // Not the panel of the tabview.
            return;
        }

        // Wait for element upgrade
        requestAnimationFrame(function() {
            var tab = tabview.tabList.items.getAll()[panel.index()];

            var enable = function() {
                // Only when tabs are used in tabview
                if (tab && panel.adaptTo("foundation-validation-helper").isValid()) {
                    tab.invalid = false;
                }
            };

            var invalids = panel.data("coral-tabview.internal.invalids");

            if (!invalids) {
                enable();
                return;
            }

            var i = invalids.indexOf(e.target);
            if (i >= 0) {
                invalids.splice(i, 1);
            }

            if (invalids.length === 0) {
                enable();
                return;
            }

            // check if the invalids are belong to the panel (they can be moved meanwhile)
            // if all of them are outside the panel, then enable the binded element

            var invalid = false;

            var j = invalids.length;
            while (j--) {
                if (panel.has(invalids[j]).length) {
                    invalid = true;
                    break;
                }
                invalids.splice(j, 1);
            }

            if (!invalid) {
                enable();
            }
        });
    });
/* global moment:false */
})(window, Granite.$, Coral, moment);
