<%--
  ADOBE CONFIDENTIAL

  Copyright 2015 Adobe Systems Incorporated
  All Rights Reserved.

  NOTICE:  All information contained herein is, and remains
  the property of Adobe Systems Incorporated and its suppliers,
  if any.  The intellectual and technical concepts contained
  herein are proprietary to Adobe Systems Incorporated and its
  suppliers and may be covered by U.S. and Foreign Patents,
  patents in process, and are protected by trade secret or copyright law.
  Dissemination of this information or reproduction of this material
  is strictly forbidden unless prior written permission is obtained
  from Adobe Systems Incorporated.
--%><%
%><%@include file="/libs/granite/ui/global.jsp" %><%
%><%@page session="false"
          import="com.adobe.granite.ui.components.AttrBuilder,
                  com.adobe.granite.ui.components.Config,
                  com.adobe.granite.ui.components.ds.ValueMapResource,
                  org.apache.sling.api.wrappers.ValueMapDecorator,
                  com.adobe.granite.ui.components.Field,
                  com.adobe.granite.translation.api.TranslationConfig,
                  com.adobe.granite.translation.api.TranslationManager,
                  com.adobe.granite.translation.api.TranslationConstants.TranslationMethod,
                  com.adobe.granite.ui.components.Tag,
                  java.text.Collator,
                  java.util.HashMap,
                  java.util.Map,
                  javax.jcr.Session,
                  org.apache.commons.lang.StringUtils,
                  java.util.Collections,
                  java.util.Comparator,
                  java.util.Locale,
                  com.adobe.granite.translation.api.TranslationService,
                  com.adobe.granite.translation.api.TranslationException,
                  java.util.TreeMap,
                  java.util.ArrayList,
                  java.util.Set,
                  java.util.Arrays,
                  java.util.Comparator,
                  com.day.cq.i18n.I18n,
                  com.adobe.granite.ui.components.Value" %><%
  Config cfg = cmp.getConfig();
  boolean bCreateProjectMode = cfg.get("createProjectMode", false);
  TranslationConfig tc = sling.getService(TranslationConfig.class);
  TranslationManager tm = sling.getService(TranslationManager.class);
  HashMap<String, String> machineTranslationFactories = (HashMap<String, String>)tm.getAvailableFactoryNames(TranslationMethod.MACHINE_TRANSLATION);
  HashMap<String, String> humanTranslationFactories = (HashMap<String, String>)tm.getAvailableFactoryNames(TranslationMethod.HUMAN_TRANSLATION);
  HashMap<String, String> languages = (HashMap<String, String>)tc.getLanguages();
  HashMap<String, String> categories = (HashMap<String, String>)tc.getCategories();
  HashMap<String, String> serviceToCloudConfigMap = new HashMap<String, String>();
  addToServiceMap(tm, serviceToCloudConfigMap, machineTranslationFactories, TranslationMethod.MACHINE_TRANSLATION);
  addToServiceMap(tm, serviceToCloudConfigMap, humanTranslationFactories, TranslationMethod.HUMAN_TRANSLATION);
  ArrayList<KeyValueObject> languageArray = new ArrayList<KeyValueObject>();
  ArrayList<KeyValueObject> categoryArray = new ArrayList<KeyValueObject>();
  getSortedList(languageArray, languages, true, i18n, slingRequest.getLocale());
  getSortedList(categoryArray, categories, false, i18n, slingRequest.getLocale());
  ArrayList<KeyValueObject> scheduleRepeatArray = new ArrayList<KeyValueObject>();
  scheduleRepeatArray.add(new KeyValueObject("0", i18n.get("None")));
  scheduleRepeatArray.add(new KeyValueObject("d", i18n.get("Daily")));
  scheduleRepeatArray.add(new KeyValueObject("w", i18n.get("Weekly")));
  scheduleRepeatArray.add(new KeyValueObject("m", i18n.get("Monthly")));
  scheduleRepeatArray.add(new KeyValueObject("y", i18n.get("Yearly")));

  ArrayList<KeyValueObject> scheduleRepeatWeekDay = new ArrayList<KeyValueObject>();
  scheduleRepeatWeekDay.add(new KeyValueObject("1", i18n.get("Sunday")));
  scheduleRepeatWeekDay.add(new KeyValueObject("2", i18n.get("Monday")));
  scheduleRepeatWeekDay.add(new KeyValueObject("3", i18n.get("Tuesday")));
  scheduleRepeatWeekDay.add(new KeyValueObject("4", i18n.get("Wednesday")));
  scheduleRepeatWeekDay.add(new KeyValueObject("5", i18n.get("Thursday")));
  scheduleRepeatWeekDay.add(new KeyValueObject("6", i18n.get("Friday")));
  scheduleRepeatWeekDay.add(new KeyValueObject("7", i18n.get("Saturday")));
  
  ArrayList<KeyValueObject> scheduleRepeatMonth = new ArrayList<KeyValueObject>();
  scheduleRepeatMonth.add(new KeyValueObject("0", i18n.get("January")));
  scheduleRepeatMonth.add(new KeyValueObject("1", i18n.get("February")));
  scheduleRepeatMonth.add(new KeyValueObject("2", i18n.get("March")));
  scheduleRepeatMonth.add(new KeyValueObject("3", i18n.get("April")));
  scheduleRepeatMonth.add(new KeyValueObject("4", i18n.get("May")));
  scheduleRepeatMonth.add(new KeyValueObject("5", i18n.get("June")));
  scheduleRepeatMonth.add(new KeyValueObject("6", i18n.get("July")));
  scheduleRepeatMonth.add(new KeyValueObject("7", i18n.get("August")));
  scheduleRepeatMonth.add(new KeyValueObject("8", i18n.get("September")));
  scheduleRepeatMonth.add(new KeyValueObject("9", i18n.get("October")));
  scheduleRepeatMonth.add(new KeyValueObject("10", i18n.get("November")));
  scheduleRepeatMonth.add(new KeyValueObject("11", i18n.get("December")));

  String projectType = cmp.getValue().get("isMultiLanguage", "false");
  Boolean multipleLanguageSupported = "true".equals(projectType);
  String strDestinationLanguage = "";
  String[] destinationLanguages = null;
  if (multipleLanguageSupported) {
    destinationLanguages = getStringListAttribute(cmp, "destinationLanguage");
    // Had to add this check as the first time project would be updated, the list of languages would be stored in the processProperty key
    if (destinationLanguages == null || destinationLanguages.length == 0) {
        destinationLanguages = getStringListAttribute(cmp, "processProperty");
    }
  } else {
    strDestinationLanguage = cmp.getValue().get("destinationLanguage", "");
  }
  String strSourceLanguage = cmp.getValue().get("sourceLanguage", "");
  String strContentCategory = cmp.getValue().get("contentCategory", "");
  String strTranslationProvider = cmp.getValue().get("translationProvider", "");
  String strCurrentTranslationMethod = cmp.getValue().get("translationMethod", "");
  String strCloudConfigName = cmp.getValue().get("translationCloudConfigName", "");
  String strCloudConfigPath = cmp.getValue().get("translationCloudConfigPath", "");
  String strCaConfigPath = cmp.getValue().get("cq:conf", "");
  String strTranslationScheduleRepeatType = cmp.getValue().get("translationSchedulerRepeatType", "0");
  String strTranslationScheduleRepeatDay = cmp.getValue().get("translationSchedulerRepeatDay", "1");
  String strTranslationScheduleRepeatStartTime = cmp.getValue().get("translationSchedulerRepeatStartTime", "0");
  String strTranslationScheduleRepeatWeek = cmp.getValue().get("translationSchedulerRepeatWeek", "1");
  String strTranslationScheduleRepeatWeekDay = cmp.getValue().get("translationSchedulerRepeatWeekDay", "2");
  String strTranslationScheduleRepeatMonth = cmp.getValue().get("translationSchedulerRepeatMonth", "1");
  String strTranslationAutomaticPromoteLaunchEnable = cmp.getValue().get("translationAutomaticPromoteLaunchEnable", "0");
  String strTranslationAutomaticDeleteLaunchEnable = cmp.getValue().get("translationAutomaticDeleteLaunchEnable", "0");
  // Default value For Approving Translation for projects < 6.4, auto approve if Automatic promote is enabled
  boolean isTranslationAutomaticApproveEnable = cmp.getValue().get("translationAutomaticApproveEnable", strTranslationAutomaticPromoteLaunchEnable.equals("true"));

  String strTranslationAutomaticPromoteLaunchEnableCheckState = strTranslationAutomaticPromoteLaunchEnable.equals("true") ? "checked" : "";
  String strTranslationAutomaticDeleteLaunchEnableCheckState = strTranslationAutomaticDeleteLaunchEnable.equals("true") ? "checked" : "";
  
  String strTranslationScheduleRepeatDisplay = "None";
  HashMap map = new HashMap();
  map.put("emptyText", "Select Configuration Path");
  map.put("fieldLabel", "Cloud Configuration");
  ValueMapResource cloudConfigResource = new ValueMapResource(resourceResolver, "cloudConfig", "", new ValueMapDecorator(map));

  if(bCreateProjectMode){
    if(StringUtils.isEmpty(strSourceLanguage)){
      String strDefaultLang = "en";
      if(slingRequest !=null && slingRequest.getLocale()!= null){
        strDefaultLang = slingRequest.getLocale().getLanguage();
      }
      strSourceLanguage = strDefaultLang;
    }
    if(StringUtils.isEmpty(strTranslationProvider)){
      strTranslationProvider = "microsoft";
    }
    if(StringUtils.isEmpty(strCurrentTranslationMethod)){
      strCurrentTranslationMethod = "MACHINE_TRANSLATION";
    }
    if(StringUtils.isEmpty(strContentCategory)){
      strContentCategory = "general";
    }
    if(StringUtils.isEmpty(strTranslationScheduleRepeatType)){
      strTranslationScheduleRepeatType = "0";
    }
    isTranslationAutomaticApproveEnable = true;
    strTranslationAutomaticPromoteLaunchEnable = "true";
    strTranslationAutomaticDeleteLaunchEnable = "true";
  }
  String strDestinationLanguageLabel = getDestinationLanguageSupported(languages, strDestinationLanguage);
  String strContentCategoryLabel = categories.get(strContentCategory);
  String strSourceLanguageLabel = getDestinationLanguageSupported(languages, strSourceLanguage);

  if(strCloudConfigName==null){
    strCloudConfigName = "";
  }
  if(strCloudConfigPath==null){
    strCloudConfigPath = "";
  }

  String strCurrentTranslationMethodLabel = "";
  if(TranslationMethod.MACHINE_TRANSLATION.toString().equals(strCurrentTranslationMethod)){
    strCurrentTranslationMethodLabel = i18n.get("Machine Translation");
  } else if(TranslationMethod.HUMAN_TRANSLATION.toString().equals(strCurrentTranslationMethod)){
    strCurrentTranslationMethodLabel = i18n.get("Human Translation");
  }

  String strMachineMethodSelected="",strHumanMethodSelected="";
  if(TranslationMethod.MACHINE_TRANSLATION.toString().equals(strCurrentTranslationMethod)){
    strMachineMethodSelected = "selected=\"selected\"";
  }
  else{
    strHumanMethodSelected = "selected=\"selected\"";
  }
  String strDisplayStyle="";
  if(bCreateProjectMode){
    strDisplayStyle = "display: none";
  }

  Session userSession = resourceResolver.adaptTo(Session.class);
  String userId = userSession.getUserID();  
%>
<ui:includeClientLib categories="cq.projects.admin.translation.form.properties" />
<script type="text/javascript">
  var serviceToCloudConfigMap = new Array();
  <%{
    for (String serviceName : serviceToCloudConfigMap.keySet()){
  %>
    serviceToCloudConfigMap[serviceToCloudConfigMap.length] = {
      serviceName: "<%=serviceName%>",
      rootPath: "<%=serviceToCloudConfigMap.get(serviceName)%>"
    };
    <%} }%>
</script>

<div style="" class="cq-project-translation-form-properties">
  <div class="foundation-field-editable ">

    <%if (!bCreateProjectMode) { %>
      <span class="foundation-field-readonly coral-Form-fieldwrapper">
      <label class="coral-Form-fieldlabel"><%=i18n.get("Source Language")%></label>
      <% if(strSourceLanguageLabel!=null && !strSourceLanguageLabel.isEmpty()) {%>
        <span class="coral-Form-field foundation-layout-util-breakword"><%=strSourceLanguageLabel%></span>
      <%}%>
      </span>
    <%}%>
    <% if (bCreateProjectMode) {
        // all new Projects to support multiple languages, identifier to differentiate projects created in old environments
        // Sending a post process parama%>
        <input type="hidden" name="isMultiLanguage" value="true"/>
        <input type="hidden" name="processGadget" value="translationjob"/>
        <input type="hidden" name="gadgetProperty" value="destinationLanguage"/>
        <input class="project-jobs-count-input" type="hidden" name="DRAFT"/>
        <input type="hidden" name="initiatorUserId" value="<%=userId%>" />
    <% } else { %>
        <input type="hidden" name="processProperty@Delete" value="true"/>
    <% } %>
    <div class="coral-Form-fieldwrapper foundation-field-edit ">

      <label class="coral-Form-fieldlabel"><%=i18n.get("Source Language")%></label>
      <span class="coral-Form-field coral-InputGroup translation-source-language-select" data-init="select" >

        <coral-select class="cq-project-translation-coral-select coral-Form-field cq-project-translation-form-field" name="sourceLanguage">
        <% {
            for (KeyValueObject langObj : languageArray){
              String strSelected = "";
              if(languagesAreEquivalent(langObj.strKey, strSourceLanguage)){
                strSelected="selected=\"selected\"";
              }
              %>
              <coral-select-item <%= strSelected%> value="<%=xssAPI.encodeForHTMLAttr(langObj.strKey)%>"><%=xssAPI.encodeForHTML(langObj.strValue)%></coral-select-item>
          <% }} %>
        </coral-select>
      </span>
    </div>
  </div>

    <%if (!bCreateProjectMode) { %>
      <span class="foundation-field-readonly coral-Form-fieldwrapper">
      <label class="coral-Form-fieldlabel"><%=i18n.get("Target Language")%></label>
      <% if(strDestinationLanguageLabel!=null && !strDestinationLanguageLabel.isEmpty()) {%>
        <span class="coral-Form-field foundation-layout-util-breakword"><%=strDestinationLanguageLabel%></span>
      <%}%>
      </span>
    <%}%>
    <div class="coral-Form-fieldwrapper foundation-field-edit ">
      <label class="coral-Form-fieldlabel"><%=i18n.get("Target Language")%></label>
      <input type="hidden" name="./destinationLanguage@Delete"/>
      <span class="coral-Form-field coral-InputGroup translation-target-language-select" data-init="select" >
        <coral-select class="cq-project-translation-coral-select coral-Form-field cq-project-translation-target-language-form-field" name= <%= bCreateProjectMode ? "processProperty" : "destinationLanguage"%>
            <%= (bCreateProjectMode || multipleLanguageSupported) ? " multiple": ""%>>
            <% if (bCreateProjectMode || multipleLanguageSupported) {
                if (destinationLanguages != null) {
                    for (KeyValueObject langObj : languageArray) {
                        String strSelected = null;
                        for (String lang: destinationLanguages) {
                            if (languagesAreEquivalent(langObj.strKey, lang)) {
                                strSelected="selected=\"selected\"";
                                break;
                            }
                        }
                        %>
                            <coral-select-item <%= strSelected%> value="<%=xssAPI.encodeForHTMLAttr(langObj.strKey)%>"><%=xssAPI.encodeForHTML(langObj.strValue)%></coral-select-item>
                        <%
                    }
                } else {
                    for (KeyValueObject langObj : languageArray) {
                        %>
                        <coral-select-item value="<%=xssAPI.encodeForHTMLAttr(langObj.strKey)%>"><%=xssAPI.encodeForHTML(langObj.strValue)%></coral-select-item>
                        <%
                    }
                }
            } else {
                if (strDestinationLanguage==null || strDestinationLanguage.length()==0){ %>
                    <coral-select-item selected="selected" value=""></coral-select-item>
                <% }
                for (KeyValueObject langObj : languageArray) {
                    String strSelected = "";
                    if (languagesAreEquivalent(langObj.strKey, strDestinationLanguage)){
                        strSelected="selected=\"selected\"";
                    } %>
                    <coral-select-item <%= strSelected%> value="<%=xssAPI.encodeForHTMLAttr(langObj.strKey)%>"><%=xssAPI.encodeForHTML(langObj.strValue)%></coral-select-item>
               <% }
            } %>
        </coral-select>
      </span>
    </div>

  <div class="coral-Form-fieldwrapper">
	<sling:include resource="<%= cloudConfigResource %>" resourceType="cq/cloudconfig/components/admin/configpathbrowser"/>
  </div>

  <div class="foundation-field-editable ">
    <%if (!bCreateProjectMode) { %>
      <div class="foundation-field-readonly coral-Form-fieldwrapper">
        <label class="coral-Form-fieldlabel"><%=i18n.get("Translation Method")%></label>
        <coral-list>
          <coral-list-item><%=strCurrentTranslationMethodLabel%></coral-list-item>
        </coral-list>
      </div>
    <%}%>
    <div class="coral-Form-fieldwrapper foundation-field-edit ">
      <span class="coral-Form-field coral-InputGroup human-machine-translation-span" data-init="select">
           <label class="coral-Form-fieldlabel"><%=i18n.get("Translation Method")%></label>
          <coral-select class="cq-project-translation-coral-select coral-Form-field cq-project-translation-form-field" name="translationMethod">
            <coral-select-item <%=strMachineMethodSelected %> value="MACHINE_TRANSLATION"><%= i18n.get("Machine Translation") %></coral-select-item>
            <coral-select-item <%=strHumanMethodSelected %> value="HUMAN_TRANSLATION"><%= i18n.get("Human Translation") %></coral-select-item>
          </coral-select>
        </span>
    </div>
  </div>

  <div class="foundation-field-editable">
    <%if (!bCreateProjectMode) { %>
      <span class="foundation-field-readonly coral-Form-fieldwrapper">
      <label class="coral-Form-fieldlabel"><%=i18n.get("Translation Provider")%></label>
      <span class="coral-Form-field foundation-layout-util-breakword"><%=xssAPI.encodeForHTMLAttr(strTranslationProvider)%></span>
      </span>
    <%}%>
    <div class="coral-Form-fieldwrapper foundation-field-edit ">
      <label class="coral-Form-fieldlabel"><%=i18n.get("Translation Provider")%></label>

      <span class="coral-Form-field coral-InputGroup human-translation-provider-span" data-init="select">
        <coral-select class="cq-project-translation-coral-select coral-Form-field human-translation-provider-select">
        <coral-select-item value=""></coral-select-item>
        <% {Set<String> keySet = humanTranslationFactories.keySet();
            for (String key : keySet){
              String strLabel = humanTranslationFactories.get(key);
              if(strLabel.isEmpty()){
                strLabel = key;
              }
              String strSelected = "";
              if(key.equals(strTranslationProvider)){
                strSelected="selected=\"selected\"";
              }
              %>
          <coral-select-item <%= strSelected%> value="<%= xssAPI.encodeForHTMLAttr(key)%>"><%= xssAPI.encodeForHTMLAttr(strLabel)%></coral-select-item>
          <% }} %>
        </coral-select>
      </span>

      <span class="coral-Form-field coral-InputGroup machine-translation-provider-span" data-init="select">
        <coral-select class="cq-project-translation-coral-select coral-Form-field machine-translation-provider-select">
        <% {Set<String> keySet = machineTranslationFactories.keySet();
            for (String key : keySet){
              String strLabel = machineTranslationFactories.get(key);
              if(strLabel.isEmpty()){
                strLabel = key;
              }
              String strSelected = "";
              if(key.equals(strTranslationProvider)){
                strSelected="selected=\"selected\"";
              }
              %>
          <coral-select-item <%= strSelected%> value="<%= xssAPI.encodeForHTMLAttr(key)%>"><%= xssAPI.encodeForHTMLAttr(strLabel)%></coral-select-item>
          <% }} %>
        </coral-select>
      </span>
    </div>
  </div>


  <div class="content-category-span">
    <%if (!bCreateProjectMode) { %>
      <span class="foundation-field-readonly coral-Form-fieldwrapper">
      <label class="coral-Form-fieldlabel"><%=i18n.get("Content Category")%></label>
      <% if(strContentCategoryLabel!=null && !strContentCategoryLabel.isEmpty()) {%>
        <span class="coral-Form-field foundation-layout-util-breakword"><%=xssAPI.encodeForHTML(strContentCategoryLabel)%></span>
      <%}%>
      </span>
    <%}%>
    <div class="coral-Form-fieldwrapper foundation-field-edit ">
      <label class="coral-Form-fieldlabel"><%=i18n.get("Content Category")%></label>
      <span class="coral-Form-field coral-InputGroup" data-init="select" >
        <coral-select class="cq-project-translation-coral-select coral-Form-field cq-project-translation-form-field" name="contentCategory">
        <% {
            for (KeyValueObject categoryObj : categoryArray){
              String strSelected = "";
              if(categoryObj.strKey.equals(strContentCategory)){
                strSelected="selected=\"selected\"";
              }
              %>
              <coral-select-item <%= xssAPI.encodeForHTMLAttr(strSelected)%> value="<%= xssAPI.encodeForHTMLAttr(categoryObj.strKey)%>"><%= xssAPI.encodeForHTML(categoryObj.strValue)%></coral-select-item>
          <% }} %>
        </coral-select>
      </span>
    </div>
  </div>

  <div class="foundation-field-editable ">
    <%if (!bCreateProjectMode) { %>
      <div class="foundation-field-readonly coral-Form-fieldwrapper">
        <label class="coral-Form-fieldlabel"><%=i18n.get("Cloud Config")%></label>
        <coral-list>
          <coral-list-item><%=xssAPI.encodeForHTML(strCloudConfigName)%></coral-list-item>
        </coral-list>
      </div>
    <% } %>
    <div class="coral-Form-fieldwrapper foundation-field-edit ">
      <input style="display: none" type="text" name="translationCloudConfigPath" class="cq-translation-cloud-config-path cq-project-translation-form-field" value="<%=xssAPI.encodeForHTMLAttr(strCloudConfigPath)%>">
      <input style="display: none" type="text" name="translationCloudConfigName" class="cq-translation-cloud-config-name cq-project-translation-form-field" value="<%=xssAPI.encodeForHTMLAttr(strCloudConfigName)%>">
      <label class="coral-Form-fieldlabel"><%=i18n.get("Translation Provider Credential")%></label>
      <span class="coral-Form-field coral-InputGroup cloud-config-translation-span" data-init="select">
          <coral-select class="cq-project-translation-coral-select coral-Form-field cloud-config-translation-select">
          </coral-select>
        </span>
    </div>
  </div>
</div>
    <div>
        <coral-checkbox class="cq-translation-scheduler-repeat-sync-element cq-translation-scheduler-repeat-launch-enable-check" data-enableclass="cq-translation-scheduler-launch-enable-class" data-syncclass="cq-translation-scheduler-auto-launch-enable" <%= bCreateProjectMode ? "checked" : xssAPI.encodeForHTMLAttr(strTranslationAutomaticPromoteLaunchEnableCheckState)%> ><%=i18n.get("Automatically Promote Translation Launches")%></coral-checkbox>
    </div>
    <div>
        <coral-checkbox class="cq-translation-scheduler-repeat-top-box cq-translation-scheduler-repeat-sync-element cq-translation-scheduler-launch-enable-class" data-syncclass="cq-translation-scheduler-auto-launch-delete-enable" <%= bCreateProjectMode ? "checked" : xssAPI.encodeForHTMLAttr(strTranslationAutomaticDeleteLaunchEnableCheckState)%> ><%=i18n.get("Delete Launch After Promotion")%></coral-checkbox>
    </div>
    <div>
        <input type="hidden" name="translationAutomaticApproveEnable@Delete">
        <input type="hidden" name="translationAutomaticApproveEnable@DefaultValue" value="false">
        <input type="hidden" name="translationAutomaticApproveEnable@UseDefaultWhenMissing" value="true">
        <coral-checkbox class="cq-translation-automatic-approve-enable-check" name="translationAutomaticApproveEnable" value="true" <%= (bCreateProjectMode || isTranslationAutomaticApproveEnable) ? "checked" : "" %>><%=i18n.get("Automatically Approve Translations")%></coral-checkbox>
    </div>

  <div class="foundation-field-editable ">
    <%if (!bCreateProjectMode) { %>
      <div class="foundation-field-readonly coral-Form-fieldwrapper">
        <label class="coral-Form-fieldlabel"><%=i18n.get("Repeat Translation")%></label>
        <coral-list>
          <coral-list-item><%=xssAPI.encodeForHTML(strTranslationScheduleRepeatDisplay)%></coral-list-item>
        </coral-list>
      </div>
    <% } %>
    <div class="coral-Form-fieldwrapper foundation-field-edit ">
      <input style="display: none" type="text" name="translationSchedulerRepeatType" class="cq-translation-scheduler-repeat-type cq-project-translation-form-field" value="<%=xssAPI.encodeForHTMLAttr(strTranslationScheduleRepeatType)%>">
      <input style="display: none" type="text" name="translationSchedulerRepeatDay" class="cq-translation-scheduler-repeat-day" value="<%=xssAPI.encodeForHTMLAttr(strTranslationScheduleRepeatDay)%>">
      <input style="display: none" type="text" name="translationSchedulerRepeatWeek" class="cq-translation-scheduler-repeat-week" value="<%=xssAPI.encodeForHTMLAttr(strTranslationScheduleRepeatWeek)%>">
      <input style="display: none" type="text" name="translationSchedulerRepeatWeekDay" class="cq-translation-scheduler-repeat-weekday" value="<%=xssAPI.encodeForHTMLAttr(strTranslationScheduleRepeatWeekDay)%>">
      <input style="display: none" type="text" name="translationSchedulerRepeatStartTime" class="cq-translation-scheduler-repeat-starttime" value="<%=xssAPI.encodeForHTMLAttr(strTranslationScheduleRepeatStartTime)%>">
      <input style="display: none" type="text" name="translationSchedulerRepeatMonth" class="cq-translation-scheduler-repeat-month" value="<%=xssAPI.encodeForHTMLAttr(strTranslationScheduleRepeatMonth)%>">
      <input style="display: none" type="text" name="translationAutomaticPromoteLaunchEnable" class="cq-translation-scheduler-auto-launch-enable" value="<%=xssAPI.encodeForHTMLAttr(strTranslationAutomaticPromoteLaunchEnable)%>">
      <input style="display: none" type="text" name="translationAutomaticDeleteLaunchEnable" class="cq-translation-scheduler-auto-launch-delete-enable" value="<%=xssAPI.encodeForHTMLAttr(strTranslationAutomaticDeleteLaunchEnable)%>">

      <label class="coral-Form-fieldlabel"><%=i18n.get("Repeat Translation")%></label>
      <div class="cq-translation-scheduler-repeat-top-box cq-translation-scheduler-repeat-top-box-bg">
        <label class="coral-Form-fieldlabel "><%=i18n.get("Creates new translation job(s) inside the project")%></label>
        <span class="coral-Form-field coral-InputGroup cloud-config-translation-span cq-translation-scheduler-repeat-span" data-init="select">
            <coral-select class="cq-project-translation-coral-select coral-Form-field cq-translation-scheduler-repeat-select cq-translation-scheduler-repeat-sync-element" data-syncclass="cq-translation-scheduler-repeat-type">
            <% {
              for (KeyValueObject categoryObj : scheduleRepeatArray){
                String strSelected = "";
                if(categoryObj.strKey.equals(strTranslationScheduleRepeatType)){
                  strSelected="selected=\"selected\"";
                }
                %>
                <coral-select-item <%= xssAPI.encodeForHTMLAttr(strSelected)%> value="<%= xssAPI.encodeForHTMLAttr(categoryObj.strKey)%>"><%= xssAPI.encodeForHTML(categoryObj.strValue)%></coral-select-item>
            <% }} %>
            </coral-select>
          </span>
          <div class="cq-translation-scheduler-repeat-box cq-translation-scheduler-repeat-box-d">
            <label class="cq-translation-scheduler-repeat-box-label cq-translation-scheduler-repeat-box-label-start"><%=i18n.get("Every")%></label>
            <coral-numberinput required class="cq-translation-scheduler-repeat-numberinput cq-translation-scheduler-repeat-sync-element" min="1" max="31" step="1" value="<%=xssAPI.encodeForHTMLAttr(strTranslationScheduleRepeatDay)%>" data-syncclass="cq-translation-scheduler-repeat-day"></coral-numberinput>
            <label class="cq-translation-scheduler-repeat-box-label cq-translation-scheduler-repeat-box-label-end"><%=i18n.get("Day(s)")%></label>
          </div>
          <div class="cq-translation-scheduler-repeat-box cq-translation-scheduler-repeat-box-w">
            <div class="cq-translation-scheduler-repeat-inline cq-translation-scheduler-repeat-labelbox">
              <label class="cq-translation-scheduler-repeat-box-label cq-translation-scheduler-repeat-box-label-start"><%=i18n.get("Every")%></label>
              <coral-numberinput required class="cq-translation-scheduler-repeat-numberinput cq-translation-scheduler-repeat-sync-element" min="1" max="5" step="1" value="<%=xssAPI.encodeForHTMLAttr(strTranslationScheduleRepeatWeek)%>" data-syncclass="cq-translation-scheduler-repeat-week"></coral-numberinput>
              <label class="cq-translation-scheduler-repeat-box-label cq-translation-scheduler-repeat-box-label-end"><%=i18n.get("Week(s)")%></label>              
            </div>
          </div>
          <div class="cq-translation-scheduler-repeat-box cq-translation-scheduler-repeat-box-w">
            <div class="cq-translation-scheduler-repeat-inline cq-translation-scheduler-repeat-labelbox">
              <label class="cq-translation-scheduler-repeat-box-label cq-translation-scheduler-repeat-box-label-start"><%=i18n.get("Day")%></label>
              <coral-select class="cq-translation-scheduler-repeat-sync-element" data-syncclass="cq-translation-scheduler-repeat-weekday">
               <% {
              for (KeyValueObject categoryObj : scheduleRepeatWeekDay){
                String strSelected = "";
                if(categoryObj.strKey.equals(strTranslationScheduleRepeatWeekDay)){
                  strSelected="selected=\"selected\"";
                }
                %>
                <coral-select-item <%= xssAPI.encodeForHTMLAttr(strSelected)%> value="<%= xssAPI.encodeForHTMLAttr(categoryObj.strKey)%>"><%= xssAPI.encodeForHTML(categoryObj.strValue)%></coral-select-item>
            <% }} %>
              </coral-select>
            </div>
          </div>
          <div class="cq-translation-scheduler-repeat-box cq-translation-scheduler-repeat-box-m">
            <div class="cq-translation-scheduler-repeat-inline cq-translation-scheduler-repeat-labelbox">
              <label class="cq-translation-scheduler-repeat-box-label cq-translation-scheduler-repeat-box-label-start"><%=i18n.get("Every")%></label>
              <coral-numberinput required class="cq-translation-scheduler-repeat-numberinput cq-translation-scheduler-repeat-sync-element" min="1" max="12" step="1" value="<%=xssAPI.encodeForHTMLAttr(strTranslationScheduleRepeatMonth)%>" data-syncclass="cq-translation-scheduler-repeat-month"></coral-numberinput>
              <label class="cq-translation-scheduler-repeat-box-label cq-translation-scheduler-repeat-box-label-end"><%=i18n.get("Month(s)")%></label>
            </div>
          </div>
          <div class="cq-translation-scheduler-repeat-box cq-translation-scheduler-repeat-box-m">
            <div class="cq-translation-scheduler-repeat-inline cq-translation-scheduler-repeat-labelbox">
              <label class="cq-translation-scheduler-repeat-box-label cq-translation-scheduler-repeat-box-label-start"><%=i18n.get("Day")%></label>
              <coral-numberinput required class="cq-translation-scheduler-repeat-numberinput cq-translation-scheduler-repeat-sync-element" min="1" max="30" step="1" value="<%=xssAPI.encodeForHTMLAttr(strTranslationScheduleRepeatDay)%>" data-syncclass="cq-translation-scheduler-repeat-day"></coral-numberinput>
            </div>
          </div>
          <div class="cq-translation-scheduler-repeat-box cq-translation-scheduler-repeat-box-y">
            <div class="cq-translation-scheduler-repeat-inline cq-translation-scheduler-repeat-labelbox">
              <label class="cq-translation-scheduler-repeat-box-label cq-translation-scheduler-repeat-box-label-start"><%=i18n.get("Every")%></label>
              <coral-select class="cq-translation-scheduler-repeat-sync-element cq-translation-scheduler-repeat-month-select-element" data-syncclass="cq-translation-scheduler-repeat-month">
               <% {
              for (KeyValueObject categoryObj : scheduleRepeatMonth){
                String strSelected = "";
                if(categoryObj.strKey.equals(strTranslationScheduleRepeatMonth)){
                  strSelected="selected=\"selected\"";
                }
                %>
                <coral-select-item <%= xssAPI.encodeForHTMLAttr(strSelected)%> value="<%= xssAPI.encodeForHTMLAttr(categoryObj.strKey)%>"><%= xssAPI.encodeForHTML(categoryObj.strValue)%></coral-select-item>
            <% }} %>

              </coral-select>
            </div>
          </div>
          <div class="cq-translation-scheduler-repeat-box cq-translation-scheduler-repeat-box-y">
            <div class="cq-translation-scheduler-repeat-inline cq-translation-scheduler-repeat-labelbox">
              <label class="cq-translation-scheduler-repeat-box-label cq-translation-scheduler-repeat-box-label-start"><%=i18n.get("Date")%></label>
              <coral-numberinput required class="cq-translation-scheduler-repeat-day-numberinput cq-translation-scheduler-repeat-numberinput cq-translation-scheduler-repeat-sync-element" min="1" max="31" step="1" value="<%=xssAPI.encodeForHTMLAttr(strTranslationScheduleRepeatDay)%>" data-syncclass="cq-translation-scheduler-repeat-day"></coral-numberinput>
            </div>
          </div>
          <div class="cq-translation-scheduler-repeat-box cq-translation-scheduler-repeat-box-y cq-translation-scheduler-repeat-box-m cq-translation-scheduler-repeat-box-w cq-translation-scheduler-repeat-box-d">
            <label class="cq-translation-scheduler-repeat-box-label cq-translation-scheduler-repeat-box-label-start"><%=i18n.get("Start Time")%></label>
            <coral-datepicker required class="cq-translation-scheduler-repeat-datepicker cq-translation-scheduler-repeat-sync-element" type="time" value="<%=xssAPI.encodeForHTMLAttr(strTranslationScheduleRepeatStartTime)%>" data-syncclass="cq-translation-scheduler-repeat-starttime" valueformat="HH" displayformat="HH"></coral-datepicker>
            <label class="cq-translation-scheduler-repeat-box-label cq-translation-scheduler-repeat-box-label-end"><%=i18n.get("Hour")%></label>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<%!

boolean languagesAreEquivalent(String fromLan, String toLan) {
    if (fromLan == null || toLan == null) {
        return false;
    }
    fromLan = fromLan.replace("-", "_");
    toLan = toLan.replace("-", "_");
    return StringUtils.equalsIgnoreCase(fromLan, toLan);
}

String getDestinationLanguageSupported(HashMap<String, String> availableLanguageMap, String strDestinationLanguage)
    throws TranslationException {
    String strRetVal = null;
    if (availableLanguageMap.containsKey(strDestinationLanguage)) {
        strRetVal = strDestinationLanguage;
    } else {
        for (String code : availableLanguageMap.keySet()) {
            if (languagesAreEquivalent(strDestinationLanguage, code)) {
                strRetVal = strDestinationLanguage;
                break;
            }
            if (languagesAreEquivalent(strDestinationLanguage, availableLanguageMap.get(code))) {
                strRetVal = strDestinationLanguage;
                break;
            }
        }
    }
    return strRetVal;
}

public class KeyValueObject implements Comparable{
  String strKey;
  String strValue;

  public KeyValueObject(String key, String value){
    strKey = key;
    strValue = value;
  }
  @Override
  public int compareTo(Object compareLang) {
      return this.strValue.compareTo(((KeyValueObject)compareLang).strValue);
  }
};
void getSortedList(ArrayList<KeyValueObject> sortedArray, HashMap<String, String> inputHashMap, boolean bAddKey, I18n i18n, Locale sortingLocale)
  {
    Set<String> keySet = inputHashMap.keySet();
    for (String key : keySet){
      String strLabel = inputHashMap.get(key);
      if (StringUtils.isEmpty(strLabel)){
        strLabel = key;
      }
      else if(bAddKey){
          strLabel = i18n.getVar(strLabel) + " ("+key+")";
      } else {
          strLabel = i18n.getVar(strLabel);
      }
      sortedArray.add(new KeyValueObject(key, strLabel));
    }
    final Collator collate = Collator.getInstance(sortingLocale);
    Comparator<KeyValueObject> objectComparator = new Comparator<KeyValueObject>() {
       public int compare(KeyValueObject newObj1, KeyValueObject newObj2) {
           return collate.compare(newObj1.strKey, newObj2.strKey);
       }
    };
    Collections.sort(sortedArray, objectComparator);
  }
  void addToServiceMap(TranslationManager tm, HashMap<String, String> serviceToCloudConfigMap,
    HashMap<String, String> translationFactories, TranslationMethod method) throws TranslationException{
      for (String serviceName : translationFactories.keySet()){
        TranslationService translationService = tm.createTranslationService(serviceName, method, null, null);
        if(translationService != null){
          serviceToCloudConfigMap.put(serviceName, translationService.getTranslationServiceInfo().getServiceCloudConfigRootPath());
        }
      }
  }
  class ValueComparator implements Comparator<String> {
      Map<String, String> map;

      public ValueComparator(Map<String, String> base) {
          this.map = base;
      }

      public int compare(String a, String b) {
          return map.get(a).compareTo(map.get(b));
      }
  }

  public Map<String, String> SortByValue(HashMap<String, String> map) {
      ValueComparator vc = new ValueComparator(map);
      TreeMap<String, String> sortedMap = new TreeMap<String, String>(vc);
      sortedMap.putAll(map);
      return sortedMap;
  }

  public String[] getStringListAttribute(ComponentHelper cmp, String strAttributeName) {
     String[] retVal = new String[1];
     try {
        retVal = cmp.getValue().get(strAttributeName, String[].class);
     } catch (Exception e) {
        // Check for single valued property
        retVal[0] = cmp.getValue().get(strAttributeName, String.class);
     }
     return retVal;
  }

%>