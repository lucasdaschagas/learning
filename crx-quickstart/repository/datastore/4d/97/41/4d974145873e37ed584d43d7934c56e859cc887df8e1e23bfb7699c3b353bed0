/*
 * Copyright 1997-2011 Day Management AG
 * Barfuesserplatz 6, 4001 Basel, Switzerland
 * All Rights Reserved.
 *
 * This software is the confidential and proprietary information of
 * Day Management AG, ("Confidential Information"). You shall not
 * disclose such Confidential Information and shall use it only in
 * accordance with the terms of the license agreement you entered into
 * with Day.
 */

/**
 * @class CQ.form.ImageMap.PolyArea
 * @extends CQ.form.ImageMap.Area
 * @private
 * This class represents a polygonal area of the image map.
 * @constructor
 * Creates a new ImageMap.PolyArea.
 * @param {Object} config The config object
 * @param {Number} x1 horizontal coordinate of first polygon point
 * @param {Number} y1 vertical coordinate of first polygon point
 */
CQ.form.ImageMap.PolyArea = CQ.Ext.extend(CQ.form.ImageMap.Area, {

    constructor: function(config, x1, y1) {
        CQ.form.ImageMap.RectArea.superclass.constructor.call(this,
                CQ.form.ImageMap.AREATYPE_POLYGON, config);
        this.areaType = CQ.form.ImageMap.AREATYPE_POLYGON;
        this.destination = new CQ.form.ImageMap.AreaDestination();
        this.points = new Array();
        this.points.push({
            "x": x1,
            "y": y1
        });
    },

    /**
     * Adds a new point to the polygon.
     * @param {Number} x The horizontal coordinate of point to add
     * @param {Number} y The vertical coordinate of point to add
     * @return {Object} The object representing the newly created point; properties: x, y
     */
    addPoint: function(x, y) {
        var thePoint = {
            "x": x,
            "y": y
        };
        this.points.push(thePoint);
        return thePoint;
    },

    /**
     * <p>Inserts a new point on an existing line of the polygon.</p>
     * <p>The method determines the correct insertion point, using the specified tolerance
     * distance. If the specified point is not near an existing line, the method will
     * return null.</p>
     * @param {Number} x The horizontal coordinate of the point to insert
     * @param {Number} y The vertical coordinate of the point to insert
     * @param {Number} tolerance The tolerance distance
     * @return {Object} The object representing the newly created point; null if wrong
     *         coordinates were specified
     */
    insertPoint: function(x, y, tolerance) {
        var pointToAdd = {
            "x": x,
            "y": y
        };
        var pointCnt = this.points.length;
        var insertIndex = this.calculatePointInsertIndex(x, y, tolerance);
        if (insertIndex < 0) {
            return null;
        }
        if (insertIndex < pointCnt) {
            for (var copyIndex = pointCnt; copyIndex > insertIndex; copyIndex--) {
                this.points[copyIndex] = this.points[copyIndex - 1];
            }
        }
        this.points[insertIndex] = pointToAdd;
        return pointToAdd;
    },

    /**
     * <p>Removes the specified point from the polygon.</p>
     * <p>The point to remove is determined by object identity first, then by comparing
     * coordinates.</p>
     * <p>A redraw must be issued explicitly to actually remove the point from screen.
     * </p>
     * @param {Object} pointToRemove The point to be removed (properties: x, y)
     */
    removePoint: function(pointToRemove) {
        var pointCnt = this.points.length;
        var isRemoved = false;
        var checkIndex, pointToCheck;
        for (checkIndex = 0; checkIndex < pointCnt; checkIndex++) {
            pointToCheck = this.points[checkIndex];
            if (pointToCheck == pointToRemove) {
                this.points[checkIndex] = null;
                if (this.handleId == pointToCheck) {
                    this.handleId = null;
                }
                if (this.selectedHandle == pointToCheck) {
                    this.selectedHandle = null;
                }
                isRemoved = true;
                break;
            }
        }
        if (!isRemoved) {
            for (checkIndex = 0; checkIndex < pointCnt; checkIndex++) {
                pointToCheck = this.points[checkIndex];
                if ((pointToCheck.x == pointToRemove.x)
                        && (pointToCheck.y == pointToRemove.y)) {
                    this.points[checkIndex] = null;
                    if (this.handleId == pointToCheck) {
                        this.handleId = null;
                    }
                    if (this.selectedHandle == pointToCheck) {
                        this.selectedHandle = null;
                    }
                    break;
                }
            }
        }
        CQ.form.ImageMap.Helpers.compactArray(this.points);
    },

    /**
     * Checks if the specified coordinates are "on" a line between two specified points.
     * @param {Object} coordsToCheck Coordinates to check; properties: x, y
     * @param {Object} lineStart Line's start position; properties: x, y
     * @param {Object} lineEnd Line's end position; properties: x, y
     * @param {Number} tolerance The tolerance distance
     * @return {Boolean} True if the specified coordinate is on (or nearby) the specified
     *         line
     */
    isOnLine: function(coordsToCheck, lineStart, lineEnd, tolerance) {
        var distance = CQ.form.ImageMap.Helpers.calculateDistance(
                lineStart, lineEnd, coordsToCheck);
        return (distance <= tolerance);
    },

    /**
     * Calculates a "bounding rectangle" for the polygonal area.
     * @return {Object} Object with properties top, left, bottom and right; null if no
     *         points are defined (should not happen, as the polygon area would be invalid
     *         then and hence automatically removed)
     */
    calcBoundingRect: function() {
        if (this.points.length == 0) {
            return null;
        }
        var minX = this.points[0].x;
        var minY = this.points[0].y;
        var maxX = minX;
        var maxY = minY;
        var pointCnt = this.points.length;
        for (var pointIndex = 0; pointIndex < pointCnt; pointIndex++) {
            var pointToCheck = this.points[pointIndex];
            if (pointToCheck.x < minX) {
                minX = pointToCheck.x;
            } else if (pointToCheck.x > maxX) {
                maxX = pointToCheck.x;
            }
            if (pointToCheck.y < minY) {
                minY = pointToCheck.y;
            } else if (pointToCheck.y > maxY) {
                maxY = pointToCheck.y;
            }
        }
        var boundingRect = new Object();
        boundingRect.top = minY;
        boundingRect.left = minX;
        boundingRect.bottom = maxY;
        boundingRect.right = maxX;
        return boundingRect;
    },

    /**
     * <p>Calculates the insert index for the specified coordinates.</p>
     * <p>This is used to determine where a new polygon point must be inserted in the list
     * of existing polygon points.</p>
     * @param {Number} x horizontal coordinate
     * @param {Number} y vertical coordinate
     * @return {Number} The array index where the point has to be inserted; -1 if the
     *         coordinates are invalid
     */
    calculatePointInsertIndex: function(x, y, tolerance) {
        var pointCnt = this.points.length;
        if (pointCnt == 1) {
            return 1;
        }
        var coordsToCheck = new Object();
        coordsToCheck.x = x;
        coordsToCheck.y = y;
        for (var pointIndex = 1; pointIndex < pointCnt; pointIndex++) {
            var p1 = this.points[pointIndex - 1];
            var p2 = this.points[pointIndex];
            if (this.isOnLine(coordsToCheck, p1, p2, tolerance)) {
                return pointIndex;
            }
        }
        var isOnLine = this.isOnLine(coordsToCheck,
                this.points[0], this.points[pointCnt - 1], tolerance);
        if (isOnLine) {
            return pointCnt;
        }
        return -1;
    },

    /**
     * Cleans up the polygon by removing succeeding points using the same coordinates.
     */
    cleanUp: function() {
        var pointCnt = this.points.length;
        for (var pointIndex = 0; pointIndex < (pointCnt - 1); pointIndex++) {
            var p1 = this.points[pointIndex];
            var p2 = this.points[pointIndex + 1];
            if ((p1.x == p2.x) && (p1.y == p2.y)) {
                this.points[pointIndex] = null;
                CQ.Log.info("CQ.form.ImageMap.PolyArea#cleanUp: Polygon point with identical coordinates removed: " + p1.x + "/" + p1.y);
            }
        }
        CQ.form.ImageMap.Helpers.compactArray(this.points);
    },

    /**
     * <p>Checks if the specified coordinates "belong" to the image area.</p>
     * <p>Currently, the borders of the polygonal area are checked for this.</p>
     * @param {Object} coords Coordinates to check; properties: x, y
     * @param {Number} tolerance The tolerance distance to be considered
     * @return {Boolean} True if the specified coordinates "belong" to the image area
     */
    isTouched: function(coords, tolerance) {
        var handleId = this.calculateHandleId(coords);
        if (handleId != null) {
            return true;
        }
        var pointCnt = this.points.length;
        coords = coords.unzoomedUnclipped;
        // handle "one point polygons"
        if (pointCnt == 1) {
            var xDelta = Math.abs(this.points[0].x - coords.x);
            var yDelta = Math.abs(this.points[0].y - coords.y);
            return (xDelta < tolerance) && (yDelta < tolerance);
        } else {
            var isOnLine;
            for (var pointIndex = 1; pointIndex < pointCnt; pointIndex++) {
                var p1 = this.points[pointIndex - 1];
                var p2 = this.points[pointIndex];
                isOnLine = this.isOnLine(coords, p1, p2, tolerance);
                if (isOnLine) {
                    return true;
                }
            }
            return this.isOnLine(
                    coords, this.points[0], this.points[pointCnt - 1], tolerance);
        }
    },

    /**
     * Calulates a suitable dragging reference
     */
    calculateDraggingReference: function() {
        if (this.pointToMove == null) {
            var boundingRect = this.calcBoundingRect();
            this.draggingReference = {
                "x": boundingRect.left,
                "y": boundingRect.top,
                "width": boundingRect.right - boundingRect.left + 1,
                "height": boundingRect.bottom - boundingRect.top + 1
            };
        } else  {
            this.draggingReference = {
                "x": this.pointToMove.x,
                "y": this.pointToMove.y
            };
        }
    },

    /**
     * Moves the whole polygonal area by the specified offset.
     * @param {Number} xOffs The horizontal move offset
     * @param {Number} yOffs The vertical move offset
     * @param {Object} coords Coordinates (properties: x, y)
     */
    moveShapeBy: function(xOffs, yOffs, coords) {
        var imgSize = coords.unzoomed.rotatedImageSize;
        var destCoords =
                this.calculateDestCoords(xOffs, yOffs, this.draggingReference, imgSize);
        var destX = destCoords.x;
        var destY = destCoords.y;
        if (this.pointToMove == null) {
            var endX = destX + this.draggingReference.width;
            if (endX >= imgSize.width) {
                destX = imgSize.width - this.draggingReference.width;
            }
            var endY = destY + this.draggingReference.height;
            if (endY >= imgSize.height) {
                destY = imgSize.height - this.draggingReference.height;
            }
            var currentBounds = this.calcBoundingRect();
            var pointOffsX = destX - currentBounds.left;
            var pointOffsY = destY - currentBounds.top;
            var pointCnt = this.points.length;
            for (var pointIndex = 0; pointIndex < pointCnt; pointIndex++) {
                var pointToMove = this.points[pointIndex];
                pointToMove.x += pointOffsX;
                pointToMove.y += pointOffsY;
            }
        } else {
            this.pointToMove.x = destX;
            this.pointToMove.y = destY;
        }
        return true;
    },

    /**
     * Calculates a "handle id" for the specified coordinates.
     * @param {Number} x The horizontal position to check
     * @param {Number} y The vertical position to check
     * @return {String} A suitable handle ID for correct highlightning
     */
    calculateHandleId: function(x, y) {
        var pointCnt = this.points.length;
        for (var pointIndex = 0; pointIndex < pointCnt; pointIndex++) {
            var pointToCheck = this.points[pointIndex];
            if (this.isPartOfHandle(pointToCheck.x, pointToCheck.y, x, y)) {
                return pointToCheck;
            }
        }
        return null;
    },

    /**
     * Handles unSelect events for polygonal areas.
     */
    onUnSelect: function() {
        this.selectedHandle = null;
        CQ.form.ImageMap.PolyArea.superclass.onUnSelect.call(this);
        return true;
    },

    /**
     * Checks if the area is correct (at least one point is defined).
     * @return {Boolean} True if the area is correct
     */
    isValid: function() {
        return (this.points.length > 0);
    },

    /**
     * <p>Rotates the area by the specified angle.</p>
     * <p>Currently, only multiples of 90 (degrees) are supported.</p>
     * @param {Number} angle The angle (degrees; clockwise) the area has to be rotated by
     * @param {Number} absAngle The absolute angle (degrees) the area has to be rotated to
     * @param {Object} imageSize The size of the image (original, unrotated); properties:
     *                 width, height
     */
    rotateBy: function(angle, absAngle, imageSize) {
        // calculate basic angle
        var basicAngle = this.calcBasicAngle(angle, absAngle);
        var margin = ((basicAngle == 90) || (basicAngle == 270)
                ? imageSize.width : imageSize.height);
        // rotate in 90 degree steps
        var steps = Math.round(angle / 90);
        var tempX;
        for (var step = 0; step < steps; step++) {
            var pointCnt = this.points.length;
            for (var pointIndex = 0; pointIndex < pointCnt; pointIndex++) {
                var pointToRotate = this.points[pointIndex];
                tempX = pointToRotate.x;
                pointToRotate.x = margin - pointToRotate.y;
                pointToRotate.y = tempX;
            }
        }
    },

    /**
     * Sets the correct handle for dragging the initial polygon point after adding it.
     * @param {Object} coords Coordinates
     */
    onAddForDrag: function(coords) {
        this.handleId = this.points[0];
    },

    /**
     * Handles the start of a dragging operation for polygonal areas.
     */
    onDragStart: function() {
        this.selectedHandle = this.handleId;
        CQ.form.ImageMap.PolyArea.superclass.onDragStart.call(this);
        return true;
    },

    /**
     * Selects a polygon point by its index.
     * @param {Number} index The index of the polygon point to select; if an invalid index
     *        is specified, the current selection is removed
     */
    selectPointAt: function(index) {
        if ((index >= 0) && (index < this.points.length)) {
            this.selectedHandle = this.points[index];
        } else {
            this.selectedHandle = null;
        }
    },

    /**
     * Selects the specified polygon point.
     * @param {Object} point The polygon point to select; properties: x, y
     */
    selectPoint: function(point) {
        if (point == null) {
            this.selectedHandle = null;
        } else {
            var pointCnt = this.points.length;
            for (var pointIndex = 0; pointIndex < pointCnt; pointIndex++) {
                var pointToCheck = this.points[pointIndex];
                if ((pointToCheck.x == point.x) && (pointToCheck.y == point.y)) {
                    this.selectedHandle = pointToCheck;
                    return;
                }
            }
        }
    },

    /**
     * Draws the polygonal area.
     * @param {CanvasRenderingContext2D} ctx The canvas context to be used for drawing
     * @param {Number} zoom Real zoom factor (1.0 means that the original size should be
     *        used)
     * @param {Object} offsets Drawing offsets; properties: srcX, srcY, destX, destY,
     *        imageSize, zoomedSize (see {@link CQ.form.SmartImage.Shape#draw})
     */
    draw: function(ctx, zoom, offsets) {
        CQ.Log.debug("CQ.form.ImageMap.PolyArea#paint: Started.");
        // draw polygon
        var pointIndex, pointToProcess;
        var pointCnt = this.points.length;
        var origin = this.calculateDisplayCoords(zoom, offsets, this.points[0]);
        if (this.fillColor) {
            ctx.fillStyle = this.fillColor;
            ctx.beginPath();
            // fill
            ctx.moveTo(origin.x, origin.y);
            for (pointIndex = 0; pointIndex < pointCnt; pointIndex++) {
                pointToProcess =
                        this.calculateDisplayCoords(zoom, offsets, this.points[pointIndex]);
                ctx.lineTo(pointToProcess.x, pointToProcess.y);
            }
            ctx.closePath();
            ctx.fill();
        }
        // stroke
        ctx.lineWidth = 1.0;
        ctx.strokeStyle = this.getColor();
        ctx.beginPath();
        ctx.moveTo(origin.x, origin.y);
        for (pointIndex = 1; pointIndex < pointCnt; pointIndex++) {
            pointToProcess =
                    this.calculateDisplayCoords(zoom, offsets, this.points[pointIndex]);
            ctx.lineTo(pointToProcess.x, pointToProcess.y);
        }
        ctx.closePath();
        ctx.stroke();
        // handles
        var drawHandle =
            this.isRollOver || (this.selectedHandle != null) || this.isSelected;
        var isOriginSelected = (this.selectedHandle == this.points[0]);
        var isOriginRolledOver = (this.handleId == this.points[0]);
        if (drawHandle || isOriginSelected) {
            this.drawHandle(origin.x, origin.y, isOriginRolledOver, isOriginSelected, ctx);
        }
        for (pointIndex = 1; pointIndex < pointCnt; pointIndex++) {
            pointToProcess =
                    this.calculateDisplayCoords(zoom, offsets, this.points[pointIndex]);
            var isSelected = (this.selectedHandle == this.points[pointIndex]);
            var isRolledOver = (this.handleId == this.points[pointIndex]);
            if (drawHandle || isSelected) {
                this.drawHandle(
                        pointToProcess.x, pointToProcess.y, isRolledOver, isSelected, ctx);
            }
        }
        CQ.Log.debug("CQ.form.ImageMap.PolyArea#paint: Finished.");
    },

    /**
     * Creates a String representation of the area.
     * @return {String} The String representation of the area
     */
    serialize: function() {
        var dump = "poly(";
        var pointCnt = this.points.length;
        for (var pointIndex = 0; pointIndex < pointCnt; pointIndex++) {
            if (pointIndex > 0) {
                dump += ",";
            }
            var pointToDump = this.points[pointIndex];
            dump += pointToDump.x + "," + pointToDump.y;
        }
        dump += ")";
        dump += this.destination.serialize();
        return dump;
    },

    /**
     * Creates a String representation of the area's coordinates (may be edited by user).
     * @return {String} String representation of the area's coordinates
     */
    toCoordString: function() {
        var coordStr = "";
        var pointCnt = this.points.length;
        for (var pointIndex = 0; pointIndex < pointCnt; pointIndex++) {
            if (pointIndex > 0) {
                coordStr += " ";
            }
            var pointToAdd = this.points[pointIndex];
            coordStr += "(" + pointToAdd.x + "/" + pointToAdd.y + ")";
        }
        return coordStr;
    },

    /**
     * <p>Sets the polygon points according to the specified coordinate String
     * representation.<p>
     * <p>The area must be repainted to reflect the changes visually.</p>
     * @param {String} coordStr coordinates The String representation
     * @return {Boolean} True if the area could be adapted to the string; false if the
     *         string could not be parsed
     */
    fromCoordString: function(coordStr) {
        var coordDef = CQ.form.ImageMap.Helpers.parseCoordinateString(coordStr);
        if (coordDef == null) {
            return false;
        }
        var coords = coordDef.coordinates;
        if ((coords.length < 2) || (coordDef.coordinatesPairCnt != coords.length)) {
            return false;
        }
        // todo implement validation code?
        this.points.length = 0;
        var pointCnt = coords.length;
        for (var pointIndex = 0; pointIndex < pointCnt; pointIndex++) {
            var pointCoord = coords[pointIndex];
            this.addPoint(pointCoord.x, pointCoord.y);
        }
        return true;
    }

});

/**
 * <p>Checks if the specified string contains the definition of a polygonal area.</p>
 * <p>This method only checks for basic compliance with the formatting rules. Further format
 * checking will be done in {@link #deserialize}.</p>
 * @static
 * @param {String} strToCheck The string to check
 * @return {Boolean} True if the specified string contains the definition of a polygonal
 *         area
 */
CQ.form.ImageMap.PolyArea.isStringRepresentation = function(strToCheck) {
    var strLen = strToCheck.length;
    if (strLen < 9) {
        return false;
    }
    var contentStartPos = strToCheck.indexOf("(");
    if (contentStartPos <= 0) {
        return false;
    }
    var prefix = strToCheck.substring(0, contentStartPos);
    if (prefix != "poly") {
        return false;
    }
    if (!strToCheck.charAt(strLen) == ')') {
        return false;
    }
    return true;
};

/**
 * <p>Parses the specified String representation and creates a suitable
 * {@link CQ.form.ImageMap.PolyArea} object accordingly.</p>
 * <p>The specified String representation should have been checked beforehand using
 * {@link #isStringRepresentation}.</p>
 * @static
 * @param {String} stringDefinition The String representation of the polygonal area (as
 *        created by {@link #serialize})
 * @return {CQ.form.ImageMap.PolyArea} The polygonal area created; null, if the
 *         string definition is not correct
 */
CQ.form.ImageMap.PolyArea.deserialize = function(stringDefinition) {
    var defStartPos = stringDefinition.indexOf("(");
    if (defStartPos < 0) {
        return null;
    }
    var defEndPos = stringDefinition.indexOf(")", defStartPos + 1);
    if (defEndPos < 0) {
        return null;
    }
    var def = stringDefinition.substring(defStartPos + 1, defEndPos);
    var pointDefs = def.split(",");
    var preparsedPoints = new Array();
    var pointIndex;
    var pointCnt = pointDefs.length;
    if ((pointCnt & 1) != 0) {
        return null;
    }
    for (pointIndex = 0; pointIndex < pointCnt; pointIndex += 2) {
        var x = parseInt(pointDefs[pointIndex]);
        var y = parseInt(pointDefs[pointIndex + 1]);
        if (isNaN(x)) {
            return null;
        }
        if (isNaN(y)) {
            return null;
        }
        preparsedPoints[pointIndex / 2] = { "x": x, "y": y };
    }
    pointCnt = preparsedPoints.length;
    var theArea = new CQ.form.ImageMap.PolyArea({ },
            preparsedPoints[0].x, preparsedPoints[0].y);
    for (pointIndex = 1; pointIndex < pointCnt; pointIndex++) {
        theArea.addPoint(preparsedPoints[pointIndex].x, preparsedPoints[pointIndex].y);
    }
    return theArea;
};
