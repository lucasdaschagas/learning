/*
 * ADOBE CONFIDENTIAL
 *
 * Copyright 2011 Adobe Systems Incorporated
 * All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
 *
 */

/**
 * @class CQ.ShowHideRuleEditor
 * @extends CQ.Dialog
 * The ShowHideRuleEditor is a dialog for editing Show/Hide Rules.
 */
CQ.ShowHideRuleEditor = CQ.Ext.extend(CQ.Dialog, {

    /**
     * @cfg {String} componentName
     * The name of the component we're setting show/hide rules on.  Defaults to empty string.
     */
    componentName: "",
    
    /**
     * @cfg {String} componentLabel
     * The label of the component we're setting show/hide rules on.  Defaults to empty string.
     */
    componentLabel: "",

    /**
     * @cfg {String} expression
     * The javascript expression from which to initialize the conditions set.  NB: not updated as
     * conditions are added/deleted/modified.  Use getExpression() to get an updated version.
     */
    expression: "",
    
    /**
     * Flags an expression that can't be represented in the dialog controls.
     * @private
     */
    expertMode: false,
    
    /**
     * @cfg {Array} localFields
     * An array of local fields, each of the form:
     * <div class="mdetail-params"><ul)
     *   <li><code>text</code> : String<div class="sub-desc">The label to display (usually the field's caption).</div></li>
     *   <li><code>value</code> : String<div class="sub-desc">The name of the field.</div></li>
     *   <li><code>enumeration</code> : Array|null<div class="sub-desc">For enumerated fields, a nested array of text/value pairs.</div></li>
     * </ul></div>
     * Note: will be fetched from the HTML if not passed in.
     */
    localFields: undefined,
    
    /**
     * @cfg {Array} allFields
     * An array of fields, each of the form:
     * <div class="mdetail-params"><ul)
     *   <li><code>text</code> : String<div class="sub-desc">The label to display (usually the field's caption).</div></li>
     *   <li><code>value</code> : String<div class="sub-desc">The name of the field.</div></li>
     *   <li><code>enumeration</code> : Array|null<div class="sub-desc">For enumerated fields, a nested array of text/value pairs.</div></li>
     * </ul></div>
     * Note: will be fetched from the HTML if not passed in.
     */
    allFields: undefined,
    
    /**
     * @cfg {Function} okHandler 
     * A function called when the dialog is closed via the "OK" button.  The handler is passed 
     * the following parameters:
     * <div class="mdetail-params"><ul>
     *   <li><code>expression</code> : String<div class="sub-desc">The javascript expression representing the edited rules.</div></li>
     * </ul></div>
     */
    okHandler: function(expression) {},
    
    /**
     * @cfg {Function} cancelHandler
     * A function called when the dialog is closed via the "Cancel" button.  The handler takes no
     * parameters. 
     */
    cancelHandler: function() {},
    
    constructor: function(config) {
        
        if (!config.expression) {
            config.expression = this.expression;
        }
        if (!config.okHandler) {
            config.okHandler = this.okHandler;
        }
        if (!config.cancelHandler) {
            config.cancelHandler = this.cancelHandler;
        }
        
        var configDefaults = {
            closable: true,
            closeAction: "close",
            width: 615,
            modal: true,                
            title: CQ.I18n.getMessage("Edit Show / Hide Rules"),
            items: {
                xtype: "panel",
                items: [
                    {
                        xtype: "panel",
                        layout: "hbox",
                        bodyStyle: "border:none",
                        hideLabel: true,
                        items: [
                            {
                                xtype: "selection",
                                type: "select",
                                name: "showHideDropdown",
                                editable: false,
                                hideLabel: true,
                                width: 60,
                                options: [
                                    { "text": CQ.I18n.getMessage("Show", null, "Show/Hide Rule part 1"), "value": "show" },
                                    { "text": CQ.I18n.getMessage("Hide", null, "Show/Hide Rule part 1"), "value": "hide" }
                                ]
                            },
                            {   
                                /* SPACER */ "xtype": "static", "width": 6 
                            },
                            {
                                xtype: "textfield",
                                name: "componentLabelTextField",
                                width: 176,
                                disabled: true,     // disable it,
                                disabledClass: ""   // but don't gray it out
                            },
                            {   
                                xtype: "static",
                                text: CQ.I18n.getMessage("if", null, "Show/Hide Rule part 2"),
                                style: "padding-left:6px; padding-right:6px; padding-top:5px"
                            },
                            {
                                xtype: "selection",
                                type: "select",
                                name: "anyAllDropdown",
                                editable: false,
                                hideLabel: true,
                                width: 46,
                                options: [
                                    { "text": CQ.I18n.getMessage("all", null, "Show/Hide Rule part 3"), "value": "&&" },
                                    { "text": CQ.I18n.getMessage("any", null, "Show/Hide Rule part 3"), "value": "||" }
                                ]
                            },
                            {   
                                xtype: "static",
                                text: CQ.I18n.getMessage("of the following are met:", null, "Show/Hide Rule part 4"),
                                style: "padding-left:6px; padding-top:5px"
                            }
                        ]
                    },
                    {
                        xtype: "panel",
                        name: "conditionsPanel",
                        border: true,
                        bodyBorder: false,
                        bodyStyle: "padding: 6px",
                        items: [
                            {
                                xtype: "toolbar",
                                cls: "cq-multifield-toolbar",
                                items: [
                                    "->",
                                    {
                                        xtype: "textbutton",
                                        text: CQ.I18n.getMessage("Add Condition"),
                                        style: "padding-right:6px",
                                        scope: this,
                                        handler: function() {
                                            this.addCondition();
                                        }
                                    },
                                    {
                                        xtype: "button",
                                        iconCls: "cq-condition-add",
                                        template: new CQ.Ext.Template('<span><button class="x-btn" type="{0}"></button></span>'),
                                        scope: this,
                                        handler: function() {
                                            this.addCondition();
                                        }
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            buttonAlign: "left",
            buttons: [
                {
                    xtype: "textbutton",
                    text: CQ.I18n.getMessage("Javascript"),
                    scope: this,
                    handler:function() {
                        this.showExpertDialog(this.getExpression());
                        this[this.closeAction]();
                    }
                },
                "->",
                CQ.Dialog.OK,
                CQ.Dialog.CANCEL
            ]
        };
        CQ.Util.applyDefaults(config, configDefaults);
        CQ.ShowHideRuleEditor.superclass.constructor.call(this, config);
        
        // Fetch the various field lists from the rendered HTML if they weren't provided to us:
        //
        if (!this.allFields) {
        	try {
	           this.allFields = CQ.utils.Form.getFields();
	        } catch (err) {
	            CQ.Log.warn("CQ.utils.Form#getFields failed: " + err.message);
	            this.allFields = [];
	        }
        }
        if (!this.localFields) {
        	this.localFields = [];
        	for (var i = 0; i < this.allFields.length; i++) {
        		if (this.allFields[i].local) {
        		    if (this.fieldIsThisComponent(this.allFields[i].value)) {
        		        // TODO: it'd be nice to put a marker in the menu to give the user some context on where the
        		        // current component is with respect to the rest of the listed items, but for now we just
        		        // exclude ourselves from the list
        		        continue;
        		    }
        			this.localFields.push(this.allFields[i]);
        		}
        	}
        }
		
        this.initFromExpression();
        
        if (this.expertMode) {
            this.showExpertDialog(this.expression);
        } else {
            this.show();
        }
    },

    /**
     * Returns true if the given fieldName points to the current component or a field child of the current component.
     * @private
     */
    fieldIsThisComponent: function(fieldName) {
        if (fieldName == this.componentName) {
            return true;
        }
        if (fieldName.indexOf(".") > 0) {
            fieldName = fieldName.substring(0, fieldName.indexOf("."));
            if (fieldName == this.componentName) {
                return true;
            }
        }
        return false;
    },

    /**
     * Shows the expert mode dialog
     * @private
     */
    showExpertDialog: function(expression) {
        var expertConfig = {
        	"label": CQ.I18n.getMessage("Javascript Expression"),
            "javascript": expression,
            "okHandler": this.initialConfig.okHandler,
            "cancelHandler": this.initialConfig.cancelHandler,
            "width": this.initialConfig.width
        };
        if (this.expertMode) {
        	expertConfig["description"] = CQ.I18n.getMessage("(Expression was too complex to represent in dropdown menus.)");
        }
        var expertDialog = new CQ.JavascriptEditor(expertConfig);
        expertDialog.show();
    },

    /**
     * Adds a condition line to the current condition-set.
     * @private
     */
    addCondition: function(expressionClause) {
        var config = {
            expression: expressionClause,
            localFields: this.localFields,
            allFields: this.allFields,
            deleteHandler: function(condition) {
                var conditionsPanel = condition.findParentByType("panel");
                conditionsPanel.remove(condition.getId());
            }
        };
        var newCondition = new CQ.form.ConditionField(config);
        
        var conditionsPanel = this.find("name", "conditionsPanel")[0];
        var insertionIndex = conditionsPanel.items.getCount() - 1;  // insert before add button
        conditionsPanel.insert(insertionIndex, newCondition);
        this.doLayout();
    },
    
    /**
     * Compiles a javascript expression from the current rule condition-set.
     * @private
     */
    getExpression: function() {
        var expression = "";
        
        var opener = "";
        var joiner = " " + this.find("name", "anyAllDropdown")[0].getValue() + " ";
        var closer = "";
        if (this.find("name", "showHideDropdown")[0].getValue() == "show") {
            opener = "(";
            closer = ")";
        } else {
            opener = "!(";
            closer = ")";
        }
        
        var conditions = this.find("name", "conditionsPanel")[0].items;
        for (var i = 0; i < conditions.getCount(); i++) {
            var condition = conditions.itemAt(i);
            if (condition.getExpression == undefined) {
                continue;   // One of the "+ Add Condition..." line elements.
            }
            var clause = conditions.itemAt(i).getExpression();
            if (clause != null) {
                if (expression == "") {
                    expression = opener + clause;
                } else {
                    expression += joiner + clause;
                }
            }
        }
        if (expression != "") {
            expression += closer;
        }
        
        return expression;
    },
    
    /**
     * Builds a rule condition-set from the initial expression, and shows the dailog.  Must be called AFTER the
     * allFields array has been filled in.
     * @private
     */
    initFromExpression: function() {
    
        var working = CQ.Util.trim(this.expression);
        this.expertMode = false;
        
        // Determine if this is a "show" or a "hide" expression:
        //
        var showHideDropdown = this.find("name", "showHideDropdown")[0];
        if (working.charAt(0) == "!") {
            showHideDropdown.setValue("hide");
            working = CQ.Util.trim(working.slice(1));
        } else {
            showHideDropdown.setValue("show");
        }
        working = CQ.Util.unwrapParens(working);
        
        // Set the label of our field:
        //
        var componentLabelTextField = this.find("name", "componentLabelTextField")[0];
        componentLabelTextField.setValue(this.componentLabel);
        
        // Split into clauses (determining if it's an "any" or an "all" expression):
        //
        var anyAllDropdown = this.find("name", "anyAllDropdown")[0];
        anyAllDropdown.setValue("&&");
        
        var clauses = [];
        if (working.indexOf("&&") > 0) {
            clauses = working.split("&&");
        } else if (working.indexOf("||") > 0) {
            anyAllDropdown.setValue("||");
            clauses = working.split("||");
        } else if (working.length > 0) {
            clauses = [ working ];
        }
   
        // Find an operator that will parse the expression, and then validate the operands:
        //
        for (var i = 0; i < clauses.length; i++) {
            var result = CQ.utils.Form.parseCondition(clauses[i]);
            if (!result) {
                this.expertMode = true;
                return;
            }
            if (!CQ.utils.Form.searchArray(this.allFields, "value", result.left)) {
                this.expertMode = true;
                return;
            }
            if (!CQ.Util.isLiteral(result.right)) {
                this.expertMode = true;
                return;
            }
        }
        
        // Now build up the conditionFields for the clauses:
        //
        if (clauses.length == 0) {
            // initialize an empty expression with a single, empty condition
            // note: no algorithmic requirement; just an ease-of-use nicety
            this.addCondition("");
        } else {
            for (i = 0; i < clauses.length; i++) {
                this.addCondition(clauses[i]);
            }
        }
    },
    
    /**
     * Returns the config for the default OK button.
     * @private
     * @return {Object} The config for the default Cancel button
     */
    getOkConfig: function() {
        return {
            text: this.okText,
            cls: "cq-btn-ok",
            handler: function(button) {
                // scope: "this" is a dialog instance
                var expression = this.getExpression();
                this[this.closeAction]();
                this.okHandler(expression);
            }
        };
    },

    /**
     * Returns the config for the default cancel button.
     * @private
     * @return {Object} The config for the default Cancel button
     */
    getCancelConfig: function() {
        return {
            text: this.cancelText,
            cls: "cq-btn-cancel",
            handler: function(button) {
                // scope: "this" is a dialog instance
                this[this.closeAction]();
                this.cancelHandler();
            }
        };
    }
});

