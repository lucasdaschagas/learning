/*
 * ADOBE CONFIDENTIAL
 *
 * Copyright 2014 Adobe Systems Incorporated
 * All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
 */
;(function ($, ns, channel, window, undefined) {

    /**
     * The contextHub bar visibility has been toggled
     *
     * @event Document#cq-contexthub-toggle
     */

    var pageInfoButtonSelector = '#pageinfo-trigger';

    var pageInfoButton = (function () {
        var self = {
            element: $(pageInfoButtonSelector)
        };

        Object.defineProperty(self, 'disabled', {
            get: function () {
                if (this.element.length > 0) {
                    return this.element.hasClass('is-disabled');
                }

                return false;
            },
            set: function (val) {
                if (this.element.length > 0) {
                    this.element.toggleClass('is-disabled', !!val);
                }
            }
        });

        return self;
    }());

    var currentLayerButtonClass = 'js-editor-GlobalBar-layerCurrent';

    /**
     * Button which shows current layer
     */
    var currentLayerButton = (function () {
        var self = {
            element: $('.' + currentLayerButtonClass),

            setCurrent: function (layer) {
                if (self.element.length > 0) {
                    if (layer === 'Preview' || layer === 'Annotate') {
                        self.element.removeClass('is-selected');
                    } else {
                        self.element.addClass('is-selected');
                        self.element.attr('data-layer', layer);
                        self.element.text(ns.layerManager.getLayers()[layer].title);
                    }
                }
            }

        };

        Object.defineProperty(self, 'disabled', {
            get: function () {
                if (this.element.length > 0) {
                    return this.element[0].disabled;
                }

                return false;
            },
            set: function (val) {
                if (this.element.length > 0) {
                    this.element[0].disabled = !!val;
                }
            }
        });

        channel.on('cq-layer-activated', function (event) {
            var layer = event.layer;

            self.setCurrent(layer);
        });

        return self;
    }());

    var previewLayerButtonClass = 'js-editor-GlobalBar-previewTrigger';

    /**
     * Button which handles preview
     */
    var previewLayerButton = (function () {
        var self = {
            element: $('.' + previewLayerButtonClass)
        };

        Object.defineProperty(self, 'disabled', {
            get: function () {
                if (this.element.length > 0) {
                    return this.element[0].disabled;
                }

                return false;
            },
            set: function (val) {
                if (this.element.length > 0) {
                    this.element[0].disabled = !!val;
                }
            }
        });

        channel.on('cq-layer-activated', function (event) {
            if (self.element.length > 0) {
                var layer = event.layer;

                if (layer === 'Preview') {
                    self.element.addClass('is-selected');
                } else {
                    self.element.removeClass('is-selected');
                }
            }
        });

        return self;
    }());

    var layerSwitcherClass = 'editor-GlobalBar-layerSwitcher';
    /**
     * LayerSwitcher component in the global bar
     * @type {Object}
     */
    var layerSwitcher = (function() {
        var self = {
            element: $('.' + layerSwitcherClass),

            // will be removed in future
            _popover: $('#selectlayer-popover'),

            empty: function () {
                this._popover.find('.editor-GlobalBar-layerSwitcherPopoverContent').empty();
            },

            addLayer: function (layer) {
                var popover = this._popover[0];
                // Checking if editor contains layer switcher popover.Eg. Editors having one
                // layer say Edit other than preview might not contain layer switcher popover.
                if (popover) {
                    var popoverContent = popover.querySelector('.editor-GlobalBar-layerSwitcherPopoverContent');

                    if (popoverContent) {
                        var list = popover.querySelector("coral-buttonlist") || new Coral.ButtonList();

                        var btn = list.items.add({
                            content: {
                                textContent: layer.title
                            },
                            value: layer.name
                        });

                        btn.classList.add("js-editor-LayerSwitcherTrigger");
                        btn.dataset.layer = layer.name;

                        popoverContent.appendChild(list);
                    }
                }
            }
        };

        Object.defineProperty(self, 'disabled', {
            get: function () {
                if (this.element.length > 0) {
                    return this.element.hasClass('is-disabled');
                }

                return false;
            },
            set: function (val) {
                if (this.element.length > 0) {
                    this.element.toggleClass('is-disabled', !!val);
                }
            }
        });

        channel.on('click', '.js-editor-LayerSwitcherTrigger', function () {
            if (self._popover.length > 0) {
                self._popover[0].hide();
            }
        });

        channel.on('cq-layer-activated', function (event) {
            var layer = event.layer;

            if (self.element.length > 0) {
                if (layer === 'Preview' || layer === 'Annotate') {
                    self.element.removeClass('is-selected');
                } else {
                    self.element.addClass('is-selected');
                }
            }
        });

        return self;
    }());

    var annotationBadgeClass = 'editor-GlobalBar-badge';
    var annotationBadge = (function () {
        var self = {
            element: $('.' + annotationBadgeClass),

            _active: false,

            _val: 0,

            _showIcon: function (icon) {
                if (this.element.length > 0) {
                    this.element[0].icon = icon || 'noteAdd';
                }
            },

            setValue: function (val) {
                if (this.element.length > 0) {
                    this._val = val;

                    if (this._active) {
                        return;
                    }

                    if (this._val > 0) {
                        this.element.addClass('editor-GlobalBar-item--badge')
                            .removeClass('header-action');

                        this.element[0].icon = "";
                        this.element[0].label.innerHTML = this._val;
                    } else {
                        this.element.addClass('header-action')
                            .removeClass('editor-GlobalBar-item--badge');

                        this._showIcon();
                    }
                }
            }
        };

        channel.on('cq-layer-activated', function (event) {
            if (self.element.length > 0) {
                var layer = event.layer,
                    prevLayer = event.prevLayer === 'Annotate' ? 'Edit' : event.prevLayer;

                var overlayWrapper = $('#OverlayWrapper');

                if (layer === 'Annotate') {
                    self.element.attr('data-layer', prevLayer);
                    self._active = true;

                    self.element.addClass('header-action')
                        .removeClass('endor-Badge editor-GlobalBar-item--badge');
                    self.element[0].label.innerHTML = "";
                    self.element[0].ariaLabel = Granite.I18n.get('Exit Annotation Mode');
                    self.element.attr('style', 'display: block');

                    overlayWrapper.attr('role', 'region');
                    overlayWrapper.attr('aria-label', Granite.I18n.get('Annotate Mode Edit'));

                    self._showIcon('close');
                } else {
                    self.element.attr('data-layer', 'Annotate');
                    self.element.removeAttr('style');
                    self.element[0].ariaLabel = Granite.I18n.get('Annotation Mode');

                    overlayWrapper.removeAttr('role');
                    overlayWrapper.removeAttr('aria-label');

                    self._active = false;

                    self.setValue(self._val);
                }
            }
        });

        return self;

    }());

    var contextHubTriggerClass = 'js-editor-ContextHubTrigger';
    var contextHubTrigger = (function () {
        var self = {
            element: $('.' + contextHubTriggerClass),

            toggle: function () {
                channel.trigger('cq-contexthub-toggle');
            }
        };

        Object.defineProperty(self, 'disabled', {
            get: function () {
                if (this.element.length > 0) {
                    return this.element[0].disabled;
                }

                return false;
            },
            set : function(val) {
                if (this.element.length > 0) {
                    this.element[0].disabled = !!val;
                }
            }
        });

        if (self.element.length > 0) {
            self.element.on('click', function (event) {
                self.toggle();
            });

            /* keep in sync with EVENT_AUTHORING_CONTEXTHUB_INIT (contexthub.authoring-hook.js) */
            channel.on('ch-authoring-hook', function (ev) {
                self.disabled = !ev.visible;
            });
        }

        return self;
    }());

    var emulatorTriggerClass = 'js-editor-EmulatorBar-toggle';
    var emulatorTrigger = (function () {
        var self = {
            element: $('.' + emulatorTriggerClass)
        };

        Object.defineProperty(self, 'disabled', {
            get: function () {
                if (this.element.length > 0) {
                    return this.element[0].disabled;
                }

                return false;
            },
            set: function (val) {
                if (this.element.length > 0) {
                    this.element[0].disabled = !!val;
                }
            }
        });

        channel.on('cq-emulatorbar-toggle', function (event, data) {
            self.element.toggleClass('is-selected', data.isOpen);
        });

        return self;
    }());

    var sidePanelTriggerClass = 'js-editor-SidePanel-toggle';
    var sidePanelTrigger = (function () {
        var self = {
            element: $('.' + sidePanelTriggerClass)
        };

        Object.defineProperty(self, 'disabled', {
            get: function () {
                if (this.element.length > 0) {
                    return this.element[0].disabled;
                }

                return false;
            },
            set: function (val) {
                if (this.element.length > 0) {
                    this.element[0].disabled = !!val;
                }
            }
        });

        if (self.element.length > 0) {
            channel.on('cq-sidepanel-aftertoggle', function (ev) {
                self.element.toggleClass('is-selected', ns.ui.SidePanel.isOpened());
            });
        }

        return self;
    }());

    var styleSelectorTriggerClass = 'js-editor-StyleSelector-toggle';
    var styleSelectorTrigger = (function() {
        var self = {
            element: $('.' + styleSelectorTriggerClass)
        };

        Object.defineProperty(self, 'disabled', {
            get: function () {
                if (this.element.length > 0) {
                    return this.element[0].disabled;
                }

                return false;
            },
            set : function(val) {
                if (this.element.length > 0) {
                    this.element[0].disabled = !!val;
                }
            }
        });

        return self;
    }());

    var globalBarClass = 'editor-GlobalBar';
    var actionBarSelector = '.' + globalBarClass + ' coral-actionbar';
    var globalBar = (function () {

        var additionalButtons = [];

        /**
         * Add a new bar element to the Panel Header in first position
         *
         * @param {jQuery} newBar - jQuery element
         */
        var addBarToPanelHeaderAtFirst = function (newBar) {
            newBar.insertAfter($('.editor-panel-header coral-actionbar'));
        };

        var self = {

            /**
             * The global bar jQuery element
             *
             * @memberOf Granite.author.ui.globalBar
             */
            element: $('.' + globalBarClass),

            /**
             * Opens a menu showing the available Page Actions
             *
             * @memberOf Granite.author.ui.globalBar
             */
            pageInfoButton: pageInfoButton,

            /**
             * The button that activates the current Layer
             *
             * @memberOf Granite.author.ui.globalBar
             */
            currentLayerButton: currentLayerButton,

            /**
             * The button that directly activates the Preview Layer
             * @memberOf Granite.author.ui.globalBar
             */
            previewLayerButton: previewLayerButton,

            /**
             * Allows to switch between the different Layers
             * @memberOf Granite.author.ui.globalBar
             */
            layerSwitcher: layerSwitcher,

            /**
             * Badge showing the number of Annotations present in the page
             * @memberOf Granite.author.ui.globalBar
             */
            annotationBadge: annotationBadge,

            /**
             * Allows to toggle the Context Hub functionalities
             * @memberOf Granite.author.ui.globalBar
             */
            contextHubTrigger: contextHubTrigger,

            /**
             * Allows to toggle the Emulator Bar
             * @memberOf Granite.author.ui.globalBar
             */
            emulatorTrigger: emulatorTrigger,

            /**
             * Allows to toggle the SidePanel
             * @memberOf Granite.author.ui.globalBar
             */
            sidePanelTrigger: sidePanelTrigger,

            /**
             * Toggles the page Style Selector
             * @memberOf Granite.author.ui.globalBar
             */
            styleSelectorTrigger: styleSelectorTrigger,

            /**
             * Empties the Global Bar additional action buttons
             * @memberOf Granite.author.ui.globalBar
             */
            empty: function () {
                var leftItems = $(actionBarSelector)[0].primary.items;

                for (var i = 0; i < additionalButtons.length; i++) {
                  leftItems.remove(additionalButtons[i]);
                }

                additionalButtons = [];
            },

            /**
             * Adds a button to the Global Bar
             * @memberOf Granite.author.ui.globalBar
             *
             * @param {string} cssClass - CSS class of the button
             * @param {string} icon - CoralUI class of the icon
             * @param {string} title - Title of the button
             */
            addButton: function (cssClass, icon, title) {
                var button = new Coral.Button().set({
                    icon: ns.ui.coralCompatibility.getIconAttribute(icon),
                    variant: 'minimal',
                    title: Granite.I18n.getVar(title)
                });
                var $button = $(button).addClass(cssClass + ' editor-GlobalBar-item');

                var leftItems = $(actionBarSelector)[0].primary.items;
                additionalButtons.push(leftItems.add($button[0]));

                return $button;
            },

            /**
             * Adds a new bar element to the Panel Header at the given position.
             * The new bar is added to the bottom of the list if the position is undefined or out of range.
             *
             * @memberOf Granite.author.ui.globalBar
             *
             * @param {jQuery|HTMLElement} newBar - jQuery or HTML element
             * @param {Number} [position] - Position in the list of children where to add the bar
             */
            addBarToPanelHeader: function (newBar, position) {
                if(!(newBar instanceof $)){
                    newBar = $(newBar);
                }
                var panelHeader = $('.editor-panel-header');
                position = parseInt(position);
                if(!isNaN(position) && position > -1){
                    if(0 === position){
                        addBarToPanelHeaderAtFirst(newBar);
                        return;
                    }
                    var $currentBars = panelHeader.children();
                    $currentBars = $currentBars.filter(function(){
                        return this.nodeName.toLowerCase() !== 'nav';
                    });
                    if (position < $currentBars.length){
                        $currentBars.eq(position).before(newBar);
                        return;
                    }
                }
                newBar.appendTo(panelHeader);
            }
        };

        // @todo add title property
        channel.on('cq-content-frame-loaded', function (event) {
            // more complex component
            $('.editor-GlobalBar-pageTitle').text(Granite.I18n.get(event.title));
        });


        return self;
    }());

    var el = $(actionBarSelector)[0];
    Coral.commons.ready(el, function() {
        el && el.removeAttribute('hidden');
    });

    /**
     * Represents the Editor header Global Bar
     * @namespace
     * @alias Granite.author.ui.globalBar
     */
    ns.ui.globalBar = globalBar;

}(jQuery, Granite.author, jQuery(document), this));
