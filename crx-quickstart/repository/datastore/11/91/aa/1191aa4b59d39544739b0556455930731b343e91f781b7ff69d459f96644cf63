/*
 * Copyright 1997-2009 Day Management AG
 * Barfuesserplatz 6, 4001 Basel, Switzerland
 * All Rights Reserved.
 *
 * This software is the confidential and proprietary information of
 * Day Management AG, ("Confidential Information"). You shall not
 * disclose such Confidential Information and shall use it only in
 * accordance with the terms of the license agreement you entered into
 * with Day.
 */

/**
 * @class CQ.wcm.msm.RolloutWizard
 * @extends CQ.Dialog
 * The RolloutWizard provides a wizard for rolling out a page.
 * RolloutWizard starts a {@link CQ.wcm.msm.RolloutPlan}.
 * @constructor
 * Creates a new RolloutWizard.
 * @param {Object} config The config object
 */
CQ.wcm.msm.RolloutWizard = CQ.Ext.extend(CQ.Dialog, {
    /**
     * @cfg {Boolean} hideComponents
     * True to hide component selection part of the wizard.
     */
    hideComponents: false,

    /**
     * @cfg {Boolean} hideRolloutPlan
     * True to skip the step to select the targets of the current roll-out
     */
    hideRolloutPlan: false,

    /**
     * @cfg {Boolean} isBackground
     * Selects to submit to background-processing
     */
    isBackground: false,

    constructor: function(config) {
        var options = new Array();
        options.push({
            "text": CQ.I18n.getMessage("Rollout page"),
            "value": "page"
        });
        options.push({
            "text": CQ.I18n.getMessage("Rollout page and all sub pages"),
            "value": "deep"
        });

        if(!config.hideComponents) {
            options.push({"text": CQ.I18n.getMessage("Rollout selected components"),
                "value": "selected"
            });
        }
        this.rolloutType = new CQ.form.Selection({
            "name": "type",
            "cls": "x-form-field",
            "fieldLabel": CQ.I18n.getMessage("Rollout Scope"),
            "type": "radio",
            "value": config.dam ? "deep" :  "page",
            "options": options
        });
        this.backgroundExec = new CQ.Ext.form.Checkbox({
            "name":"background",
            "cls":"x-form-field",
            "fieldLabel": CQ.I18n.getMessage("Background rollout"),
            "fieldDescription": CQ.I18n.getMessage("If checked, rollout is executed as a background task"),
            "checked":config.isBackground
        });
        var items = [];
        if (config.dam){

            items.push(this.backgroundExec);
            items.push(new CQ.Ext.form.Hidden({
                "name":"type",
                "value":"deep"
            }));
        }
        else{
            items.push(this.rolloutType);
            items.push(this.backgroundExec);
        }
        // in case the rollout-plan is skipped, submit set the hidden fields
        // set the ok-button to submit
        var actionButton;
        if(config.hideRolloutPlan) {
            this.formUrl = "/bin/wcmcommand";
            items.push(new CQ.Ext.form.Hidden({
                "name":"cmd",
                "value":"rollout"
            }));
            if (CQ.Ext.isArray(config.path)) {
                for (var i=0;i<config.path.length;i++) {
                    items.push(new CQ.Ext.form.Hidden({
                        "name":"path",
                        "value":config.path[i]
                    }));
                }
            } else {
                items.push(new CQ.Ext.form.Hidden({
                    "name":"path",
                    "value":config.path
                }));
            }
            actionButton = {
                "text": CQ.I18n.getMessage("Roll-out"),
                "disabled": false,
                "handler": function(btn) {
                    if (this.backgroundExec && this.backgroundExec.getValue()) {
                        this.addHidden({"msm:async": true}, 1);
                    }
                    this.ok(btn);
                }
            }
        } else {
            actionButton = {
                "text": CQ.I18n.getMessage("Next"),
                "disabled": false,
                "listeners": {
                    "click": {
                        fn: CQ.wcm.msm.RolloutWizard.showRolloutPlan,
                        scope: this
                    }
                }
            }
        }

        var defaultConfig = {
            //  A Dialog to confirm the rollout-action, and select
            //  the Live Copies which will be synchronized.
            //                    "jcr:primaryType": "cq:Dialog",
            "title": CQ.I18n.getMessage("Rollout: {0}", config.path),
            "formUrl": "/bin/wcmcommand",
            "height": config.hideRolloutPlan ? 210 : 350,
            "items": {
                "xtype": "panel",
                "layout": "form",
                "items": items
            },
            "buttons": [actionButton, CQ.Dialog.CANCEL]
        };

        config = CQ.Util.applyDefaults(config, defaultConfig);

        CQ.wcm.msm.RolloutWizard.superclass.constructor.call(this, config);
    },

    // overriding CQ.Ext.Component#initComponent
    initComponent: function() {
        CQ.wcm.msm.RolloutWizard.superclass.initComponent.call(this);
    }
});
CQ.wcm.msm.RolloutWizard.showRolloutPlan = function() {
    var type = this.rolloutType.getValue();
    var background = this.backgroundExec.getValue();
    var paras = [];
    if(type=="selected") {
        var sel = CQ.WCM.getContentWindow().CQ.WCM.getSelection();
        sel.each(function() {
            if(this.path && this.path.charAt(this.path.length-1)!='*') {
                paras.push(this.path);
            }
        });
        if(paras.length==0) {
            CQ.Ext.Msg.alert(
                    CQ.I18n.getMessage("Info"),
                    CQ.I18n.getMessage("You have to select at least one component."));
            return;
        }
    }

    var planCfg = {
        "path": this.path,
        "params": {
            "type": type,
            "paras": paras
        }
    };
    if(background) {
        planCfg.bgExecute = true;
    }
    var plan = new CQ.wcm.msm.RolloutPlan(planCfg);
    plan.show();
    this.hide();
};

CQ.Ext.reg("rolloutwizard", CQ.wcm.msm.RolloutWizard);

/**
 * @class CQ.wcm.msm.RolloutPlan
 * @extends CQ.Dialog
 * The RolloutPlan provides a dialog to watch a page rollout progress.
 * RolloutPlan is started by a {@link CQ.wcm.msm.RolloutWizard}.
 * @constructor
 * Creates a new RolloutPlan.
 * @param {Object} config The config object
 */
CQ.wcm.msm.RolloutPlan = CQ.Ext.extend(CQ.Dialog, {

    maxSize: 500,

    auditLogDialog: null,

    selectable: true,

    constructor: function(config) {
        var rolloutTypeTxt = CQ.I18n.getMessage("Current page will be rolled out to the following target pages. Check targets which should be updated and press the rollout button.");

        if(config["params"]) {
            if(config["params"].type=="deep") {
                rolloutTypeTxt = CQ.I18n.getMessage("Current page and all its child page will be rolled out to the following target pages. Check targets which should be updated and press the rollout button.");
            } else if(config["params"].type=="selected") {
                rolloutTypeTxt = CQ.I18n.getMessage("Selected components will be rolled out into the following target pages. Check targets which should be updated and press the rollout button.");
            } else {
                config["params"].type = "page";
            }
        } else {
            config["params"] = { "type": "page" };
        }

        this.rolloutType = new CQ.Static({
            "text": rolloutTypeTxt,
            "bottommargin": true
        });

        //Target grid
        var checkColumn = new CQ.wcm.msm.RolloutPlan.CheckColumn({
            "rolloutPath": config.path,
            "name": "isTarget",
            "header": "",
            "dataIndex": "isTarget",
            "width": 20
        });

        this.columnModel = new CQ.Ext.grid.ColumnModel([
            checkColumn, {
                "id":CQ.wcm.msm.MSM.PARAM_LIVECOPY_PATH,
                "header": CQ.I18n.getMessage("Live Copy Path"),
                "dataIndex": CQ.wcm.msm.MSM.PARAM_LIVECOPY_PATH,
                "width": 220,
                "renderer" : function(value, metadata, record) {
                    var root = value;
                    if(value.lastIndexOf("/content")==0) {
                        root = value.substring(8);
                    }
                    if(record.get(CQ.wcm.msm.MSM.PARAM_LIVE_RELATIONSHIP)[CQ.wcm.msm.MSM.PARAM_SYNCPATH]) {
                        root += "<span style='color:#d6d6d6'>"+record.get(CQ.wcm.msm.MSM.PARAM_LIVE_RELATIONSHIP)[CQ.wcm.msm.MSM.PARAM_SYNCPATH]+"</span>";
                    }
                    return '<div title="Target Path: '+record.get(CQ.wcm.msm.MSM.PARAM_TARGETPATH)+'">'+root+'</div>';
                }
            },{
                "header": CQ.I18n.getMessage("Action"),
                "dataIndex": "action",
                "width": 120,
                "renderer" : function(value, metadata, record) {
                    return "<div class='"+value.css+"' title='"+value.text+"' alt='"+value.text+"'>"+value.shortText+"</div>";
                }

            },{
                "header": "Status",
                "dataIndex": "executionStatus",
                "width": 80,
                "renderer" : function(value, metadata, record) {
                    var css = "";
                    var msg = "";
                    switch(value) {
                        case "ok":
                            css = "msm-rollout-plan-rolledout";
                            msg = CQ.I18n.getMessage("Rollout successful");
                            break;
                        case "bg":
                            css = "msm-rollout-plan-rolloutbackground";
                            msg = CQ.I18n.getMessage("Rollout started in background");
                            break;
                        case "rolling":
                            css = "msm-rollout-plan-rollingout";
                            msg = CQ.I18n.getMessage("Executing rollout");
                            break;
                        case "error":
                            css = "msm-rollout-plan-rollouterror";
                            msg = CQ.I18n.getMessage("Error during rollout");
                            break;
                        case "norollout":
                            css = "msm-rollout-plan-norollout";
                            msg = CQ.I18n.getMessage("No rollout executed");
                            break;
                        default :
                            css = "";
                            msg = CQ.I18n.getMessage("Press Rollout button to execute rollout process");
                    }

                    return "<div class='"+css+"' title='"+msg+"' alt='"+msg+"'>&#160;</div>";
                }
            }]);

        // by default columns are sortable
        this.columnModel.defaultSortable = true;

        var url = CQ.HTTP.externalize(config.path)+".blueprint.json";
        var targetStore = new CQ.Ext.data.JsonStore({
            // load using HTTP
            "url": url,
            "restful":true,
            "totalProperty": "total",
            "root": CQ.wcm.msm.MSM.PARAM_TARGETS,
            "fields": [
                { "name": "isTarget"},
                { "name": "action" },
                { "name": CQ.wcm.msm.MSM.PARAM_LIVECOPY_PATH,
                    "convert": function(v, rec) {
                        return rec[CQ.wcm.msm.MSM.PARAM_LIVE_RELATIONSHIP][CQ.wcm.msm.MSM.PARAM_LIVECOPY_PATH]
                    }
                },
                { "name": CQ.wcm.msm.MSM.PARAM_TARGETPATH },
                { "name": CQ.wcm.msm.MSM.PARAM_LIVE_RELATIONSHIP }
            ],
            "sortInfo": {
                "field": CQ.wcm.msm.MSM.PARAM_TARGETPATH,
                "direction": "ASC"
            },
            "baseParams": {
                "maxSize" : this.maxSize,
                "advancedStatus":true,
                "returnRelationships":true,
                "msm:trigger":"ROLLOUT"
            },
            "paramNames":{
                "limit":"maxSize"
            },
            "listeners": {
                "load": function(store, records, options) {
                    for(var i = 0; i<records.length; i++) {
                        var record = records[i];
                        record.beginEdit();

                        var lr = record.data[CQ.wcm.msm.MSM.PARAM_LIVE_RELATIONSHIP];

                        //set action column value
                        var info = CQ.wcm.msm.MSM.getRolloutInfo(lr, config.path);
                        record.set("action", info);

                        var isTarget = true;
                        if(lr[CQ.wcm.msm.MSM.PARAM_STATUS][CQ.wcm.msm.MSM.PARAM_IS_TARGET_CANCELLED_CHILD]) {
                            isTarget = false;
                        }
                        record.set("isTarget", isTarget);
                        record.commit();
                    }
                }
            }
        });
        this.lcPathFilter = new CQ.Ext.form.TwinTriggerField({
            "style":{"marginLeft":"5px"},
            "width": 206,
            "trigger1Class": "x-form-clear-trigger",
            "trigger2Class": "x-form-search-trigger",
            "hideTrigger1":true,
            "enableKeyEvents":true,
            "onTrigger1Click": function() {
                this.reset();
                currentObj.applyFilter(this, 0);
            },
            "onTrigger2Click": function() {
                currentObj.applyFilter(this, 0);
            },
            "listeners": {
                "render": function() {
                    CQ.Ext.QuickTips.register({
                        "target": this.getEl(),
                        "title":CQ.I18n.getMessage("Live Copies path filter"),
                        "text":CQ.I18n.getMessage("Filter the Live Copy to display in the grid (by path substring)"),
                        "autoHide":true
                    });
                },
                "specialkey": function(f, e) {
                    if(e.getKey()==e.ENTER) {
                        currentObj.applyFilter(f, 0);
                    }
                },
                "keyup" : function(f) {
                    currentObj.applyFilter(f, 3);
                }
            },
            "hideTrigger": false
        });

        var currentObj = this;
        // create the editor grid
        this.targetGrid = new CQ.Ext.grid.EditorGridPanel({
            "store": targetStore,
            "cm": this.columnModel,
            "width": 600,
            "height": 200,
            "autoExpandColumn": CQ.wcm.msm.MSM.PARAM_LIVECOPY_PATH,
            "frame": false,
            "tbar":{},
            "listeners": {
                "render": function(grid) {
                    var store = grid.getStore();
                    grid.getTopToolbar().add(new CQ.Ext.form.Checkbox({
                        "checked":true,
                        "listeners":{
                            "render": function() {
                                CQ.Ext.QuickTips.register({
                                    "target": this.getEl(),
                                    "title":CQ.I18n.getMessage("Select / unselect all"),
                                    "autoHide":true
                                });
                            },
                            "check": {
                                "fn": function(box, checked) {
                                    this.each(function(record) {
                                        record.set("isTarget", checked);
                                    });
                                    this.commitChanges();
                                },
                                "scope":store
                            }
                        }
                    }));
                    grid.getTopToolbar().add(currentObj.lcPathFilter);
                    grid.getTopToolbar().addButton([{
                        "xtype": "tbfill"
                    },{
                        "xtype":"tbtext",
                        "text": CQ.I18n.getMessage("Trigger")+" : "
                    },{
                        "text": "On Rollout",
                        "tooltip": {
                            "title": CQ.I18n.getMessage("List with onRollout Trigger"),
                            "autoHide": true
                        },
                        "pressed": true,
                        "toggleGroup": "triggerFilter",
                        "enableToggle": true,
                        "toggleHandler": function(button, state) {
                            var scope = this;
                            var mask = new CQ.Ext.LoadMask(this.getEl(), {"removeMask":true });
                            mask.show();
                            var params = {};
                            params[CQ.wcm.msm.MSM.PARAM_TRIGGER] = state ? "ROLLOUT" : "";
                            store.load({
                                "params":params,
                                "callback":function(){
                                    currentObj.params[CQ.wcm.msm.MSM.PARAM_TRIGGER] = params[CQ.wcm.msm.MSM.PARAM_TRIGGER];
                                    mask.hide();
                                },
                                "scope": scope
                            });
                        },
                        "scope": currentObj.targetGrid
                    }, {
                        "text": CQ.I18n.getMessage("All"),
                        "tooltip": {
                            "title": CQ.I18n.getMessage("List with any available Trigger"),
                            "autoHide": true
                        },
                        "pressed": false,
                        "toggleGroup": "triggerFilter",
                        "enableToggle": true,
                        "scope": currentObj.targetGrid
                    }]);
                }
            }
        });
        checkColumn.init(this.targetGrid);

        var defaultConfig = {
            "title": CQ.I18n.getMessage("Rollout: {0}", config.path),
            "formUrl": CQ.shared.HTTP.externalize("/bin/wcmcommand"),
            "params": {
                "cmd":"rollout",
                "_charset_":"utf-8",
                "path": config.path
            },
            "height": 350,
            "items": {
                "xtype": "panel",
                "layout": "form",
                "items": [this.rolloutType, this.targetGrid]
            },
            "buttons": [{
                "text": CQ.I18n.getMessage("Audit log"),
                "disabled": false,
                "handler": function(button, evt) {
                    if(currentObj.auditLogDialog==null) {
                        currentObj.auditLogDialog = CQ.WCM.getDialog("/libs/wcm/msm/content/auditlogdialog");
                    }
                    currentObj.auditLogDialog.loadContent("/bin/msm/audit.json");
                    currentObj.auditLogDialog.show();
                }
            }, {
                "text": CQ.I18n.getMessage("Rollout"),
                "disabled": false,
                "scope": currentObj,
                "handler": config.bgExecute ? CQ.wcm.msm.RolloutPlan.rolloutBg : CQ.wcm.msm.RolloutPlan.rollout
            },
                CQ.Dialog.CANCEL
            ]
        };

        config = CQ.Util.applyDefaults(config, defaultConfig);

        CQ.wcm.msm.RolloutPlan.superclass.constructor.call(this, config);
    },

    isBackgroundJobResponse: function(serverResponse) {
        // TODO CQ.utils.HTTP.post build serverResponse
        // out of Sling's standard HTML response, and for a
        // background request this is not present. This
        // is a workaround to detect such requests
        return !(CQ.HTTP.isOkStatus(serverResponse));
    },

    getSelection: function() {
        var res = [];
        var /* CQ.Ext.data.Record[] */ records = this.targetGrid.store.getRange();
        for(var i = 0; i<records.length; i++) {
            var rec = records[i];
            var isTarget = rec.data["isTarget"];
            var lr = rec.data[CQ.wcm.msm.MSM.PARAM_LIVE_RELATIONSHIP];
            if(isTarget && lr[CQ.wcm.msm.MSM.PARAM_TRIGGER]!="never" && !lr[CQ.wcm.msm.MSM.PARAM_STATUS][CQ.wcm.msm.MSM.PARAM_IS_CANCELLED]) {
                res.push(rec);
            } else {
                rec.beginEdit();
                rec.set("executionStatus", "norollout");
                rec.commit();
            }
        }
        return res;
    },

    show: function(animateTarget, cb, scope) {
        var win = CQ.wcm.msm.RolloutPlan.superclass.show.call(this, animateTarget, cb, scope);
        var store = this.targetGrid.getStore();
        var mask = new CQ.Ext.LoadMask(this.getEl(), {"removeMask":true });
        mask.show();
        store.load({
            "callback":function(){
                this.setSelectionMode(store.getTotalCount());
                mask.hide();
            },
            "scope": win
        });
        return win;
    },

    setSelectionMode: function(numLiveCopies) {
        if (numLiveCopies > this.maxSize) {
            this.selectable = false;
            this.targetGrid.getEl().mask(CQ.I18n.getMessage("All {0} LiveCpies will be rolled-out in background", numLiveCopies));
        } else {
            this.selectable = true;
        }
    },

    /**
     * @private un-/filter the store and switch the clear trigger
     * @param {Trigger} trigger
     * @param {Number} limit
     */
    applyFilter : function(trigger, limit) {
        var filter = trigger.getValue();
        var store = this.targetGrid.getStore();
        if(!filter) {
            store.clearFilter();
            trigger.getTrigger(0).hide();
        } else {
            trigger.getTrigger(0).show();
            if(filter.length>limit) {
                store.filter(CQ.wcm.msm.MSM.PARAM_LIVECOPY_PATH, "/"+filter, true);
            }
        }
    },

    rolloutSelection: function(button) {
        var selection = this.getSelection();
        for(var i = 0; i<selection.length; i++) {
            var rec = selection[i];
            var params = this.params;
            params[CQ.wcm.msm.MSM.PARAM_TARGETPATH] = rec.data[CQ.wcm.msm.MSM.PARAM_TARGETPATH];
            rec.beginEdit();
            rec.set("executionStatus", "rolling");
            rec.endEdit(); //notify store that a record is in work.
            var dialog = this;
            var callback = function(opts, succ, xhr, serverResponse) {
                var calRec = this.record;
                calRec.beginEdit();
                if(CQ.utils.HTTP.isOk(serverResponse)) {
                    calRec.set("executionStatus", "ok");
                } else if(!serverResponse.headers.Status && CQ.utils.HTTP.isOkStatus(xhr.status)) {
                    calRec.set("executionStatus", "bg");
                } else {
                    calRec.set("executionStatus", "error");
                    CQ.Notification.notify(
                            CQ.I18n.getMessage(
                                    "Rollout failed: {0}",
                                    calRec.data[CQ.wcm.msm.MSM.PARAM_TARGETPATH],
                                    "{0} is a placeholder for additional error text"
                            ),
                            xhr.status+" "+xhr.statusText
                    );
                }
                calRec.commit(); //mark as processed
                if(dialog.targetGrid.store.findBy(function(record) {return record.dirty;})<0) {
                    button.enable();
                    button.setText(CQ.I18n.getMessage("Close"));
                    button.setHandler(function() {
                        dialog.close();
                    });
                }
            };

            var formUrl = this.formPanel.form.url;
            CQ.utils.HTTP.post(formUrl, callback, params, {"record": rec}, true);
        }
    },

    rolloutAll: function() {
        var params = this.params;
        params["msm:async"] = true;
        CQ.utils.HTTP.post(this.formPanel.form.url, null, params, {}, true);
        this.close();
    },

    rolloutSelectionBg: function(button) {
        var paths = [];
        var selection = this.getSelection();
        for(var i = 0; i<selection.length; i++) {
            var rec = selection[i];
            paths.push(rec.data[CQ.wcm.msm.MSM.PARAM_TARGETPATH]);
            rec.beginEdit();
            rec.set("executionStatus", "rolling");
            rec.endEdit(); //notify store that a record is in work.
        }
        var params = this.params;
        params[CQ.wcm.msm.MSM.PARAM_TARGETPATH]=paths;
        params["msm:async"] = true;
        var dialog = this;
        var callback = function(opts, succ, xhr, serverResponse) {
            var status;
            if(CQ.utils.HTTP.isOk(serverResponse)
                    || (!serverResponse.headers.Status && CQ.utils.HTTP.isOkStatus(xhr.status))) {
                status = "bg";
            } else {
                status = "error";
                CQ.Notification.notify(
                        CQ.I18n.getMessage(
                                "Rollout failed: {0}",
                                calRec.data[CQ.wcm.msm.MSM.PARAM_TARGETPATH],
                                "{0} is a placeholder for additional error text"
                        ),
                        xhr.status+" "+xhr.statusText
                );
            }
            for (i=0;i<selection.length; i++) {
                var rec = selection[i];
                rec.beginEdit();
                rec.set("executionStatus", status);
                rec.endEdit(); //notify store that a record is in work.
                rec.commit(); //mark as processed
            }
            button.enable();
            button.setText(CQ.I18n.getMessage("Close"));
            button.setHandler(function() {
                dialog.close();
            });
        };
        CQ.utils.HTTP.post(this.formPanel.form.url, callback, params, {}, true);
    }
});

CQ.Ext.reg("rolloutplan", CQ.wcm.msm.RolloutPlan);


CQ.wcm.msm.RolloutPlan.rollout = function(button, evt) {
    button.disable();
    if (this.selectable) {
        this.rolloutSelection(button);
    } else {
        this.rolloutAll();
    }
};

CQ.wcm.msm.RolloutPlan.rolloutBg = function(button, evt) {
    button.disable();
    if (this.selectable) {
        this.rolloutSelectionBg(button);
    } else {
        this.rolloutAll();
    }
};

CQ.wcm.msm.RolloutPlan.CheckColumn = function(config) {
    CQ.Ext.apply(this, config);
    if(!this.id) {
        this.id = CQ.Ext.id();
    }
    this.renderer = this.renderer.createDelegate(this);
};

CQ.wcm.msm.RolloutPlan.CheckColumn.prototype = {
    init : function(grid) {
        this.grid = grid;
        this.grid.on("render", function() {
            var view = this.grid.getView();
            view.mainBody.on("mousedown", this.onMouseDown, this);
        }, this);
    },

    onMouseDown : function(e, t) {
        if(t.className && t.className.indexOf("x-grid3-cc-"+this.id)!=-1) {
            e.stopEvent();
            var index = this.grid.getView().findRowIndex(t);
            var record = this.grid.store.getAt(index);
            record.set(this.dataIndex, !record.data[this.dataIndex]);
            record.commit();
        }
    },

    renderer : function(value, metadata, record) {
        if(value==="") {
            //initialization
            var lr = record.data[CQ.wcm.msm.MSM.PARAM_LIVE_RELATIONSHIP];

            if(lr[CQ.wcm.msm.MSM.PARAM_SOURCEPATH].indexOf(this.rolloutPath)!=0) {
                return "";
            }
            if(lr[CQ.wcm.msm.MSM.PARAM_TRIGGER]!="never" && !lr[CQ.wcm.msm.MSM.PARAM_STATUS][CQ.wcm.msm.MSM.PARAM_IS_CANCELLED]) {
                if(lr[CQ.wcm.msm.MSM.PARAM_STATUS][CQ.wcm.msm.MSM.PARAM_IS_TARGET_MANUALLY_CREATED] ||
                        (lr[CQ.wcm.msm.MSM.PARAM_STATUS][CQ.wcm.msm.MSM.PARAM_IS_SOURCE_EXISTING]
                                && !lr[CQ.wcm.msm.MSM.PARAM_STATUS][CQ.wcm.msm.MSM.PARAM_IS_TARGET_EXISTING]
                                && lr[CQ.wcm.msm.MSM.PARAM_STATUS][CQ.wcm.msm.MSM.PARAM_IS_TARGET_DELETED])) {
                    return "";
                }
                if(!value) {
                    return this.getCheckbox(false, metadata);
                } else {
                    return this.getCheckbox(true, metadata);
                }
            } else {
                return "";
            }

        } else {
            return this.getCheckbox(value, metadata);
        }
    },

    getCheckbox: function(value, metadata) {
        metadata.css += " x-grid3-check-col-td";
        return "<div class='x-grid3-check-col"+(value ? "-on" : "")+" x-grid3-cc-"+this.id+"'>&#160;</div>";
    }
};
