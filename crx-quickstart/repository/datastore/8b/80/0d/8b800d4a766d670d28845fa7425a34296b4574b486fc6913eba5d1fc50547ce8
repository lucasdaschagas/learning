/*************************************************************************
* ADOBE CONFIDENTIAL
* ___________________
*
* Copyright 2019 Adobe
* All Rights Reserved.
*
* NOTICE: All information contained herein is, and remains
* the property of Adobe and its suppliers, if any. The intellectual
* and technical concepts contained herein are proprietary to Adobe
* and its suppliers and are protected by all applicable intellectual
* property laws, including trade secret and copyright laws.
* Dissemination of this information or reproduction of this material
* is strictly forbidden unless prior written permission is obtained
* from Adobe.
**************************************************************************/
(function(window, document, $) {
    "use strict";

    var registry = $(window).adaptTo("foundation-registry");
    var $document = $(document);

    function changeName(el, oldName, newName) {
        if (el.name.startsWith(oldName + "@")) {
            el.name = newName + el.name.substring(oldName.length);
        }
    }

    var coralSelector = [
        "input[is='coral-textfield']", "textarea[is='coral-textarea']",
        "coral-checkbox", "coral-radio", "coral-switch",
        "coral-datepicker", "coral-numberinput", "coral-slider", "coral-colorinput", "coral-calendar",
        "coral-autocomplete", "coral-select", "coral-taglist", "coral-fileupload",
        "coral-buttongroup"
    ];

    registry.register("foundation.adapters", {
        type: "foundation-field",
        selector: coralSelector.join(","),
        adapter: function(el) {
            var field = $(el);

            return {
                getName: function() {
                    return el.name;
                },
                setName: function(name) {
                    field
                        .nextAll(".foundation-field-related")
                        .add(field.children(".foundation-field-related"))
                        .each(function() {
                            changeName(this, el.name, name);
                        });
                    el.name = name;
                },
                isDisabled: function() {
                    return el.disabled;
                },
                setDisabled: function(disabled) {
                    el.disabled = disabled;
                    field
                        .nextAll(".foundation-field-related")
                        .add(field.children(".foundation-field-related"))
                        .prop("disabled", disabled);
                },
                isReadOnly: function() {
                    return el.readOnly;
                },
                setReadOnly: function(readOnly) {
                    el.readOnly = readOnly;
                    field
                        .nextAll(".foundation-field-related")
                        .add(field.children(".foundation-field-related"))
                        .prop("readOnly", readOnly);
                },
                isInvalid: function() {
                    return el.hasAttribute("invalid");
                },
                setInvalid: function(invalid) {
                    if (invalid) {
                        el.setAttribute("invalid", "");
                    } else {
                        el.removeAttribute("invalid");
                    }
                },
                isRequired: function() {
                    if ($(el).is("input, textarea")) {
                        return el.getAttribute("aria-required") === "true";
                    } else {
                        return el.required;
                    }
                },
                setRequired: function(required) {
                    if ($(el).is("input, textarea")) {
                        el.setAttribute("aria-required", required ? "true" : "false");
                    } else {
                        el.required = required;
                    }
                },
                getValue: function() {
                    if ($(el).is("coral-checkbox, coral-radio, coral-switch")) {
                        return el.checked ? el.value : null;
                    } else {
                        return el.value;
                    }
                },
                setValue: function(value) {
                    if ($(el).is("coral-checkbox, coral-radio, coral-switch")) {
                        el.checked = el.value === value;
                    } else if ($(el).is("coral-fileupload")) {
                        try {
                            el.value = value;
                        } catch (err) {
                            // eslint-disable-next-line no-console
                            console.error(err);
                        }
                    } else {
                        el.value = value;
                    }
                },
                getLabelledBy: function() {
                    return el.labelledBy;
                },
                setLabelledBy: function(labelledBy) {
                    el.labelledBy = labelledBy;
                },
                getValues: function() {
                    if ($(el).is("coral-checkbox, coral-radio, coral-switch")) {
                        return [ this.getValue() ];
                    }

                    if ("values" in el) {
                        return el.values;
                    } else {
                        return [ el.value ];
                    }
                },
                setValues: function(values) {
                    if ($(el).is("coral-checkbox, coral-radio, coral-switch")) {
                        el.checked = values.some(function(value) {
                            return el.value === value;
                        });
                    } else if ("values" in el) {
                        el.values = values;
                    } else {
                        el.value = values[0];
                    }
                }
            };
        }
    });

    registry.register("foundation.adapters", {
        type: "foundation-field",
        selector: "coral-multifield",
        adapter: function(el) {
            var multifield = $(el);

            return {
                getName: function() {
                    // Assume that the [data-granite-coral-multifield-name] is never changed or is always in sync with
                    // the name in the template
                    return el.getAttribute("data-granite-coral-multifield-name") || "";
                },
                setName: function(name) {
                    el.setAttribute("data-granite-coral-multifield-name", name);
                },
                isDisabled: function() {
                    // we rely on the state of the add element to decide on the disabled status
                    return multifield.children("[coral-multifield-add]").prop("disabled") || false;
                },
                setDisabled: function(disabled) {
                    // we use descent selector to support nested multifields; we use a selector instead of the
                    // item.content api
                    multifield.find("> coral-multifield-item > coral-multifield-item-content").each(function() {
                        // we need the parent item to be able to hide the item controls
                        var item = $(this.parentNode);
                        // @coral: selector is not public
                        item.children("[handle='remove'], [handle='move']").prop("disabled", disabled);

                        var api = $(this.firstElementChild).adaptTo("foundation-field");
                        if (api && "setDisabled" in api) {
                            api.setDisabled(disabled);
                        }
                    });

                    multifield.children("[coral-multifield-add], .foundation-field-related").prop("disabled", disabled);
                },
                isInvalid: function() {
                    return el.getAttribute("aria-invalid") === "true";
                },
                setInvalid: function(invalid) {
                    el.setAttribute("aria-invalid", invalid ? "true" : "false");
                },
                isRequired: function() {
                    return el.getAttribute("aria-required") === "true";
                },
                setRequired: function(required) {
                    el.setAttribute("aria-required", required ? "true" : "false");
                },
                getValue: function() {
                    // we need to use the descendent selector in case we have nested multifields
                    var api = multifield
                        .find("> coral-multifield-item > coral-multifield-item-content > :first-child")
                        .first()
                        .adaptTo("foundation-field");

                    if (api && "getValue" in api) {
                        return api.getValue();
                    } else {
                        return null;
                    }
                },
                setValue: function(value) {
                    this.setValues([ value ]);
                },
                getLabelledBy: function() {
                    return el.getAttribute("aria-labelledby");
                },
                setLabelledBy: function(labelledBy) {
                    if (labelledBy) {
                        el.setAttribute("aria-labelledby", labelledBy);
                    } else {
                        el.removeAttribute("aria-labelledby");
                    }
                },
                getValues: function() {
                    return Array.prototype.map.call(
                        // we need to use the descendent selector in case we have nested multifields
                        multifield.find("> coral-multifield-item > coral-multifield-item-content"),
                        function(item) {
                            var api = $(item.firstElementChild).adaptTo("foundation-field");
                            if (api && "getValue" in api) {
                                return api.getValue();
                            } else {
                                return null;
                            }
                        });
                },
                setValues: function(values) {
                    var item;
                    var api;

                    var items = el.items.getAll();
                    var itemCount = items.length;
                    var valuesCount = values.length;

                    for (var i = 0; i < valuesCount; i++) {
                        item = items[i];

                        // if there is no item available to recycle, we use the Collection API to create an item§
                        if (typeof item === "undefined") {
                            item = el.items.add(new Coral.Multifield.Item());
                        }

                        // @coral we force the upgrade of the item so that we can set the value synchronously
                        // and we also force the item to render its content
                        window.CustomElements.upgrade(item);
                        if (!item.content.firstChild) {
                            el._renderTemplate(item);
                        }

                        api = $(item.content.firstElementChild).adaptTo("foundation-field");
                        if (api && "setValue" in api) {
                            api.setValue(values[i]);
                        }
                    }

                    // any extra item needs to be removed
                    for (var j = valuesCount; j < itemCount; j++) {
                        el.items.remove(items[j]);
                    }
                }
            };
        }
    });

    $document.on("change", coralSelector.concat("coral-multifield").join(","), function(e) {
        $(this).trigger("foundation-field-change");
    });


    registry.register("foundation.adapters", {
        type: "foundation-field",
        selector: ".coral-RadioGroup",
        adapter: function(el) {
            var field = $(el);

            return {
                getName: function() {
                    // returns empty string when no coral-radios were found
                    return field.children("coral-radio").first().prop("name") || "";
                },
                setName: function(name) {
                    var $radioElements = field.children("coral-radio");
                    var oldName = $radioElements.first().prop("name");

                    $radioElements.prop("name", name);

                    if (typeof oldName !== "undefined") {
                        field.children(".foundation-field-related").each(function() {
                            changeName(this, oldName, name);
                        });
                    }
                },
                isDisabled: function() {
                    var $radioElements = field.children("coral-radio");

                    // a radio group with no items is considered enabled
                    if ($radioElements.length === 0) {
                        return false;
                    } else {
                        return Array.prototype.every.call($radioElements, function(item) {
                            return item.disabled;
                        });
                    }
                },
                setDisabled: function(disabled) {
                    field.children("coral-radio, .foundation-field-related").prop("disabled", disabled);
                },
                isInvalid: function() {
                    return el.getAttribute("aria-invalid") === "true";
                },
                setInvalid: function(invalid) {
                    el.setAttribute("aria-invalid", invalid ? "true" : "false");
                },
                isRequired: function() {
                    return el.getAttribute("aria-required") === "true";
                },
                setRequired: function(required) {
                    el.setAttribute("aria-required", required ? "true" : "false");
                },
                getValue: function() {
                    var values = Array.prototype.reduce.call(field.children("coral-radio"), function(memo, item) {
                        if (item.checked) {
                            memo.push(item.value);
                        }
                        return memo;
                    }, []);

                    if (values.length) {
                        return values[0];
                    } else {
                        return null;
                    }
                },
                setValue: function(value) {
                    field.children("coral-radio").each(function() {
                        if (this.value === value) {
                            return this.checked = true;
                        }
                        return false;
                    });
                },
                getLabelledBy: function() {
                    var elements = field.children("coral-radio");
                    if (elements.length > 0) {
                        return elements[0].labelledBy;
                    } else {
                        return null;
                    }
                },
                setLabelledBy: function(labelledBy) {
                    field.children("coral-radio").each(function() {
                        this.labelledBy = labelledBy;
                    });
                },
                getValues: function() {
                    return Array.prototype.reduce.call(field.children("coral-radio"), function(memo, item) {
                        if (item.checked) {
                            memo.push(item.value);
                        }
                        return memo;
                    }, []);
                },
                setValues: function(values) {
                    var items = field.children("coral-radio");

                    values.forEach(function(value) {
                        items.each(function() {
                            if (this.value === value) {
                                items = items.not(this);
                                this.checked = true;
                                return false;
                            }
                        });
                    });
                }
            };
        }
    });

    $document.on("change", "coral-radio", function(e) {
        $(this).parent(".coral-RadioGroup").trigger("foundation-field-change");
    });
})(window, document, Granite.$);
