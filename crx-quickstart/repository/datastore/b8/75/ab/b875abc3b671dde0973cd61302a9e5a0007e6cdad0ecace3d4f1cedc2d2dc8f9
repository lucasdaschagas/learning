/*
 * Copyright 1997-2011 Day Management AG
 * Barfuesserplatz 6, 4001 Basel, Switzerland
 * All Rights Reserved.
 *
 * This software is the confidential and proprietary information of
 * Day Management AG, ("Confidential Information"). You shall not
 * disclose such Confidential Information and shall use it only in
 * accordance with the terms of the license agreement you entered into
 * with Day.
 */

/**
 * @class CQ.wcm.msm.MSM.Commands
 * Container for the static methods to operate on a Live Copy.
 */
CQ.wcm.msm.MSM.Commands = {};

/**
 * Rolls out a Live Copy.
 * @param {String} srcPath Source path (Blueprint page path)
 * @param {String} targetPath Target path (Live Copy page path)
 * @param {Boolean} deep (optional) True to run a deep rollout (defaults to false)
 * @param {Boolean} reset (optional) True to run a reset rollout (defaults to false)
 * @param {Function} callback (optional) After command callback, see {@link CQ.Ext.Ajax#request}
 * @param {Object} scope (optional) Callback scope
 * @static
 */
CQ.wcm.msm.MSM.Commands.rollout = function(srcPath, targetPath, deep, reset, callback, scope) {
    CQ.Ext.Ajax.request({
        "url":CQ.HTTP.externalize("/bin/wcmcommand"),
        "method":"POST",
        "callback": callback,
        "params":{
            "_charset_":"utf-8",
            "cmd":"rollout",
            "path": CQ.wcm.msm.MSM.filterPagePath(srcPath),
            "msm:targetPath": CQ.wcm.msm.MSM.filterPagePath(targetPath),
            "type": deep ? "deep": "page",
            "reset": reset
        },
        "scope": scope
    });
};

/**
 * Rolls out a Live Copy.
 * @param {String} srcPath Source path (Blueprint page path)
 * @param {String} targetPath Target path (Live Copy page path)
 * @param {Boolean} deep (optional) True to run a deep rollout (defaults to false)
 * @param {Function} callback (optional) After command callback, see {@link CQ.Ext.Ajax#request}
 * @param {Object} scope (optional) Callback scope
 * @static
 */
CQ.wcm.msm.MSM.Commands.rolloutLiveCopy = function(srcPath, targetPath, deep, callback, scope) {
    CQ.wcm.msm.MSM.Commands.rollout(srcPath, targetPath, deep, false, callback, scope);
};

/**
 * Runs a reset rollout on a Live Copy. Warning !! Some local modifications will be lost:<ul>
 * <li>deleted paragraphs/pages will be restored</li>
 * <li>cancelled inheritance will be restored</li>
 * <li>local modifications will be removed</li>
 * </ul>
 * @param {String} srcPath Source path (Blueprint page path)
 * @param {String} targetPath Target path (Live Copy page path)
 * @param {Boolean} deep (optional) True to run a deep reset (defaults to false)
 * @param {Function} callback (optional) After command callback, see {@link CQ.Ext.Ajax#request}
 * @param {Object} scope (optional) Callback scope
 * @static
 */
CQ.wcm.msm.MSM.Commands.resetLiveCopy = function(srcPath, targetPath, deep, callback, scope) {
    CQ.wcm.msm.MSM.Commands.rollout(srcPath, targetPath, deep, true, callback, scope);
};

/**
 * Recreates a Live Copy. Warning: all local modifications will be lost.
 * @param {String} srcPath Source path (Blueprint page path)
 * @param {String} targetPath Target path (Live Copy page path)
 * @param {Function} callback (optional) After command callback, see {@link CQ.Ext.Ajax#request}
 * @param {Object} scope (optional) Callback scope
 * @static
 *
 * @deprecated Use {@link #Commands.rollout rollout} with reset option instead
 */
CQ.wcm.msm.MSM.Commands.recreateLiveCopy = function(srcPath, targetPath, callback, scope) {
    CQ.wcm.msm.MSM.Commands.rollout(srcPath, targetPath, true, true, callback, scope);
};

/**
 * Detaches a Live Copy, i.e. transform Live Copy into a standalone page.
 * @param {String} targetPath Target path (Live Copy page path)
 * @param {Function} callback (optional) After command callback, see {@link CQ.Ext.Ajax#request}
 * @param {Object} scope (optional) Callback scope
 * @static
 */
CQ.wcm.msm.MSM.Commands.detachLiveCopy = function(targetPath, callback, scope) {
    CQ.Ext.Ajax.request({
        "url":CQ.HTTP.externalize(targetPath + ".msm.conf"),
        "method":"POST",
        "callback": callback,
        "params":{
            "_charset_":"utf-8",
            "removeLCMarkers": true
        },
        "scope": scope
    });
};

/**
 * Attaches a Live Copy page to its Blueprint page, i.e. transform a standalone page into
 * a Live Copy.
 * @param {String} srcPath Source path (Blueprint page path)
 * @param {String} targetPath Target path (Live Copy page path)
 * @param {Boolean} deep (optional) True to attach children to (defaults to false)
 * @param {Function} callback (optional) After command callback, see {@link CQ.Ext.Ajax#request}
 * @param {Object} scope (optional) Callback scope
 * @static
 */
CQ.wcm.msm.MSM.Commands.attachLiveCopy = function(srcPath, targetPath, deep, callback, scope) {
    CQ.Ext.Ajax.request({
        "url":CQ.HTTP.externalize(targetPath + ".msm.conf"),
        "method":"POST",
        "callback": callback,
        "params":{
            "_charset_":"utf-8",
            "cmd": "attach",
            "srcPath": srcPath,
            "deep": deep
        },
        "scope": scope
    });
};

/**
 * Flushes (recreates) the server caches.
 * @param {Function} callback (optional) After command callback, see {@link CQ.Ext.Ajax#request}
 * @param {Object} scope (optional) Callback scope
 */
CQ.wcm.msm.MSM.Commands.flushServerCaches = function(callback, scope) {
    CQ.Ext.Ajax.request({
        "url":CQ.HTTP.externalize("/libs/wcm/msm/content/commands/servercaches.conf"),
        "method":"POST",
        "callback": callback,
        "params":{
            "_charset_":"utf-8",
            "cmd": "flush"
        },
        "scope": scope
    });
};

/**
 * Adds a list of child pages to the skipped page list.
 * @param {String} parentTargetPath Target parent path (Live Copy page path)
 * @param {String[]} childNames List of child page to add to skipped page list
 * @param {Function} callback (optional) After command callback, see {@link CQ.Ext.Ajax#request}
 * @param {Object} scope (optional) Callback scope
 * @static
 */
CQ.wcm.msm.MSM.Commands.addSkippedPage = function(parentTargetPath, childNames, callback, scope) {
    var params = {
        "cmd": "append"
    };
    params[CQ.wcm.msm.MSM.PARAM_SKIPPED_PAGES] = childNames;
    CQ.Ext.Ajax.request({
        "url":CQ.HTTP.externalize(parentTargetPath + ".skippedpages.json"),
        "method":"POST",
        "callback": callback,
        "params": params,
        "scope": scope
    });
};

/**
 * Removes a list of child pages from the skipped page list.
 * @param {String} parentTargetPath Target parent path (Live Copy page path)
 * @param {String[]} childNames List of child page to remove from skipped page list
 * @param {Function} callback (optional) After command callback, see {@link CQ.Ext.Ajax#request}
 * @param {Object} scope (optional) Callback scope
 * @static
 */
CQ.wcm.msm.MSM.Commands.removeSkippedPage = function(parentTargetPath, childNames, callback, scope) {
    var params = {
        "cmd": "remove"
    };
    params[CQ.wcm.msm.MSM.PARAM_SKIPPED_PAGES] = childNames;
    CQ.Ext.Ajax.request({
        "url":CQ.HTTP.externalize(parentTargetPath + ".skippedpages.json"),
        "method":"POST",
        "callback": callback,
        "params": params,
        "scope": scope
    });
};

/**
 * Adds a page to the skipped page list.
 * @param {String} targetPath Target path (Live Copy page path)
 * @param {Function} callback (optional) After command callback, see {@link CQ.Ext.Ajax#request}
 * @param {Object} scope (optional) Callback scope
 * @static
 */
CQ.wcm.msm.MSM.Commands.skipLiveCopy = function(targetPath, callback, scope) {
    var parentTargetPath = targetPath.substring(0,targetPath.lastIndexOf("/"));
    var childName = targetPath.substring(targetPath.lastIndexOf("/") + 1);
    CQ.wcm.msm.MSM.Commands.addSkippedPage(parentTargetPath, childName, callback, scope);
};

/**
 * Removes a page from the skipped page list.
 * @param {String} targetPath Target path (Live Copy page path)
 * @param {Function} callback (optional) After command callback, see {@link CQ.Ext.Ajax#request}
 * @param {Object} scope (optional) Callback scope
 * @static
 */
CQ.wcm.msm.MSM.Commands.unskipLiveCopy = function(targetPath, callback, scope) {
    var parentTargetPath = targetPath.substring(0,targetPath.lastIndexOf("/"));
    var childName = targetPath.substring(targetPath.lastIndexOf("/") + 1);
    CQ.wcm.msm.MSM.Commands.removeSkippedPage(parentTargetPath, childName, callback, scope);
};

/**
 * Returns the create Live Copy dialog config.
 * @param {String} parentPath Target parent path (Live Copy page path)
 * @return {Object} the dialog config object.
 */
CQ.wcm.msm.MSM.Commands.getCreateLiveCopyDialogConfig = function(parentPath) {
    var skippedPages = new CQ.form.Selection({
        "name": "missingPage",
        "fieldLabel": CQ.I18n.getMessage("Missing pages"),
        "options": [],
        "type": "checkbox",
        "fieldDescription": CQ.I18n.getMessage("Missing pages are optional pages which were not selected during Live Copy creation, deleted pages or newly created pages on Blueprint."),
        "listeners": {
            "selectionchanged": function(component, value, isChecked) {
                var allowBlank = false;
                if (component && component.optionItems && component.optionItems.items) {
                    for (var missingPagesIdx = 0 ; missingPagesIdx < component.optionItems.items.length ; missingPagesIdx ++) {
                        // if any of the missing pages is selected, set the live source from required to false
                        if (component.optionItems.items[missingPagesIdx].checked) {
                            allowBlank = true;
                            break;
                        }
                    }
                    
                    // find the containing tab panel
                    var tbParent = component.findParentByType("tabpanel");
                    if (tbParent) {
                        var lcSourceSearchResults = tbParent.find("name", "srcPath");
                        if (lcSourceSearchResults && lcSourceSearchResults.length > 0) {
                            var lcSourceField = lcSourceSearchResults[0];
                            // make sure to save the "required" style label
                            if (!lcSourceField.requiredLabel) {
                                lcSourceField.requiredLabel = lcSourceField.label.dom.innerHTML;
                            }
                            
                            // update the allow blank based on the missing pages selection status
                            lcSourceField.allowBlank = allowBlank;
                            
                            // update the label
                            var labelContent = allowBlank
                                                ? lcSourceField.fieldLabel
                                                : lcSourceField.requiredLabel;
                            
                            lcSourceField.label.update(labelContent);
                            
                            lcSourceField.clearInvalid();
                        }
                    }
                }
            }
        }
    });

    var skippedPagesStore = new CQ.Ext.data.JsonStore({
        "proxy": new CQ.Ext.data.HttpProxy({
            "url": CQ.HTTP.externalize(parentPath + ".missingpages.json")
        }),
        "fields":["path", "name", "title"]
    });

    skippedPagesStore.load({
        "callback": function(records, options, success) {
            if (records && records.length) {
                var options = [];
                for (var i = 0; i < records.length; i++) {
                    var name = records[i].get("name");
                    var title = records[i].get("title");
                    options.push({
                        "value": name,
                        "text": title
                    });
                }
                skippedPages.setOptions(options);
            } else {
                skippedPages.findParentByType("dialogfieldset").hide();
                skippedPages.findParentByType("dialogfieldset").nextSibling().setTitle(CQ.I18n.getMessage("Choose Live Copy source"));
                skippedPages.findParentByType("dialogfieldset").nextSibling().expand();
            }
        }
    });

    return createDialog = {
        "xtype": "dialog",
        "id": CQ.Util.createId("cq-livecopydialog"),
        "title":CQ.I18n.getMessage("Create Live Copy"),
        "formUrl":"/bin/wcmcommand",
        "params": {
            "cmd":"createLiveCopy",
            "_charset_":"utf-8"
        },
        "height": 500,
        "items": {
            "xtype": "tabpanel",
            "items": [{
                "xtype": "panel",
                "title": CQ.I18n.getMessage("Source selection"),
                "items": [{
                    "collapsed": false,
                    "collapsible": true,
                    "xtype": "dialogfieldset",
                    "title": CQ.I18n.getMessage("Select missing pages..."),
                    "items": [
                        skippedPages, {
                            "fieldLabel": CQ.I18n.getMessage("Exclude sub pages"),
                            "xtype": "selection",
                            "type": "checkbox",
                            "value": false,
                            "name": "excludeSubPages",
                            "fieldDescription": CQ.I18n.getMessage("If checked, sub pages of selected page above will not be copied and it will be possible to select them individually as new Live Copy.")
                        }
                    ]
                },{
                    "collapsed": true,
                    "collapsible": true,
                    "xtype": "dialogfieldset",
                    "title": CQ.I18n.getMessage("... or choose Live Copy source"),
                    "items": [{
                        "name": "destPath",
                        "value": parentPath,
                        "xtype": "hidden"
                    },{
                        "fieldLabel":CQ.I18n.getMessage("Title"),
                        "name":"title",
                        "xtype": "textfield"
                    },{
                        "fieldLabel":CQ.I18n.getMessage("Name"),
                        "name":"label",
                        "vtype":"itemname",
                        "xtype": "textfield"
                    },{
                        "fieldLabel":CQ.I18n.getMessage("Live Copy From"),
                        "name":"srcPath",
                        "xtype": "pathfield",
                        "rootPath" : parentPath.indexOf("/content/dam")==0 ? "/content/dam" : "/content",
                        "rootTitle" : parentPath.indexOf("/content/dam")==0 ? CQ.I18n.getMessage("Assets") : CQ.I18n.getMessage("Websites"),
                        "allowBlank": false
                    },{
                        "fieldLabel": CQ.I18n.getMessage("Exclude sub pages"),
                        "xtype": "selection",
                        "type": "checkbox",
                        "value": false,
                        "name": "shallow",
                        "fieldDescription": CQ.I18n.getMessage("If checked, sub pages of selected page above will not be copied and it will be possible to select them individually as new Live Copy.")
                    }
                    ]
                }]
            },{
                "xtype": "panel",
                "title": CQ.I18n.getMessage("Sync config"),
                "items": [CQ.Util.formatData({
                    "xtype": "cqinclude",
                    "path": CQ.HTTP.externalize("/libs/wcm/msm/components/rolloutconfig/chooser.infinity.json")

                })]
            }]
        },
        "buttons": CQ.Dialog.OKCANCEL,
        "okText":CQ.I18n.getMessage("Create")
    };
};

/**
 * Creates a Live Copy.
 * @param {String} srcPath Source path (Blueprint page path)
 * @param {String} destPath Destination path (Live Copy parent page path)
 * @param {String} before (optional) Name of the future next sibling page
 * @param {String} pageName (optional) Name of the root page (defaults to the name of the Blueprint page)
 * @param {Boolean} shallow (optional) True to only create a single page Live Copy (defaults to false)
 * @param {String[]} rolloutConfigs (optional) Rollout config paths (defaults to "default" config)
 * @param {Function} callback (optional) After command callback, see {@link CQ.Ext.Ajax#request}
 * @param {Object} scope (optional) Callback scope
 * @static
 */
CQ.wcm.msm.MSM.Commands.createLiveCopy = function(srcPath, destPath, before, pageName, shallow, rolloutConfigs, callback, scope) {
    pageName = pageName || srcPath.substring(srcPath.lastIndexOf("/") + 1);
    CQ.Ext.Ajax.request({
        "url":CQ.HTTP.externalize("/bin/wcmcommand"),
        "method":"POST",
        "callback": callback,
        "params":{
            "_charset_":"utf-8",
            "cmd":"createLiveCopy",
            "srcPath": CQ.wcm.msm.MSM.filterPagePath(srcPath),
            "destPath": destPath,
            "label": pageName,
            "shallow": shallow || false,
            "before": before,
            "cq:rolloutConfigs": rolloutConfigs
        },
        "scope": scope
    });
};

/**
 * Creates a Catalog from a Catalog Blueprint.
 *
 * While very similar to creating a LiveCopy, Catalog creation uses special rolloutConfigs which
 * create LiveCopy pages from templates rather than from the blueprint pages themselves.  The
 * blueprint pages define the templates, the page names, and other properties.
 *
 * Catalog creation is always deep, and unlike livecopy creation, the catalog blueprint is always
 * in control of the rolloutConfig.
 *
 * @param {String} parentPath Source path (Blueprint page path)
 * @static
 * @deprecated since 5.6.1; use CQ.commerce.Edit.createCatalog
 */
CQ.wcm.msm.MSM.Commands.createCatalog = function(parentPath, defaultPageTitle) {
    var createCatalogDialog = {
        "jcr:primaryType": "cq:Dialog",
        "id": CQ.Util.createId("cq-createcatalogdialog"),
        "title":CQ.I18n.getMessage("Create Catalog"),
        "formUrl":"/bin/wcmcommand",
        "params": {
            "cmd": "createCatalog",
            "srcPath": parentPath,
            "_charset_": "utf-8"
        },
        "height": 200,
        "items": {
            "jcr:primaryType": "cq:Panel",
            "items": [{
                "fieldLabel": CQ.I18n.getMessage("Destination"),
                "name": "destPath",
                "rootPath": "/content",
                "xtype": "pathfield"
            },{
                "fieldLabel": CQ.I18n.getMessage("Title"),
                "name": "title",
                "value" : defaultPageTitle,
                "xtype": "textfield"
            },{
                "fieldLabel": CQ.I18n.getMessage("Name"),
                "name": "label",
                "vtype": "itemname",
                "xtype": "textfield"
            }]
        },
        "buttons": CQ.Dialog.OKCANCEL,
        "okText":CQ.I18n.getMessage("Create")
    };
    var dialog = CQ.WCM.getDialog(createCatalogDialog);
    dialog.failure = function(dlg, xhr) {
        var txt;
        try {
            var resp = CQ.HTTP.buildPostResponseFromHTML(xhr.response.responseText);
            txt = resp.headers[CQ.HTTP.HEADER_MESSAGE];
        }
        catch (e) {
            txt = CQ.I18n.getMessage("Failed to create catalog.");
        }
        CQ.Ext.Msg.alert(CQ.I18n.getMessage("Error"), txt);
    };
    dialog.success = function(dlg, xhr) {
        var response = CQ.HTTP.buildPostResponseFromHTML(xhr.response.responseText);
        CQ.Notification.notifyFromResponse(response, null, true);
    };
    dialog.show();
};
