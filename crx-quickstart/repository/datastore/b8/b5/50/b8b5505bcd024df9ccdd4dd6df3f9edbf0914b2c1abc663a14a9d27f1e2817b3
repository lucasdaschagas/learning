CQ.scene7 = CQ.scene7 || {};


CQ.scene7.initPresetOptions = function() {
    var cloudConfigCombo = CQ.Ext.getCmp("s7-videoprofile-cloudconfig");
    if(cloudConfigCombo){
        var cloudConfigPath = cloudConfigCombo.getValue();
        if(cloudConfigPath){
            CQ.scene7.loadPresetOptions(cloudConfigPath);
        }
    }
};

CQ.scene7.updatePresetOptions = function(record){
    if(record){
        var cloudConfigPath = record.data.path;
        if(cloudConfigPath){
            CQ.scene7.loadPresetOptions(cloudConfigPath);
        }
    }
};

CQ.scene7.loadPresetOptions = function(cloudConfigPath){
    if(cloudConfigPath){
        var path = cloudConfigPath;
        if(path){
            path = path + "/jcr:content.presets.encoding.json";
            var options;
            var response = CQ.HTTP.get(path);
            if(CQ.utils.HTTP.isOk(response)){
                var responseBody = response.body;
                options = JSON.parse(responseBody);
            }
            if(options){
                var presetCombo = CQ.Ext.getCmp("s7-videoprofile-preset");
                if(presetCombo){
                    presetCombo.setOptions(options);
                }
            }
        }
    }
};


CQ.scene7.triggerWorkflow = function(id, path, s7ConfigPath) {
    if (!s7ConfigPath) {
        s7ConfigPath = "";
    }
    document.getElementById(id + "-publishLink").removeAttribute("onclick");
    document.getElementById(id + "-publishLink").innerHTML = CQ.I18n.getMessage("Uploading to Scene7");
    CQ.HTTP.post("/etc/workflow/instances", function(options, success, xhr, response) {
        if (success && xhr.status == 201) {
            var locHeader = xhr.getResponseHeader("Location").replace(/^http:\/\/.*?\/(.*)$/, "/$1");
            window.setTimeout("CQ.scene7.checkWorkflow('" + id + "', '" + path + "', '" + locHeader + "');", 5000);
        }
    }, {
        model:"/etc/workflow/models/scene7/jcr:content/model",
        payloadType:"JCR_PATH",
        payload:decodeURIComponent(path),
        "_charset_":"utf-8",
        "pageCloudConfigPath":s7ConfigPath,
        "isInteractiveUpload": "true"
    });
};


// run the workflow until it succeeds or fails. If it succeeds then we work off poll for pub status  via checkPublishState
CQ.scene7.checkWorkflow = function(id, path, location) {
    CQ.HTTP.get(location + ".json", function(options, success, xhr, response) {
        if (success) {
            var workflowInstance = CQ.HTTP.eval(xhr);
            if (workflowInstance) {
                if (workflowInstance.state == "RUNNING") {
                    CQ.scene7.checkPublishState(id, path, 0);
                    window.setTimeout("CQ.scene7.checkWorkflow('" + CQ.shared.XSS.getXSSValue(id) + "', '" + CQ.shared.XSS.getXSSValue(path) + "', '" + CQ.shared.XSS.getXSSValue(location) + "');", 5000);
                    return;
                } else if (workflowInstance.state == "COMPLETED") {
                    var now = new Date();
                    CQ.scene7.checkPublishState(id, path, now.getTime());
                    return;
                }

            }
        }
        document.getElementById(id + "-publishLink").innerHTML = CQ.I18n.getMessage("Publishing to Scene7 failed");
    });
};


CQ.scene7.triggerWorkflowFromViewer = function(id, path, s7PageConfigPath) {
    CQ.HTTP.get(path + "/_jcr_content/metadata.json", function(options, success, xhr, response) {
        if (success) {
            var asset = CQ.HTTP.eval(xhr);
            if (asset && asset["dam:scene7FileStatus"]) {
                var now = new Date();
                document.getElementById(id + "-publishLink").removeAttribute("onclick");
                CQ.scene7.checkPublishState(id, path, now.getTime());
            } else {
                CQ.scene7.triggerWorkflow(id, path, s7PageConfigPath);
            }
        }
    });
};

// Check status of s7 upload/publish based on asset metadata
// Polls based on startup and continues until the operation succeeds, fails or
// timeouts.
// Note: Timeout does not change the current status setting as the job likely has not failed, just has not yet completed
CQ.scene7.checkPublishState = function(id, path, startTime) {
    // if onclick has been reset a new asset was dropped in while the previous asset is publishing stop checking pub status of previous asset
    if (document.getElementById(id + "-publishLink").hasAttribute("onclick"))
        return;
    CQ.HTTP.get(path + "/_jcr_content/metadata.json", function(options, success, xhr, response) {
        if (success) {
            var asset = CQ.HTTP.eval(xhr);
            if (asset && asset["dam:scene7FileStatus"]) {
                var state = asset["dam:scene7FileStatus"];
                if (state == "UploadStart")
                    document.getElementById(id + "-publishLink").innerHTML = CQ.I18n.getMessage("Uploading to Scene7");
                else if (state == "PublishQueued")
                    document.getElementById(id + "-publishLink").innerHTML = CQ.I18n.getMessage("Publishing to Scene7 queued");
                else if (state == "PublishStart")
                    document.getElementById(id + "-publishLink").innerHTML = CQ.I18n.getMessage("Publishing to Scene7");
                else if (state == "UploadFailed" || state == "PublishFailed") {
                    document.getElementById(id + "-publishLink").innerHTML = CQ.I18n.getMessage("Publish to Scene7 failed");
                    return;
                } else if (state == "PublishComplete") {
                    document.getElementById(id + "-publishLink").innerHTML = CQ.I18n.getMessage("Publish to Scene7 completed");
                    return;
                } else if (state == "NotSupported") {
                    document.getElementById(id + "-publishLink").innerHTML = CQ.I18n.getMessage("Unsupported Scene7 asset type");
                    return;
                }

                var now = new Date();
                if (now.getTime() - startTime < 20 * 60 * 1000)
                    window.setTimeout('CQ.scene7.checkPublishState(\'' + id + '\', \'' + path + '\', ' + now.getTime() + ');', 5000);
            } else
                document.getElementById(id + "-publishLink").innerHTML = CQ.I18n.getMessage("Publish to Scene7 failed");
        }
    });
};

CQ.scene7.doConnect = function(dialog) {
    var emailField = dialog.find("name", "./email");
    var passwordField = dialog.find("name", "./password");
    var regionField = dialog.find("name", "./region");
    var email = emailField[0].getValue();
    var password = passwordField[0].getValue();
    var region = regionField[0].getValue();
    
    if (!email) {
        CQ.Ext.Msg.alert(CQ.I18n.getMessage("Error"), CQ.I18n.getMessage("Please provide an email address."));
        return;
    }
    if (!password) {
        CQ.Ext.Msg.alert(CQ.I18n.getMessage("Error"), CQ.I18n.getMessage("Please provide the Scene7 account's password."));
        return;
    }
    if (!region) {
        CQ.Ext.Msg.alert(CQ.I18n.getMessage("Error"), CQ.I18n.getMessage("Please select the region for your Scene7 account."));
        return;
    }

    this.showButtonIndicator(true);

    CQ.HTTP.post(dialog.path + ".companies.json", function(options, success, xhr, response) {
                if (success) {
                    var scene7Data = CQ.HTTP.eval(xhr);
                    this.showButtonIndicator(false);
                    if (scene7Data) {
                        if (scene7Data.error) {
                            CQ.Ext.Msg.alert(CQ.I18n.getMessage("Error"), CQ.I18n.getVarMessage(scene7Data.error));
                        } else {
                            if (scene7Data.userHandle) {
                                dialog.find("name", "./userHandle")[0].setValue(scene7Data.userHandle);
                            }

                            if (scene7Data.companies && scene7Data.companies.length > 0) {
                                var companies = new Array();
                                for (var i = 0; i < scene7Data.companies.length; i++) {
                                    // has to be in the same order as the store field config
                                    companies.push([ scene7Data.companies[i].handle,
                                        scene7Data.companies[i].name,
                                        scene7Data.companies[i].rootPath]);
                                }
                                dialog.find("name", "./companyname")[0].store.loadData(companies);
                            }

                            var rootPath = dialog.find("name", "./rootPath")[0];
                            rootPath.setValue("");
                            rootPath.itemCt.setDisplayed("inherit");
                            dialog.find("name", "./companyname")[0].setValue("");
                            dialog.find("name", "./companyname")[0].itemCt.setDisplayed("inherit");
                            if (dialog.find("name", "./syncEnabled")[0].getValue(true) === "on") {
                                dialog.find("name", "./syncControl")[0].setValue(true);
                            } else {
                                dialog.find("name", "./syncControl")[0].setValue(false);
                            }
                            dialog.find("name", "./syncControl")[0].itemCt.setDisplayed("inherit");
						    if (dialog.find("name", "./publishEnabled")[0].getValue(true) === "on") {
                                dialog.find("name", "./publishEnabled")[0].setValue("on");
                                dialog.find("name", "./previewServer")[0].itemCt.setDisplayed("inherit");
                           	} else {
                                dialog.find("name", "./publishEnabled")[0].setValue("off");
                                dialog.find("name", "./previewServer")[0].itemCt.setDisplayed("none");
                           	}
                            dialog.find("name", "./publishEnabled")[0].itemCt.setDisplayed("inherit");
                            dialog.find("name", "./defaultConfiguration")[0].itemCt.setDisplayed("inherit");
                            dialog.find("localName", "connectButton")[0].setText(CQ.I18n.getMessage('Re-Connect to Scene7'));

                            CQ.Ext.Msg.show({
                                title:CQ.I18n.getMessage("Success"),
                                msg:CQ.I18n.getMessage("Connection successful"),
                                buttons:CQ.Ext.Msg.OK,
                                icon:CQ.Ext.Msg.INFO});
                            CQ.cloudservices.getEditOk().enable();
                        }
                    } else {
                        CQ.Ext.Msg.alert(CQ.I18n.getMessage("Error"), CQ.I18n.getMessage("Connection has failed"));
                        CQ.cloudservices.getEditOk().disable();
                    }
                } else {
                    CQ.Ext.Msg.alert(CQ.I18n.getMessage("Error"), CQ.I18n.getMessage("Connection has failed"));
                    CQ.cloudservices.getEditOk().disable();
                }
            },
            {
                "email":email,
                "password":password,
                region:region,
                path:dialog.path
            }, this, true);

};

CQ.scene7.showButtonIndicator = function(isShown) {
    if (!isShown) {
        CQ.Ext.Msg.wait(CQ.I18n.getMessage("Connection successful")).hide();
    } else {
        CQ.Ext.Msg.wait(CQ.I18n.getMessage("Connecting to Scene7..."));
    }
};

CQ.scene7.EmailField = CQ.Ext.extend(CQ.Ext.form.TextField, {
    constructor:function(config) {
        config.enableKeyEvents = true;

        config.listeners = {
            change:function(field, newValue, oldValue) {
                var dialog = field.findParentByType("dialog");
                dialog.find("name", "./password")[0].setValue("");
                dialog.find("name", "./userHandle")[0].setValue("");
                dialog.find("name", "./companyHandle")[0].setValue("");

                dialog.find("name", "./rootPath")[0].setValue("");
                dialog.find("name", "./rootPath")[0].itemCt.setDisplayed("none");
                dialog.find("name", "./companyname")[0].setValue("");
                dialog.find("name", "./companyname")[0].itemCt.setDisplayed("none");
                dialog.find("name", "./syncControl")[0].itemCt.setDisplayed("none");
				dialog.find("name", "./previewServer")[0].setValue("");
                dialog.find("name", "./previewServer")[0].itemCt.setDisplayed("none");
                dialog.find("name", "./defaultConfiguration")[0].itemCt.setDisplayed("none");
            }
        };

        CQ.scene7.EmailField.superclass.constructor.call(this, config);
    }

});

CQ.Ext.reg('scene7emailfield', CQ.scene7.EmailField);

CQ.scene7.CompanyField = CQ.Ext.extend(CQ.Ext.form.ComboBox, {
    constructor:function(config) {
        config.mode = "local";
        config.triggerAction = 'all';
        config.valueField = "handle";
        config.displayField = "name";
        config.store = new CQ.Ext.data.SimpleStore({
            data:[],
            fields:["handle", "name", "rootPath"],
            id:0
        });
        config.listeners = {
            select:function(combo, record, index) {
                var dialog = combo.findParentByType("dialog");
                dialog.find("name", "./companyHandle")[0].setValue(record.data.handle);
                dialog.find("name", "./rootPath")[0].setValue(record.data.rootPath);
                dialog.find("name", "./targetPath")[0].setValue("/content/dam/" + record.data.rootPath);
                dialog.find("name", "./s7RootPath")[0].setValue(record.data.rootPath);
                dialog.find("name", "./adhocFolder")[0].setValue(record.data.rootPath + "CQ5_adhoc");
				dialog.find("name", "./previewServer")[0].setValue(record.data.previewServer);
            },
            loadcontent:function(field, record, path) {
                var dialog = field.findParentByType("dialog");
                if (!record.data.companyHandle) {
                    field.itemCt.setDisplayed("none");
                    dialog.find("name", "./rootPath")[0].itemCt.setDisplayed("none");
                    dialog.find("name", "./syncControl")[0].itemCt.setDisplayed("none");
                    dialog.find("name", "./publishEnabled")[0].itemCt.setDisplayed("none");
					dialog.find("name", "./previewServer")[0].itemCt.setDisplayed("none");
                    dialog.find("name", "./defaultConfiguration")[0].itemCt.setDisplayed("none");
                }
                CQ.scene7.init(dialog);
            }
        };

        CQ.scene7.CompanyField.superclass.constructor.call(this, config);
    },
    initComponent:function() {
        CQ.scene7.CompanyField.superclass.initComponent.call(this);
    }
});

CQ.Ext.reg('scene7companyfield', CQ.scene7.CompanyField);

CQ.scene7.TwoValueField = CQ.Ext.extend(CQ.form.CompositeField, {

    constructor:function(config) {
        var fieldItem = this;
        var items = new Array();
        items.push({
            xtype:'numberfield',
            allowDecimals:config.allowDecimals,
            allowNegative:config.allowNegative,
            listeners:{
                change:function(field, newValue, oldValue) {
                    fieldItem.hiddenField.setValue(newValue + "," + fieldItem.field2.getValue());
                }
            }
        });
        items.push({
            xtype:'numberfield',
            allowDecimals:config.allowDecimals,
            allowNegative:config.allowNegative,
            listeners:{
                change:function(field, newValue, oldValue) {
                    fieldItem.hiddenField.setValue(fieldItem.field1.getValue() + "," + newValue);
                }
            }
        });
        items.push({
            xtype:'hidden',
            name:config.name
        });

        config = CQ.Util.applyDefaults(config, {
            "border":false,
            "items":[
                {
                    "xtype":"panel",
                    "border":false,
                    "bodyStyle":"padding:" + this.bodyPadding + "px",
                    "layout":"column",
                    "items":items
                }
            ]
        });
        CQ.scene7.TwoValueField.superclass.constructor.call(this, config);
    },

    initComponent:function() {
        CQ.scene7.TwoValueField.superclass.initComponent.call(this);

        this.field1 = this.items.items[0].items.items[0];
        this.field2 = this.items.items[0].items.items[1];
        this.hiddenField = this.items.items[0].items.items[2];

        this.on("disable", function() {
            this.items.each(function(item/*, index, length*/) {
                if (item instanceof CQ.Ext.form.Field) {
                    item.field.disable();
                }
            }, this);
        });

        this.on("enable", function() {
            this.items.each(function(item/*, index, length*/) {
                if (item instanceof CQ.Ext.form.Field) {
                    item.field.enable();
                }
            }, this);
        });
    },

    // overriding CQ.form.CompositeField#getValue
    getValue:function() {
        return this.field1.getValue() + "," + this.field2.getValue();

    },

    // overriding CQ.form.CompositeField#setValue
    setValue:function(value) {
        if (value.indexOf(",") != -1) {
            var value1 = value.substring(0, value.indexOf(","));
            var value2 = value.substring(value.indexOf(",") + 1);
        } else {
            var value1 = value;
            var value2 = "";
        }
        this.field1.setValue(value1);
        this.field2.setValue(value2);
        this.hiddenField.setValue(value);
    }
});

CQ.Ext.reg('scene7twovaluefield', CQ.scene7.TwoValueField);

CQ.scene7.SyncField = CQ.Ext.extend(CQ.Ext.form.Checkbox, {
    constructor:function(config) {
        config.listeners = {
            check:function(cb, check) {
                var dialog = cb.findParentByType("dialog");
                if (check) {
                    dialog.find("name", "./syncEnabled")[0].setValue("on");
                } else {
                    dialog.find("name", "./syncEnabled")[0].setValue("off");
                }
            },
            loadcontent:function(field, record, path) {
                var dialog = field.findParentByType("dialog");
                if (record.data.syncEnabled === "off") {
                    dialog.find("name", "./syncControl")[0].setValue(false);
                }
            }
        };
        CQ.scene7.SyncField.superclass.constructor.call(this, config);
    }
});

CQ.Ext.reg('scene7syncfield', CQ.scene7.SyncField);

CQ.scene7.updateDefaultConfig = function(dialog) {
    // get the value of the default checkbox
    var configControls = dialog.find("name", "./defaultConfiguration");
    if (configControls && configControls[0]) {
        var isDefaultConfig = configControls[0].getValue();
        if (isDefaultConfig) {
            var configPath = dialog.path;

            // if the flag is set, perform a XHR to update the default configuration
            CQ.HTTP.post(configPath + ".config.json", function(options, success, xhr, response) {},
                {
                    "setDefault":"true"
                }, this, true);
        }
    }

    return true;
};

/**
 * Updates the presets for the given S7 config
 */
CQ.scene7.updatePresets = function(resourcePath, callback) {
    if (!callback) {
        callback = function(options, success, xhr, response) {};
    }
    CQ.HTTP.post(resourcePath + ".presets.all.html", callback, {}, this, true);
};

CQ.scene7.updatePreviewServer = function(publishOption, dialog) {

    if (publishOption === 'off') {
        dialog.find("name", "./previewServer")[0].setValue("");
	    dialog.find("name", "./previewServer")[0].itemCt.setDisplayed("none");
    } else if (publishOption === 'on') {
        dialog.find("name", "./previewServer")[0].setValue("");
	    dialog.find("name", "./previewServer")[0].itemCt.setDisplayed("inherit");
    }
};

CQ.scene7.isUploadAndEnabled = function (dialog) {
  	var syncEnabled = dialog.find("name","./syncEnabled");
    return true;
};

CQ.Ext.apply(CQ.Ext.form.VTypes, {
    //  vtype validation function
    scene7Path : function(val) {
        return /^.*\/$/.test(val);
    },
    // vtype Text property: The error text to display when the validation function returns false
    scene7PathText : CQ.I18n.getMessage('Not a valid path. Must end with /'),
    scene7Endpoint : function(val){
        var url = val;
        if ( url.lastIndexOf('/') != url.length )
            url += "/";
        if (! /^(https?:\/\/)?(([\da-z\.-]+)\.([a-z\.]{2,6})|localhost)(:[0-9]{1,5})?([\/\w \.-]*)*\/?$/.test(url))
            return false;

        // parsing the port out of the URL and check if it's range is correct
        var tokens=url.split(":");
        var lastToken = tokens[tokens.length-1];
        var port = lastToken.substring(0, lastToken.indexOf('/'));
        if (port < 0 || port > 65535)
            return false;

        return true;
    },
    scene7ConfigTargetPath : function(val) {
        var currentTargetPath = val,
            configsURL = CQ.shared.HTTP.externalize('/etc/cloudservices/scene7.infinity.json'),
            response,
            jsonResponse,
            currentObject,
            page,
            targetPath,
            currentPath = CQ.shared.HTTP.getPath(window.location.href),
            currentResource = currentPath.substring(currentPath.lastIndexOf('/') + 1);
        if (currentTargetPath.lastIndexOf('/') == currentTargetPath.length - 1) {
            currentTargetPath = currentTargetPath.substring(0, currentTargetPath.length - 1);
        }
        response = CQ.shared.HTTP.get(configsURL);
        if (response) {
            jsonResponse = JSON.parse(response.body);
            if (jsonResponse) {
                for (prop in jsonResponse) {
                    if (prop == currentResource) {
                        continue;
                    }
                    currentObject = jsonResponse[prop];
                    page = currentObject['jcr:content'];
                    if (page && page['sling:resourceType'] && page['sling:resourceType'] === 'dam/components/scene7/scene7page') {
                        targetPath = page['targetPath'];
                        if (targetPath && targetPath.lastIndexOf('/') == targetPath.length - 1) {
                            targetPath = targetPath.substring(0, targetPath.length - 1);
                        }
                        if (currentTargetPath === targetPath) {
                            return false;
                        }
                    }
                }
            }
        }
        return true;
    },
    scene7ConfigTargetPathText : CQ.I18n.getMessage('A previously existing configuration uses the same target path.')

});

// Video Viewer Preset for 6.0 SP2 FP-6399
CQ.scene7.videoPreset = {};

CQ.scene7.videoPreset.setVideoPreset = function(panel) {


 	var selectedViewerPresetArray = panel.find("name", "./s7ViewerPreset");
    var selectedViewerPreset = '';
    if (selectedViewerPresetArray && selectedViewerPresetArray.length > 0) {
        selectedViewerPreset = selectedViewerPresetArray[0].getValue();
    }
    selectedViewerPresetArray[0].setValue(selectedViewerPreset);

    var viewerPresetComboArray = panel.find("name", "viewerPresetCombo");
    var viewerPresetComboWidget = '';
    if (viewerPresetComboArray && viewerPresetComboArray.length > 0) {
		viewerPresetComboWidget = viewerPresetComboArray[0];
    }

    var cloudConfigComboArray = panel.find("name", "S7ViewerPresetConfigSelector");
    var cloudConfigComboWidget = '';
    if (cloudConfigComboArray && cloudConfigComboArray.length > 0) {
        cloudConfigComboWidget = cloudConfigComboArray[0];
    }

    CQ.scene7.videoPreset.loadS7VideoViewerPresets(cloudConfigComboWidget.getValue(),selectedViewerPreset,viewerPresetComboArray[0]);
}

CQ.scene7.videoPreset.initVideoPresets = function(panel) {

    var viewerPresetsPanel = panel.find("name", "viewerPresetsHbox");
    if (viewerPresetsPanel && viewerPresetsPanel.length > 0) {
    viewerPresetsPanel = viewerPresetsPanel[0];
    viewerPresetsPanel.removeAll();

    var selectedViewerPresetArray = panel.find("name", "./s7ViewerPreset");
    var selectedViewerPreset = '';
    if (selectedViewerPresetArray && selectedViewerPresetArray.length > 0) {
        selectedViewerPreset = selectedViewerPresetArray[0].getValue();
    }

    var viewerPresetSelectWidget = new CQ.form.Selection({
        type: 'select',
        name: 'viewerPresetCombo',
        fieldLabel: CQ.I18n.getMessage('Viewer Preset'),
        fieldDescription: CQ.I18n.getMessage("Viewer Preset to use when rendering video"),
        defaultValue: "None",
        listeners: {
            selectionchanged : function(select, value, isChecked ) {
                if (selectedViewerPresetArray && selectedViewerPresetArray.length > 0) {
                    selectedViewerPresetArray[0].setValue(value);
                }
            }
        },
        options: [
            { text: 'None', value: ''},
        ]
    });

    // init S7 config selector
    var s7CloudConfigCombo = new CQ.cloudservices.Scene7CloudConfigurationCombo({
        "fieldLabel": CQ.I18n.getMessage("Scene7 Configuration"),
        "fieldDescription": CQ.I18n.getMessage("Scene7 Configuration used to fetch the active viewer presets from SPS"),
        "rootPath": "/etc/cloudservices/scene7",
        "name": "S7ViewerPresetConfigSelector",
        "selectFirst": true,
        "clearEnabled": false,
        "valueNotFoundText": CQ.I18n.getMessage("None"),
        "width": 200,
        "tpl":new CQ.Ext.XTemplate(
            '<tpl for=".">',
            '<div class="workflow-model-item x-combo-list-item">',
            '<div class="workflow-model-title">{title:this.formatStr}</div>',
            '<div style="clear:both"></div>',
            '</div>',
            '</tpl>',
            '<div style="height:5px;overflow:hidden"></div>',
            {
                formatStr:function(v) {
                    return (v!== null) ? v : "";
                }
            }
        ),
        "listeners": {
            select: function (combo, record, index ) {
                var selectedConfig = combo.getValue();
                CQ.scene7.videoPreset.loadS7VideoViewerPresets(selectedConfig, selectedViewerPreset, viewerPresetSelectWidget);
            },
            change: function(store, newValue, oldValue ) {
                CQ.scene7.videoPreset.loadS7VideoViewerPresets(newValue, selectedViewerPreset, viewerPresetSelectWidget);
            }
        }
    });

    viewerPresetsPanel.add(s7CloudConfigCombo);
    viewerPresetsPanel.add(viewerPresetSelectWidget);
    }        
}

// load S7 preset
CQ.scene7.videoPreset.loadS7VideoViewerPresets = function(s7ConfigPath, currentPreset, presetSelectWidget) {

    if (!s7ConfigPath
        || !presetSelectWidget) {
        return;
    }

    CQ.scene7.videoPreset.populateS7VideoViewerPresets(s7ConfigPath + "/jcr:content.presets.viewer.json",
        currentPreset, presetSelectWidget, "settings");
};

CQ.scene7.videoPreset.populateS7VideoViewerPresets = function( presetsEndpoint,
                                                               currentViewerPresetValue,
                                                               presetSelectWidget,
                                                               presetNameJSONKey ) {
    presetSelectWidget.presetData = [];
    // Load the viewer presets
    CQ.HTTP.get(presetsEndpoint, function(options, success, xhr, response) {
        var newPresetOptions = [{
            text: 'None',
            value: ''}];
        if (success) {
            var jsonResponse = JSON.parse(xhr.responseText);
            if (jsonResponse && jsonResponse.length ) {
                for (var viewerPresetIdx = 0 ; viewerPresetIdx < jsonResponse.length ; viewerPresetIdx++) {
                    var viewerPresetItem = jsonResponse[viewerPresetIdx];
                    if (viewerPresetItem[presetNameJSONKey]) {

                        var viewerPresetConfig = viewerPresetItem['settings']['vt']
                        if ( viewerPresetConfig === 'VideoVirtual' ) {

                       	 	var presetFullName = viewerPresetItem['text'];
                            var presetFullValue = viewerPresetItem['config'];

                        	presetSelectWidget.presetData.push({
                            	text: presetFullName,
                            	value: presetFullValue,
                            	assetType: viewerPresetConfig });
                        }
                    }
                }
            }
        }

        CQ.scene7.videoPreset.renderS7VideoViewerPreset(currentViewerPresetValue, presetSelectWidget);
    });
};

CQ.scene7.videoPreset.renderS7VideoViewerPreset = function (currentViewerPresetValue, presetSelectWidget) {

    var newPresetOptions = [{
        text: 'None',
        value: ''}];

    var presetData = presetSelectWidget.presetData;
    for (var viewerPresetIdx = 0 ; viewerPresetIdx < presetData.length ; viewerPresetIdx++) {
        var presetItem = presetData[viewerPresetIdx];
        newPresetOptions.push({
                text: presetItem.text,
                value: presetItem.value});
    }

    // sort presets by name
    newPresetOptions.sort(
        function(a,b) {
       	    return (a.text > b.text) ? 1 : ((b.text > a.text) ? -1 : 0);
        }
    );
	
    presetSelectWidget.setOptions(newPresetOptions);

    if (currentViewerPresetValue) {
        presetSelectWidget.setValue(currentViewerPresetValue);
    }
}