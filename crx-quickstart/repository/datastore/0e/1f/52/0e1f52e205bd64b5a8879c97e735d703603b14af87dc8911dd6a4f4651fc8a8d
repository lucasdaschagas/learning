/*!************************************************************************
*
* ADOBE CONFIDENTIAL
* ___________________
*
*  Copyright 2013 Adobe Systems Incorporated
*  All Rights Reserved.
*
* NOTICE:  All information contained herein is, and remains
* the property of Adobe Systems Incorporated and its suppliers,
* if any.  The intellectual and technical concepts contained
* herein are proprietary to Adobe Systems Incorporated and its
* suppliers and are protected by trade secret or copyright law.
* Dissemination of this information or reproduction of this material
* is strictly forbidden unless prior written permission is obtained
* from Adobe Systems Incorporated.
**************************************************************************/
if(typeof s7viewers == "undefined") {
	s7viewers = {};
}else if(typeof s7viewers != "object") {
	throw new Error("Cannot initialize a root 's7viewers' package. s7viewers is not an object");
}

if(!s7viewers.eCatalogViewer) {
	(function(){
		var s7sdk;
		s7viewers.eCatalogViewer = function (inObj) {
			this.sdkBasePath = '../../s7sdk/3.12/';
			this.viewerFileName = "eCatalogViewer.js";
			this.containerId = null;
			this.params = {};
			this.handlers = [];		
			this.onInitComplete = null;
			this.onInitFail = null;
			this.initializationComplete = false;
			this.initCalled = false;
			this.firstMediasetParsed = false;
			this.isDisposed = false;
			this.utilsScriptElm = null;
			this.fixinputmarker = null;
			this.sdkProvided = false;			
			this.lockurldomains = true;
			
			if (typeof inObj == "object"){
				if (inObj.containerId) {
					this.setContainerId(inObj.containerId)
				}
				if (inObj.params) {
					for(var param in inObj.params) {
						if(inObj.params.hasOwnProperty(param) && inObj.params.propertyIsEnumerable(param)) {
							this.setParam(param,inObj.params[param]);
						}
					}
				}
				if (inObj.handlers) {
					this.setHandlers(inObj.handlers);
				}
				if (inObj.localizedTexts) {
					this.setLocalizedTexts(inObj.localizedTexts);
				}
			}			
		}

		s7viewers.eCatalogViewer.cssClassName = "s7ecatalogviewer";

		s7viewers.eCatalogViewer.prototype.modifiers = {
		};

		s7viewers.eCatalogViewer.prototype.setContainerId = function (inElemId) {
			if (this.isDisposed) return;
			this.containerId = inElemId || null;
		}
		
		s7viewers.eCatalogViewer.getCodeBase = function() {
			var contentUrl = "";
			var viewerPath = "";
			var scriptTags = null;
			if (document.scripts){
				scriptTags = document.scripts;
			} else {
				scriptTags = document.getElementsByTagName("script");
			}

			for(var i=0; i<scriptTags.length;i++){
				var src = scriptTags[i].src;
				var result = /^\s*(http[s]?:\/\/[^\/]*)?(.*)(\/(js|js_orig)\/eCatalogViewer\.js)/.exec(src);
				if (result && result.length == 5) {
					if ( typeof result[1] !== 'undefined' ) {
						contentUrl = result[1];
					}
					contentUrl += result[2];
					viewerPath = src;
					break;
				 }
			}
			if ((contentUrl != '') && (contentUrl.lastIndexOf('/') != contentUrl.length - 1)) {
				contentUrl += '/';
			}
			
			var codebaseRegEx = /\/etc\/dam\/viewers\//;
			s7viewers.eCatalogViewer.codebase = {"contentUrl": contentUrl, "isDAM": codebaseRegEx.test(viewerPath)};
			
		};
		s7viewers.eCatalogViewer.getCodeBase();
		
		s7viewers.eCatalogViewer.prototype.getContentUrl = function () {
			return s7viewers.eCatalogViewer.codebase.contentUrl;
		};

		s7viewers.eCatalogViewer.prototype.symbols = {
			"Container.LABEL":"Ecatalog viewer",
			"$CONTAINER_ID$_rightButton.PanRightButton.TOOLTIP":"Next",
			"$CONTAINER_ID$_leftButton.PanLeftButton.TOOLTIP":"Previous",
			"$CONTAINER_ID$_lastPageButton.PanRightButton.TOOLTIP":"Last Page",
			"$CONTAINER_ID$_firstPageButton.PanLeftButton.TOOLTIP":"First Page",
			"$CONTAINER_ID$_toolBarRightButton.PanRightButton.TOOLTIP":"Next",
			"$CONTAINER_ID$_toolBarLeftButton.PanLeftButton.TOOLTIP":"Previous",
			"$CONTAINER_ID$_secondaryLastPageButton.PanRightButton.TOOLTIP":"Last Page",
			"$CONTAINER_ID$_secondaryFirstPageButton.PanLeftButton.TOOLTIP":"First Page"
		};

		s7viewers.eCatalogViewer.prototype.includeViewer = function () {
			s7sdk.Util.lib.include("s7sdk.set.MediaSet");
			s7sdk.Util.lib.include("s7sdk.set.PageView");
			s7sdk.Util.lib.include("s7sdk.set.ThumbnailGridView");		
			s7sdk.Util.lib.include("s7sdk.common.Button");
			s7sdk.Util.lib.include("s7sdk.common.Container");
			s7sdk.Util.lib.include("s7sdk.common.ControlBar");
			s7sdk.Util.lib.include("s7sdk.image.ImageMapEffect");
			s7sdk.Util.lib.include("s7sdk.info.InfoPanelPopup");		
			s7sdk.Util.lib.include("s7sdk.share.Share");
			s7sdk.Util.lib.include("s7sdk.set.TableOfContents");
			s7sdk.Util.lib.include("s7sdk.favorites.FavoritesEffect");
			s7sdk.Util.lib.include("s7sdk.favorites.FavoritesMenu");
			s7sdk.Util.lib.include("s7sdk.favorites.FavoritesView");

			this.trackingManager = new s7sdk.TrackingManager(); // needs to be created first to track LOAD event

			this.s7params = new s7sdk.ParameterManager(null,null,{"asset" : "MediaSet.asset", "align" : "ThumbnailGridView.align"},this.getContentUrl()+"eCatalogViewer_dark.css", this.lockurldomains);
			var viewerName = ""; 
			if (this.s7params.params.config && (typeof(this.s7params.params.config) == "string")) {
				viewerName = ",";
				if (this.s7params.params.config.indexOf("/") > -1) {
					viewerName += this.s7params.params.config.split('/')[1];
				} else 
					viewerName += this.s7params.params.config;
			}
			this.s7params.setViewer("507,5.17.1" + viewerName);

			this.s7params.setDefaultLocalizedTexts(
				this.processLocalizationData({
				"en": this.symbols,
				defaultLocale: "en"
				})
			);
			
			for(var prm in this.params){
				if (prm != "localizedtexts"){
					this.s7params.push(prm, this.params[prm]);
				}else{
					this.s7params.setLocalizedTexts(this.processLocalizationData(this.params[prm]));
				}
			}

			this.container = null;
			this.pageView = null;
			this.gridView = null;
			this.zoomInButton = null;
			this.zoomOutButton = null;
			this.zoomResetButton = null;
			this.thumbnailPageButton = null;
			this.leftButton = null;
			this.rightButton = null;
			this.firstPageButton = null;
			this.lastPageButton = null;
			this.toolBarLeftButton = null;
			this.toolBarRightButton = null;
			this.mediaSet = null; 
			this.fullScreenButton = null;
			this.infoPanelPopup = null;
			this.imageMapEffect = null;
			this.primaryControls = null;
			this.secondaryControls = null;
			this.assetLength = null;
			this.marginTop = null;
			this.marginBottom = null;
			this.marginLeft = null;
			this.marginRight = null;
			//div containers for buttons
			this.divLeftButton = null;
			this.divRightButton = null;
			this.divFirstPageButton = null;
			this.divLastPageButton = null;
			this.divToolBarLeftButton = null;
			this.divToolBarRightButton = null;
			//page indicator
			this.pageIndicator = null;
			this.secondaryPageIndicator = null;
			//initial frame
			if (this.s7params.params.initialframe){
				this.initialFrame = Number(this.s7params.params.initialframe.split(",")[0]) || 0;
				this.initialPage = Number(this.s7params.params.initialframe.split(",")[1]) || 0;
			}else{
				this.initialFrame = 0;
				this.initialPage = 0;
			}
			this.lastKnownState = {
				frameIndex : (this.initialFrame > 0)? this.initialFrame : 0,
				pageIndex : (this.initialPage > 0)? this.initialPage : 0,
				orientation: (typeof this.getOrientation() != "undefined") ?  this.getOrientation() : 90
			};
			//create div for open thumbnail-grid
			this.thumbnailDiv = null;
			//visibility manager
			this.visibilityManager = null;
			//portraitFrames=split|solid modifier, default "split"
			this.splitFrames = (this.s7params.params.portraitframes == "split") ? true : (this.s7params.params.portraitframes == "solid") ? false : true;
			this.s7params.push("MediaSet.enableOrientation", this.splitFrames ? "true" : "false");
			this.mediaSetDesc = null; 
			this.pageViewChanged = false;
			this.socialShare = null;
			this.download = null;
			this.print = null;
			this.emailShare = null;
			this.embedShare = null;
			this.linkShare = null;
			this.twitterShare = null;
			this.facebookShare = null;
			this.divSecondaryLastPageButton = null;
			this.secondaryFirstPageButton = null;
			this.secondaryLastPageButton = null;
			this.secondaryZoomResetButton = null;
			this.closeButton = null;
			this.tableOfContents = null;
			this.autoHideToC = (this.s7params.params.autohidetoc == "1" || this.s7params.params.autohidetoc == "true" || !this.s7params.params.autohidetoc) ? true :false;
			this.tocAvailable = true;
			this.downloadAvailable = true;
			//Favorites components
			this.favoritesEffect = null;
			this.favoritesView = null;
			this.favoritesMenu = null;
			this.addFavoriteButton = null;
			this.removeFavoriteButton = null;
			this.viewAllFavoriteButton = null;
			this.isTriggeredByFavoriteSelection = false;
			this.ignoreZoomNotification = false;
			this.isOrientationMarkerForcedChanged = false;

			var self = this;
			var containerDivID = this.containerId + "_cont";
			var primaryControlsDivID = this.containerId + "_controls";	
			
			function initViewer(){
				
				self.s7params.push("aemmode", s7viewers.eCatalogViewer.codebase.isDAM  ? "1" : "0");
				
				if (s7sdk.browser.supportsTouch())	self.s7params.push("ControlBar.transition", ",-1"); //control bar always visible on touch devices
				if (s7sdk.browser.device.name == "desktop") self.s7params.push("PageView.singleclick", "zoomReset"); //singleclick and doubleclick for desktop have specific behavior
				if (s7sdk.browser.device.name == "desktop") self.s7params.push("PageView.doubleclick", "reset");
				self.s7params.push("ImageMapEffect.rollover", "0"); //Info panel should appear by clicking the image map.
				self.s7params.push('ThumbnailGridView.align', 'left');		
				self.s7params.push('SocialShare.bearing', 'fit-vertical');	
				self.s7params.push('TableOfContents.bearing', 'fit-vertical');	
				self.s7params.push('FavoritesMenu.bearing', 'fit-vertical');	

				/*get fixinputmarker*/
				var fixinputmarkerParam = self.getParam("fixinputmarker");
				if (fixinputmarkerParam) {
					self.fixinputmarker = (fixinputmarkerParam == "s7touchinput" || fixinputmarkerParam == "s7mouseinput") ? self.fixinputmarker = fixinputmarkerParam : null;
				};

				var urlParam = self.getURLParameter("fixinputmarker");
				if (urlParam){
					self.fixinputmarker = (urlParam == "s7touchinput" || urlParam == "s7mouseinput") ? self.fixinputmarker = urlParam : null;;
				};
				
				if (self.fixinputmarker){
					if(self.fixinputmarker === "s7mouseinput"){
						self.addClass(self.containerId,"s7mouseinput");
					}else if(self.fixinputmarker === "s7touchinput"){
						self.addClass(self.containerId,"s7touchinput");
					}
				}else{
					if (s7sdk.browser.supportsTouch()){
						self.addClass(self.containerId,"s7touchinput");
				}else{
						self.addClass(self.containerId,"s7mouseinput");
					}
				}

				var presetClasses = self.s7params.get("presetClasses");
				if (presetClasses && presetClasses.length > 0) {
					presetClasses.forEach(function(presetClass) {
						self.addClass(self.containerId, presetClass);
					});
				}
				
				self.parseMods();

				self.container = new s7sdk.Container(self.containerId, self.s7params, containerDivID);
				if(self.container.isInLayout()){
					completeInitViewer();
				} else {
					self.container.addEventListener(s7sdk.event.ResizeEvent.ADDED_TO_LAYOUT, completeInitViewer, false);
				}
			}
			
			function completeInitViewer(){
				self.container.removeEventListener(s7sdk.event.ResizeEvent.ADDED_TO_LAYOUT, completeInitViewer, false);

				// work-around for webkit issue with applying height:100% to the containing element
				var containerDiv = document.getElementById(self.containerId);
				var tempMinHeight = containerDiv.style.minHeight;
				containerDiv.style.minHeight = "1px";

				var testdiv = document.createElement("div");
				testdiv.style.position = "relative";
				testdiv.style.width = "100%";
				testdiv.style.height = "100%";
				containerDiv.appendChild(testdiv);
				var emptyViewerHeight = testdiv.offsetHeight;
				if (testdiv.offsetHeight <= 1){
					containerDiv.style.height = "100%";
					emptyViewerHeight = testdiv.offsetHeight;
				}
				containerDiv.removeChild(testdiv);
				containerDiv.style.minHeight = tempMinHeight;

				var responsive = false;
				switch(self.s7params.get("responsive", "auto")){
					case "fit":
						responsive = false;
						break;
					case "constrain":
						responsive = true;
						break;
					default :
						responsive = emptyViewerHeight == 0;
						break;
				}
				self.updateCSSMarkers();
				self.updateOrientationMarkers();
				if(self.container.isFixedSize()) { // free
					self.viewerMode = "fixed";
				} else {
					if(responsive) { // restrict
						self.viewerMode = "ratio";
					} else {
						self.viewerMode = "free";
					}
				}
				
				self.mediaSet = new s7sdk.MediaSet(null, self.s7params, self.containerId+"_mediaSet");			
				self.trackingManager.attach(self.mediaSet);
				self.gridView = new s7sdk.set.ThumbnailGridView(self.container, self.s7params, self.containerId+"_gridView");
				self.gridView.setCSS(".s7thumbnailgridview", "visibility", "hidden");
				// store margins of gridView
				self.marginTop = s7sdk.Util.css.getCss("s7thumbnailgridview", "margin-top",null, s7viewers.eCatalogViewer.cssClassName).split("px")[0];
				self.marginBottom = s7sdk.Util.css.getCss("s7thumbnailgridview", "margin-bottom",null, s7viewers.eCatalogViewer.cssClassName).split("px")[0];
				self.marginLeft = s7sdk.Util.css.getCss("s7thumbnailgridview", "margin-left",null, s7viewers.eCatalogViewer.cssClassName).split("px")[0];
				self.marginRight = s7sdk.Util.css.getCss("s7thumbnailgridview", "margin-right",null, s7viewers.eCatalogViewer.cssClassName).split("px")[0];

				self.pageView = new s7sdk.set.PageView(self.container, self.s7params, self.containerId+"_pageView");
				self.trackingManager.attach(self.pageView);
				// AppMeasurementBridge only available when config2 modifier is present
				self.trackingManager.setCallback(proxyTrack);
				if ((typeof(AppMeasurementBridge) == "function") && (self.isConfig2Exist == true)){
					self.appMeasurementBridge = new AppMeasurementBridge(self.trackingParams);
				}
				//create container and bottom controlbar (for mobile phones)
				self.divSecondaryControls = document.createElement('div');
				self.divSecondaryControls.setAttribute("id",self.containerId+"_divSecondaryControls");
				self.divSecondaryControls.className = "s7secondarycontrols";
				
				var ctnr = document.getElementById(self.container.getInnerContainerId());
				ctnr.appendChild(self.divSecondaryControls);
				
				//create secondary control bar - for mobile phones only
				self.s7params.push(self.containerId+"_secondaryControls.transition", "none,-1");
				self.secondaryControls = new s7sdk.common.ControlBar(self.containerId+"_divSecondaryControls", self.s7params, self.containerId+"_secondaryControls");
				//create primary control bar			
				self.primaryControls = new s7sdk.common.ControlBar(self.container, self.s7params, primaryControlsDivID);
				self.primaryControls.attachView(self.pageView, false);
				self.primaryControls.attachView(self.gridView, false);
				self.primaryControls.attach(self.secondaryControls);

				self.gridView.resize(self.container.getWidth() - self.marginLeft - self.marginRight, self.container.getHeight() - self.primaryControls.getHeight() - self.marginTop - self.marginBottom);
				self.imageMapEffect = new s7sdk.image.ImageMapEffect(self.containerId+"_pageView", self.s7params, self.containerId+"_imageMapEffect");
				self.primaryControls.attachView(self.imageMapEffect, false);
				self.infoPanelPopup = new s7sdk.info.InfoPanelPopup(self.container, self.s7params, self.containerId+"_infoPanelPopup");
				self.infoPanelPopup.addEventListener(s7sdk.event.PopupEvent.POPUP_CLOSED, onInfoClose);
				//create container for left button
				self.divLeftButton = document.createElement('div');
				self.divLeftButton.setAttribute("id",self.containerId+"_divLeftButton");
				self.divLeftButton.className = "s7ecatleftbutton";
				
				ctnr.appendChild(self.divLeftButton);
				//create left button
				self.leftButton = new s7sdk.PanLeftButton(self.containerId+"_divLeftButton", self.s7params, self.containerId+"_leftButton");
				//attach left button to control bar for hide/show
				self.primaryControls.attach(self.leftButton);
				self.leftButtonLeftPos = s7sdk.Util.getStyle(document.getElementById(self.containerId+"_leftButton"), "left");

				//create container for right button
				self.divRightButton = document.createElement('div');
				self.divRightButton.setAttribute("id",self.containerId+"_divRightButton");
				self.divRightButton.className = "s7ecatrightbutton";
				
				ctnr.appendChild(self.divRightButton);

				//create right button
				self.rightButton = new s7sdk.PanRightButton(self.containerId+"_divRightButton", self.s7params, self.containerId+"_rightButton");
				//attach left button to control bar for hide/show
				self.primaryControls.attach(self.rightButton);
				//create buttons (toolbar)
				self.zoomInButton = new s7sdk.ZoomInButton(primaryControlsDivID, self.s7params, self.containerId+"_zoomInButton");
				self.zoomOutButton = new s7sdk.ZoomOutButton(primaryControlsDivID, self.s7params, self.containerId+"_zoomOutButton");
				//create zoomResetButton. 
				self.zoomResetButton = new s7sdk.ZoomResetButton(primaryControlsDivID, self.s7params, self.containerId+"_zoomResetButton");
				//create secondary zoomResetButton. 
				self.secondaryZoomResetButton = new s7sdk.ZoomResetButton(self.containerId+"_secondaryControls", self.s7params, self.containerId+"_secondaryZoomResetButton");
				//
				self.thumbnailPageButton = new s7sdk.common.ThumbnailPageButton(primaryControlsDivID, self.s7params, self.containerId + "_thumbnailPageButton");
				self.tableOfContents = new s7sdk.set.TableOfContents(primaryControlsDivID, self.s7params, self.containerId+"_tableOfContents");
				
				var tocDisplay = s7sdk.Util.getStyle(document.getElementById(self.containerId+"_tableOfContents"), "display");
				self.isInline = tocDisplay == "inline-block";
				if (self.autoHideToC) {
					if (!self.isInline) {
						var tocLeft = s7sdk.Util.getStyle(document.getElementById(self.containerId+"_tableOfContents"),"left");
						var tocTop = s7sdk.Util.getStyle(document.getElementById(self.containerId+"_tableOfContents"),"top");
						if ((parseInt(tocLeft) == "0" && 
							 parseInt(tocTop) == "0") ||
							(tocLeft.toLowerCase() == "auto" && 
							 tocTop.toLowerCase() == "auto")) {
								document.getElementById(self.containerId+"_tableOfContents").style.display = "none";
								self.tocAvailable = false;
						} 
					}
				}

				self.download = new s7sdk.common.Download(primaryControlsDivID, self.s7params, self.containerId + "_download");
				
				if (s7sdk.browser.device.name == "desktop" && !(s7sdk.browser.name == "ie" && s7sdk.browser.version.major == 9) && self.isInline){
					self.print = new s7sdk.share.Print(primaryControlsDivID, self.s7params, self.containerId + "_print");
				}

				var downloadDisplay = s7sdk.Util.getStyle(document.getElementById(self.containerId+"_download"), "display");
				if (downloadDisplay != "inline-block") {
					self.downloadAvailable = false;
					self.download.setCSS(".s7download", "display", "none");
				} else {
					self.download.addEventListener(s7sdk.event.StatusEvent.NOTF_ASSET_METADATA_READY,onDownLoadReady, false);
				} 

				if (self.isInline){
					self.favoritesMenu = new s7sdk.favorites.FavoritesMenu(primaryControlsDivID, self.s7params, self.containerId + "_favoritesMenu");
					if (!s7sdk.favorites.FavoritesEffect.supportsHTML5Storage()) {
						self.favoritesMenu.setCSS(".s7favoritesmenu", "display", "none");
					}
					self.favoritesMenu.addEventListener("click",function(event){
						//
					});
					self.addFavoriteButton = new s7sdk.favorites.AddFavoriteButton(self.containerId + "_favoritesMenu", self.s7params, self.containerId + "_addFavoriteButton");
					self.addFavoriteButton.addEventListener("click",function(event){
						hideFavoritesView();
						self.primaryControls.detach(self.favoritesView);
						self.favoritesMenu.hidePanel();
						self.removeFavoriteButton.setSelected(false);
						self.viewAllFavoriteButton.setSelected(false);
						if (self.addFavoriteButton.isSelected()){
							self.favoritesEffect.setMode(s7sdk.favorites.FavoritesEffect.MODE_ADD);//add
							if (self.imageMapEffect && self.imageMapEffect.getOverlaysVisible()){
								self.imageMapEffect.setOverlaysVisible(false);
							}
							if (event.target.inKey){
								self.favoritesEffect.addRemoveFavorite();
							}
						}else{
							self.favoritesEffect.setMode(s7sdk.favorites.FavoritesEffect.MODE_VIEW);//vewAll
							if (self.imageMapEffect && !self.imageMapEffect.getOverlaysVisible()){
								self.imageMapEffect.setOverlaysVisible(true);
							}
						}
						self.favoritesMenu.focus();
					});
					self.removeFavoriteButton = new s7sdk.favorites.RemoveFavoriteButton(self.containerId + "_favoritesMenu", self.s7params, self.containerId + "_removeFavoriteButton");
					self.removeFavoriteButton.addEventListener("click",function(event){
						hideFavoritesView();
						self.primaryControls.detach(self.favoritesView);
						self.favoritesMenu.hidePanel();
						self.addFavoriteButton.setSelected(false);
						self.viewAllFavoriteButton.setSelected(false);
						if (self.removeFavoriteButton.isSelected()){
							self.favoritesEffect.setMode(s7sdk.favorites.FavoritesEffect.MODE_REMOVE);//remove
							if (self.imageMapEffect && self.imageMapEffect.getOverlaysVisible()){
								self.imageMapEffect.setOverlaysVisible(false);
							}
							if (event.target.inKey){
								self.favoritesEffect.addRemoveFavorite();
							}
						}else{
							self.favoritesEffect.setMode(s7sdk.favorites.FavoritesEffect.MODE_VIEW);//vewAll
							if (self.imageMapEffect && !self.imageMapEffect.getOverlaysVisible()){
								self.imageMapEffect.setOverlaysVisible(true);
							}
						}
						self.favoritesMenu.focus();
					});
					self.viewAllFavoriteButton = new s7sdk.favorites.ViewAllFavoriteButton(self.containerId + "_favoritesMenu", self.s7params, self.containerId + "_viewAllFavoriteButton");
					self.viewAllFavoriteButton.addEventListener("click",function(event){
						self.addFavoriteButton.setSelected(false);
						self.removeFavoriteButton.setSelected(false);
						self.favoritesEffect.setMode(s7sdk.favorites.FavoritesEffect.MODE_VIEW);//vewAll
						self.favoritesMenu.hidePanel();
						if (self.viewAllFavoriteButton.isSelected()){
							var favs = [];
							self.favoritesView.setFavorites(favs);
							favs = self.favoritesEffect.getFavorites();
							self.favoritesView.setFavorites(favs);
							self.favoritesView.setCSS(".s7favoritesview", "visibility", "inherit");
							self.favoritesView.show();	
							var secondaryHeight = (s7sdk.Util.getStyle(document.getElementById(self.containerId+"_secondaryControls"), "display") != "none") ? self.secondaryControls.getHeight():0;
							var primaryTop = parseInt(s7sdk.Util.getStyle(document.getElementById(primaryControlsDivID), "top"));
							if (secondaryHeight > 0 || (primaryTop == 0)){
								self.favoritesView.setCSS(".s7favoritesview", "top", self.primaryControls.getHeight()+primaryTop+"px");
							}else{
								self.favoritesView.setCSS(".s7favoritesview", "top", "auto");
							}
							self.favoritesView.resize(self.favoritesView.getWidth(), self.favoritesView.getHeight());

							self.leftButton.setCSS(".s7panleftbutton", "left", s7sdk.Util.getStyle(document.getElementById(self.containerId+"_favoritesView"), "width"));
							self.primaryControls.attach(self.favoritesView);
							self.favoritesView.focus();	

							//code to show favorites
							var pageViewCapabilityState = self.pageView.getCapabilityState();
							var isReset = !pageViewCapabilityState.hasCapability(s7sdk.PageViewCapabilityState.ZOOM_RESET);
							if (!isReset) {
								self.ignoreZoomNotification = true;
							}
							self.pageView.zoomReset();

						}else{
							self.favoritesView.blur();	
							hideFavoritesView();
							self.primaryControls.detach(self.favoritesView);
						}
					});

					self.favoritesEffect = new s7sdk.favorites.FavoritesEffect(self.containerId+"_pageView", self.s7params, self.containerId+"_favoritesEffect");
					self.favoritesEffect.addEventListener(s7sdk.event.FavoritesEvent.FAVORITES_CHANGED, onFavoritesChanged);
					self.favoritesEffect.setMode(s7sdk.favorites.FavoritesEffect.MODE_VIEW);//vewAll
					self.primaryControls.attach(self.favoritesEffect);

					self.favoritesView = new s7sdk.favorites.FavoritesView(self.container, self.s7params, self.containerId+"_favoritesView");
					var parent = document.getElementById(primaryControlsDivID).parentNode;
					var next = document.getElementById(primaryControlsDivID).nextSibling;
					if (next) {
						parent.insertBefore(document.getElementById(self.containerId+"_favoritesView"), next);
					} else {
						parent.appendChild(document.getElementById(self.containerId+"_favoritesView"));
					}
					self.favoritesView.setCSS(".s7favoritesview", "visibility", "hidden");
					var secondaryHeight = (s7sdk.Util.getStyle(document.getElementById(self.containerId+"_secondaryControls"), "display") != "none") ? self.secondaryControls.getHeight():0;
					self.favoritesView.resize(self.favoritesView.getWidth(), self.container.getHeight() - self.primaryControls.getHeight() - secondaryHeight);
					var primaryTop = parseInt(s7sdk.Util.getStyle(document.getElementById(primaryControlsDivID), "top"));
					if (secondaryHeight > 0 || (primaryTop == 0)){
						self.favoritesView.setCSS(".s7favoritesview", "top", self.primaryControls.getHeight()+primaryTop+"px");
					}else{
						self.favoritesView.setCSS(".s7favoritesview", "top", "auto");
					}

					self.favoritesView.addEventListener(s7sdk.AssetEvent.ITEM_SELECTED_EVENT, onFavoritesViewSwatchSelect);
					self.primaryControls.attach(self.favoritesView);

				}
				
				//create container for left button
				self.divToolBarLeftButton = document.createElement('div');
				self.divToolBarLeftButton.setAttribute("id",self.containerId+"_divToolBarLeftButton");
				self.divToolBarLeftButton.className = "s7toolbarleftbutton";
				self.divToolBarLeftButton.style.display = "inline-block";
				document.getElementById(primaryControlsDivID).childNodes[0].appendChild(self.divToolBarLeftButton);
				//create toolBarLeftButton
				self.toolBarLeftButton = new s7sdk.PanLeftButton(self.containerId+"_divToolBarLeftButton", self.s7params, self.containerId+"_toolBarLeftButton");

				//create container for first page button
				self.divFirstPageButton = document.createElement('div');
				self.divFirstPageButton.setAttribute("id",self.containerId+"_divFirstPageButton");
				self.divFirstPageButton.className = "s7firstpagebutton";
				self.divFirstPageButton.style.display = "inline-block";
				//secondary
				self.divSecondaryFirstPageButton = document.createElement('div');
				self.divSecondaryFirstPageButton.setAttribute("id",self.containerId+"_divSecondaryFirstPageButton");
				self.divSecondaryFirstPageButton.className = "s7firstpagebutton";			
				self.divSecondaryFirstPageButton.style.display = "inline-block";			
				////
				document.getElementById(primaryControlsDivID).childNodes[0].appendChild(self.divFirstPageButton);
				document.getElementById(self.containerId+"_secondaryControls").childNodes[0].appendChild(self.divSecondaryFirstPageButton);
				//create firstPageButton
				self.firstPageButton = new s7sdk.PanLeftButton(self.containerId+"_divFirstPageButton", self.s7params, self.containerId+"_firstPageButton");
				self.secondaryFirstPageButton = new s7sdk.PanLeftButton(self.containerId+"_divSecondaryFirstPageButton", self.s7params, self.containerId+"_secondaryFirstPageButton");
				
				//create page indicator
				self.pageIndicator = document.createElement('div');
				self.pageIndicator.setAttribute("id",self.containerId+"_pageIndicator");
				self.pageIndicator.className = "s7pageindicator";
				//create secondary pageIndicator
				self.secondaryPageIndicator = document.createElement('div');
				self.secondaryPageIndicator.setAttribute("id",self.containerId+"_secondaryPageIndicator");
				self.secondaryPageIndicator.className = "s7pageindicator";
				//append pageIndicator to primaryControls if desktop or tablet; append to secondaryControls if phone
				document.getElementById(primaryControlsDivID).childNodes[0].appendChild(self.pageIndicator);
				document.getElementById(self.containerId+"_secondaryControls").childNodes[0].appendChild(self.secondaryPageIndicator);

				//create container for lastPageButton
				self.divLastPageButton = document.createElement('div');
				self.divLastPageButton.setAttribute("id",self.containerId+"_divLastPageButton");
				self.divLastPageButton.className = "s7lastpagebutton";
				self.divLastPageButton.style.display = "inline-block";
				document.getElementById(primaryControlsDivID).childNodes[0].appendChild(self.divLastPageButton);
				//secondary
				self.divSecondaryLastPageButton = document.createElement('div');
				self.divSecondaryLastPageButton.setAttribute("id",self.containerId+"_divSecondaryLastPageButton");
				self.divSecondaryLastPageButton.className = "s7lastpagebutton";
				self.divSecondaryLastPageButton.style.display = "inline-block";
				document.getElementById(self.containerId+"_secondaryControls").childNodes[0].appendChild(self.divSecondaryLastPageButton);
				//create lastPageButton
				self.lastPageButton = new s7sdk.PanRightButton(self.containerId+"_divLastPageButton", self.s7params, self.containerId+"_lastPageButton");	
				self.secondaryLastPageButton = new s7sdk.PanRightButton(self.containerId+"_divSecondaryLastPageButton", self.s7params, self.containerId+"_secondaryLastPageButton");

				//create container for right button
				self.divToolBarRightButton = document.createElement('div');
				self.divToolBarRightButton.setAttribute("id",self.containerId+"_divToolBarRightButton");
				self.divToolBarRightButton.className = "s7toolbarrightbutton";
				self.divToolBarRightButton.style.display = "inline-block";
				document.getElementById(primaryControlsDivID).childNodes[0].appendChild(self.divToolBarRightButton);
				//create toolBarRightButton
				self.toolBarRightButton = new s7sdk.PanRightButton(self.containerId+"_divToolBarRightButton", self.s7params, self.containerId+"_toolBarRightButton");				

				if(self.viewerMode == "ratio"){
					containerDiv.style.height = "auto";
				}
				resizeViewer(self.container.getWidth(), self.container.getHeight());

				if ((self.s7params.get("closeButton", "0") == "1") || (self.s7params.get("closeButton", "0").toLowerCase() == "true")){
					//CloseButton
					self.closeButton = new s7sdk.common.CloseButton(self.container, self.s7params, self.containerId + "_closeButton");
					self.closeButton.addEventListener("click", closeWindow);
				}
				/*support for old css.
				special case for smartphones (touch device and 'small' screen).
				*/
				//check if two page indicators are visible
				if (s7sdk.browser.supportsTouch() && getStyleValue(self.pageIndicator,"display") != "none" && getStyleValue(self.secondaryPageIndicator,"display") != "none") {
					self.pageIndicator.style.visibility = "hidden";
				}
				//check if two last Page Buttons are visible
				if (s7sdk.browser.supportsTouch() && s7sdk.Util.getStyle(document.getElementById(self.containerId + "_lastPageButton"),"display") != "none" && s7sdk.Util.getStyle(document.getElementById(self.containerId + "_secondaryLastPageButton"),"display") != "none") {
					self.lastPageButton.setCSS(".s7panrightbutton", "visibility", "hidden");
				}
				//check if two first Page Buttons are visible
				if (s7sdk.browser.supportsTouch() && s7sdk.Util.getStyle(document.getElementById(self.containerId + "_firstPageButton"),"display") != "none" && s7sdk.Util.getStyle(document.getElementById(self.containerId + "_secondaryFirstPageButton"),"display") != "none") {
					self.firstPageButton.setCSS(".s7panleftbutton", "visibility", "hidden");
				}
				//Add VisibilityManager (for touch devices only)
				if (s7sdk.browser.device.name != "desktop") {
					self.visibilityManager = new s7sdk.VisibilityManager();
					self.visibilityManager.reference(self.pageView);
					self.visibilityManager.attach(self.closeButton);
					self.visibilityManager.attach(self.rightButton);
					self.visibilityManager.attach(self.leftButton);
					self.visibilityManager.attach(self.thumbnailPageButton);
					self.visibilityManager.attach(self.firstPageButton);
					self.visibilityManager.attach(self.secondaryLastPageButton);
					self.visibilityManager.attach(self.secondaryFirstPageButton);
					self.visibilityManager.attach(self.lastPageButton);
					self.visibilityManager.attach(self.secondaryZoomResetButton);
					self.visibilityManager.attach(self.zoomInButton);
					self.visibilityManager.attach(self.zoomOutButton);				
					self.visibilityManager.attach(self.primaryControls);
					self.visibilityManager.attach(self.secondaryControls);
				}

				self.socialShare = new s7sdk.share.SocialShare(primaryControlsDivID, self.s7params, self.containerId + "_socialShare");
				
				// Create SocialShare
				self.emailShare = new s7sdk.share.EmailShare(self.containerId + "_socialShare", self.s7params, self.containerId + "_emailShare");
				self.emailShare.addEventListener("click",function(){
					hideSocialSharePanel();
				});
				self.embedShare = new s7sdk.share.EmbedShare(self.containerId + "_socialShare", self.s7params, self.containerId + "_embedShare");
				self.embedShare.addEventListener("click",function(){
					hideSocialSharePanel();
				});
				self.linkShare = new s7sdk.share.LinkShare(self.containerId + "_socialShare", self.s7params, self.containerId + "_linkShare");
				self.linkShare.addEventListener("click",function(){
					hideSocialSharePanel();
				});
				self.twitterShare = new s7sdk.share.TwitterShare(self.containerId + "_socialShare", self.s7params, self.containerId + "_twitterShare");
				self.twitterShare.addEventListener("click",function(){
					hideSocialSharePanel();
				});
				self.facebookShare = new s7sdk.share.FacebookShare(self.containerId + "_socialShare", self.s7params, self.containerId + "_facebookShare"); 
				self.facebookShare.addEventListener("click",function(){
					hideSocialSharePanel();
				});
				/* This block is to disable auto-hide of socialShare panel if mouse cursor is over it.*/


				// TODO: remove s7viewers.s7sdk.share.SocialShareControl.getSocialBtn()after verifying controlbar auto-hide issue has been fixed
				self.primaryControls.attach(self.socialShare);
				if(self.tocAvailable){
					self.primaryControls.attach(self.tableOfContents);
				}
				if(self.favoritesMenu){
					self.primaryControls.attach(self.favoritesMenu);
				}

				self.socialShare.addTrackedComponent(self.secondaryControls);

				// Pass parameters to Social elements
				self.linkShare.setContentUrl(document.URL); 
				self.emailShare.setOriginUrl(window.location.hostname);
				self.emailShare.setContentUrl(document.URL);
				self.fullScreenButton = new s7sdk.common.FullScreenButton(primaryControlsDivID, self.s7params, self.containerId + "_fullScreenButton");
				if (self.container.isPopup() && !self.container.isFixedSize() &&!self.container.supportsNativeFullScreen()) {
					self.fullScreenButton.setCSS(".s7fullscreenbutton", "display", "none");
				}
			
				//replace buttons and controls

				//set "primaryControl" as second child in self.containerId
				document.getElementById(primaryControlsDivID).parentNode.insertBefore(document.getElementById(primaryControlsDivID),document.getElementById(primaryControlsDivID).parentNode.firstChild);
				//set "secondaryControl" as first child in self.containerId
				document.getElementById(self.containerId+"_divSecondaryControls").parentNode.insertBefore(document.getElementById(self.containerId+"_divSecondaryControls"),document.getElementById(self.containerId+"_divSecondaryControls").parentNode.firstChild);

				//set zoomButton's before socialShare
				document.getElementById(self.containerId+"_zoomResetButton").parentNode.insertBefore(document.getElementById(self.containerId+"_zoomResetButton"),document.getElementById(self.containerId + "_socialShare"));
				document.getElementById(self.containerId+"_zoomOutButton").parentNode.insertBefore(document.getElementById(self.containerId+"_zoomOutButton"),document.getElementById(self.containerId + "_zoomResetButton"));
				document.getElementById(self.containerId+"_zoomInButton").parentNode.insertBefore(document.getElementById(self.containerId+"_zoomInButton"),document.getElementById(self.containerId + "_zoomOutButton"));

				// ====================================== Event Listeners ====================================== //
				// Add MediaSet event listeners
				self.mediaSet.addEventListener(s7sdk.AssetEvent.NOTF_SET_PARSED, onSetParsed, false);
				// Add Container event listeners
				self.container.addEventListener(s7sdk.event.ResizeEvent.COMPONENT_RESIZE, onContainerResize,false);
				self.container.addEventListener(s7sdk.event.ResizeEvent.FULLSCREEN_RESIZE, onContainerFullScreen,false);	
				self.container.addEventListener(s7sdk.event.ResizeEvent.SIZE_MARKER_CHANGE, onContainerSizeMarkerChange,false);	
				// Add ZoomInButton event listeners
				self.zoomInButton.addEventListener("click", function(){self.pageView.zoomIn();});
				// Add ZoomOutButton event listeners
				self.zoomOutButton.addEventListener("click", function(){self.pageView.zoomOut();});
				// Add ZoomResetButton event listeners
				self.zoomResetButton.addEventListener("click",function(){self.pageView.zoomReset(); });
				self.secondaryZoomResetButton.addEventListener("click",function(){self.pageView.zoomReset(); });				
				// Add FullScreenButton event listeners
				self.fullScreenButton.addEventListener("click", onFullScreenButtonClick);
				// Add ThumbnailGridView event listeners
				self.gridView.addEventListener(s7sdk.AssetEvent.SWATCH_SELECTED_EVENT, onSwatchSelect);
				self.gridView.addEventListener("keydown",onGridViewKeyDown,false);
				// Add PageView event listener
				self.pageView.addEventListener (s7sdk.event.AssetEvent.ITEM_SELECTED_EVENT, onPageViewChange);
				self.pageView.addEventListener (s7sdk.event.FrameEvent.NOTF_FRAME_TRANSITION_END, onFrameTransitionEnd);
				// Add buttons event listener (change states)
				self.pageView.addEventListener(s7sdk.event.CapabilityStateEvent.NOTF_PAGEVIEW_CAPABILITY_STATE,function(stateEvent){
					if (!self.thumbnailPageButton.isSelected()){
						if (stateEvent.s7event.state.hasCapability(s7sdk.PageViewCapabilityState.ZOOM_IN)){
							self.zoomInButton.activate();
						} else {
							self.zoomInButton.deactivate();
						}
						if (stateEvent.s7event.state.hasCapability(s7sdk.PageViewCapabilityState.ZOOM_OUT)){
							self.zoomOutButton.activate();
						} else {
							self.zoomOutButton.deactivate();						
						}
						if (stateEvent.s7event.state.hasCapability(s7sdk.PageViewCapabilityState.ZOOM_RESET)) {
							self.secondaryZoomResetButton.activate();
							self.zoomResetButton.activate();
						} else {
							self.secondaryZoomResetButton.deactivate();
							self.zoomResetButton.deactivate();
						}
					}
				});

				self.pageView.addEventListener(s7sdk.event.CapabilityStateEvent.NOTF_PAGEVIEW_CAPABILITY_STATE,function(stateEvent){
					 var pageViewCapabilityState = self.pageView.getCapabilityState();
					 var isReset = !pageViewCapabilityState.hasCapability(s7sdk.PageViewCapabilityState.ZOOM_RESET);
					 if (isReset) {
						 self.ignoreZoomNotification = false;
					 }else if (!self.ignoreZoomNotification){
						 if (self.favoritesView){
							hideFavoritesView();
							if (self.viewAllFavoriteButton.isSelected()){
								self.viewAllFavoriteButton.setSelected(false);
							}
							self.primaryControls.detach(self.favoritesView);
						 }
					 }
				});

				// Add ThumbnailPageButton event listeners
				self.thumbnailPageButton.addEventListener("click", onThumbnailPageButtonClick);	
				// Add TableOfContents event listeners
				if (self.tocAvailable){
					self.tableOfContents.addEventListener(s7sdk.AssetEvent.ITEM_SELECTED_EVENT, onTableOfContentSelected);
				}
				// Add listeners for Left and Right Buttons 
				self.leftButton.addEventListener("click", function(){self.pageView.prevPage();});
				self.rightButton.addEventListener("click", function(){self.pageView.nextPage();});
				self.toolBarLeftButton.addEventListener("click", function(){self.pageView.prevPage();});
				self.toolBarRightButton.addEventListener("click", function(){self.pageView.nextPage();});	
				// Add listeners for firstPageButoon and lastPageButton 
				self.firstPageButton.addEventListener("click", function(){self.pageView.setCurrentFrameIndex(0);});
				self.secondaryFirstPageButton.addEventListener("click", function(){self.pageView.setCurrentFrameIndex(0);});
				self.lastPageButton.addEventListener ("click", function(){self.pageView.setCurrentFrameIndex(self.assetLength-1);});
				self.secondaryLastPageButton.addEventListener ("click", function(){self.pageView.setCurrentFrameIndex(self.assetLength-1);});
				// Add event listeners for image map rollover and target events
				self.imageMapEffect.addEventListener(s7sdk.RolloverKeyEvent.ROLLOVER_ACTIVATED,  rolloverKeyHandler, false);
				self.imageMapEffect.addEventListener(s7sdk.RolloverKeyEvent.ROLLOVER_DEACTIVATED,rolloverKeyHandler, false);			
				self.imageMapEffect.addEventListener(s7sdk.RolloverKeyEvent.TARGET_INDEX,rolloverKeyTargetHandler, false);

				function onDownLoadReady(){
					if (self.download.canDownload()){
						self.download.setCSS(".s7download", "display", self.isInline ? "inline-block" : "block");
					}else{
						self.download.setCSS(".s7download", "display", "none");
					}
					self.primaryControls.resize(self.primaryControls.getWidth(), self.primaryControls.getHeight());
				}
				
				function hideSocialSharePanel() {
					if (self.socialShare){
						self.socialShare.hidePanel();
					}
				}
				function hideTableOfContentsPanel() {
					if (self.tableOfContents && self.tocAvailable){
						self.tableOfContents.hidePanel();
					}
				}
				function hideFavoritesMenuPanel() {
					if (self.favoritesMenu){
						self.favoritesMenu.hidePanel();
					}
				}

				function hideFavoritesView() {
					if (self.favoritesView){
						self.favoritesView.hide();
						self.leftButton.setCSS(".s7panleftbutton", "left", self.leftButtonLeftPos);
					}
				}

				if (self.tocAvailable){
					self.tableOfContents.addEventListener("click", function(e){
						hideSocialSharePanel();
						hideFavoritesMenuPanel();
						hideFavoritesView();
					}, false);
					self.tableOfContents.addEventListener("mouseover", function(e){
						hideSocialSharePanel();
						hideFavoritesMenuPanel();
					}, false);
					self.tableOfContents.addEventListener("touchend", function(e){
						hideSocialSharePanel();
						hideFavoritesMenuPanel();
					}, false);
				}
				if (self.socialShare){
					self.socialShare.addEventListener("click", function(e){
						hideTableOfContentsPanel();
						hideFavoritesMenuPanel();
						hideFavoritesView();
					}, false);
					self.socialShare.addEventListener("mouseover", function(e){
						hideTableOfContentsPanel();
						hideFavoritesMenuPanel();
					}, false);
					self.socialShare.addEventListener("touchend", function(e){
						hideTableOfContentsPanel();
						hideFavoritesMenuPanel();
					}, false);
				}
				if (self.favoritesMenu){
					self.favoritesMenu.addEventListener("click", function(e){
						hideSocialSharePanel();
						hideTableOfContentsPanel();
					}, false);
					self.favoritesMenu.addEventListener("mouseover", function(e){
						hideSocialSharePanel();
						hideTableOfContentsPanel();
					}, false);
					self.favoritesMenu.addEventListener("touchend", function(e){
						hideSocialSharePanel();
						hideTableOfContentsPanel();
					}, false);
				}
				

				// ====================================== Event Handlers ====================================== //
				function onSetParsed(e) {
					var vSetDesc = e.s7event.asset;
					var mediaSetDesc;
					var startupIdx = self.lastKnownState.frameIndex;
					var startupPageIdx = self.lastKnownState.pageIndex;
					var mssetName;
						var orientation = self.getOrientation();
					if(vSetDesc instanceof s7sdk.OrientationSetDesc) {
						if(orientation == 0 || orientation == 180){
							mediaSetDesc = vSetDesc.portrait;
							startupIdx = startupIdx != -1 ? vSetDesc.getPortraitIndex(startupIdx)+startupPageIdx : -1;
						} else {
							mediaSetDesc = vSetDesc.landscape;
						}
						mssetName = vSetDesc.landscape.name;
					} else {
						mediaSetDesc = e.s7event.asset;
						mssetName = e.s7event.asset.name;
					}

					var assetRatio;
					var index = (mediaSetDesc.items.length > 1) ? 1 : 0;
					if(self.viewerMode == "ratio"){
						var itm = mediaSetDesc.items[index];
						assetRatio = itm.width/itm.height;
						self.container.setModifier({ "aspect": assetRatio });
					}
					if (mediaSetDesc instanceof s7sdk.MediaSetDesc) {
						self.mediaSetDesc = e.s7event.asset;
						self.assetLength = mediaSetDesc.items.length;

						if(self.downloadAvailable){
							self.download.setMediaSet(self.mediaSetDesc);
						}
						if(self.print){
							self.print.setMediaSet(self.mediaSetDesc);
						}
						if (self.tocAvailable){
							self.tableOfContents.setMediaSet(self.mediaSetDesc);
						}
						if (self.favoritesView){
							self.favoritesView.setMediaSet(self.mediaSetDesc);
						}
						self.gridView.setMediaSet(self.mediaSetDesc);
						self.pageView.setMediaSet(self.mediaSetDesc);
						switch (orientation)
						{   
							case 0://portrait
							case 180://portrait
									if (self.tocAvailable){
										self.tableOfContents.setPortrait();
									}
									self.gridView.setPortrait();
									self.pageView.setPortrait();
								break;

							case -90://landscape
							case 90://landscape
									if (self.tocAvailable){
										self.tableOfContents.setLandscape();
									}
									self.gridView.setLandscape();
									self.pageView.setLandscape();
								break;
							default://landscape
									if (self.tocAvailable){
										self.tableOfContents.setLandscape();
									}
									self.gridView.setLandscape();
									self.pageView.setLandscape();
								break;
						}
						if(startupIdx != -1){
							if(self.print){
								self.print.setCurrentFrameIndex(startupIdx);
							}
							if (self.tocAvailable){
								self.tableOfContents.setCurrentFrameIndex(startupIdx);
							}
							self.gridView.selectSwatch(startupIdx, true);
							self.pageView.setCurrentFrameIndex(startupIdx);
							self.lastKnownState.frameIndex = -1;
							self.setPageIndicator(startupIdx + 1);
						}

						if (("onorientationchange" in window) && s7sdk.browser.device != "") {
							self.orientationListener = function(e){
								self.updateOrientation();
						}
							window.removeEventListener("orientationchange", self.orientationListener, false); 
							window.addEventListener("orientationchange", self.orientationListener, false); 
						}
					}
					resizeViewer(self.container.getWidth(), self.container.getHeight());
					self.emailShare.setThumbnail(mssetName);
					self.embedShare.setEmbedCode(getTemplateForViewer());

					if ((self.handlers["initComplete"] != null) && (typeof self.handlers["initComplete"] == "function") && !self.firstMediasetParsed){
                        if (typeof window.s7sdk == "undefined") {
                            window.s7sdk = s7sdk;
						}
						self.handlers["initComplete"]();
					}				
					self.firstMediasetParsed = true;
				}
				
				function proxyTrack(objID, compClass, instName, timeStamp, eventInfo) {
					if(!self.handlers["trackEvent"] && self.isConfig2Exist != true && s7sdk.Modifier.parse(self.s7params.get("launch", "true"), [true]).values[0]) {
						if(typeof(_satellite) != 'undefined' && _satellite._dmviewers_v001) {
							self.handlers["trackEvent"] = _satellite._dmviewers_v001().trackingFn;
						}
					}
					if (self.appMeasurementBridge) {
						self.appMeasurementBridge.track(objID, compClass, instName, timeStamp, eventInfo);
					}
					if (self.handlers["trackEvent"]) {
                        if (typeof window.s7sdk == "undefined") {
                            window.s7sdk = s7sdk;
                        }
						var objID_ = self.containerId;
						self.handlers["trackEvent"](objID_, compClass, instName, timeStamp, eventInfo);
					}
					if ("s7ComponentEvent" in window) {
						s7ComponentEvent(objID, compClass, instName, timeStamp, eventInfo);
					}
				}


				function onFavoritesViewSwatchSelect(event){
					if (self.pageViewChanged) {
						return;
					}
					if (event.s7event.frame != self.pageView.getCurrentFrameIndex()){
						self.isTriggeredByFavoriteSelection = true;
						self.pageView.setCurrentFrameIndex(event.s7event.frame);
					}
					enableUI(true);
					self.primaryControls.allowAutoHide(true);
				};

				function onFavoritesChanged(event){
					var disable = true;
					var favs = self.favoritesEffect.getFavorites();
					self.favoritesView.setFavorites(favs);
					self.addFavoriteButton.setSelected(false);
					self.removeFavoriteButton.setSelected(false);
					self.addFavoriteButton.activate();
					for(var i=0; i < favs.length; i++){
						if (favs[i].frameIdx == self.pageView.getCurrentFrameIndex()){
							disable = false;
						}; 
					};
					if (!disable){
						self.removeFavoriteButton.activate();
					}else{
						self.removeFavoriteButton.deactivate();
					}
					if (favs.length > 0) {
						if (self.viewAllFavoriteButton.isSelected() && self.viewAllFavoriteButton.getActivated()){
						}else{
							self.viewAllFavoriteButton.activate();
						}
					}else{
						self.viewAllFavoriteButton.setSelected(false);
						self.viewAllFavoriteButton.deactivate();
					}
					if (self.imageMapEffect && !self.imageMapEffect.getOverlaysVisible()){
						self.imageMapEffect.setOverlaysVisible(true);
					}
				};

				function onGridViewKeyDown(event){
					var keyCode = (event.which) ? event.which : event.keyCode;
					if (keyCode == s7sdk.Enum.KEY_CODE.ESCAPE){
						if (self.thumbnailDiv != null) document.getElementById(self.containerId+"_pageView").removeChild(self.thumbnailDiv);
						self.thumbnailDiv = null;
						self.gridView.setCSS(".s7thumbnailgridview", "z-index", "0");
						self.gridView.setCSS(".s7thumbnailgridview", "visibility", "hidden");
						document.getElementById(self.containerId+"_pageView").style.visibility = "inherit";
						if (self.thumbnailPageButton.isSelected()){
							self.thumbnailPageButton.focus();
						}
						self.thumbnailPageButton.setSelected(false);
						enableUI(true);
						self.primaryControls.allowAutoHide(true);
					}
				};

				function onThumbnailPageButtonClick() {
					if (self.thumbnailPageButton.isSelected()){
						self.thumbnailDiv = document.createElement('div');
						self.thumbnailDiv.style.width  = self.container.getWidth() + 'px';
						self.thumbnailDiv.style.height = self.container.getHeight() + 'px';
						self.thumbnailDiv.style.position = "absolute";
						if(document.body.addEventListener) {
							self.thumbnailDiv.addEventListener ("click", function(event){
																			s7sdk.Event.stopPropagation(event);
																		});
							self.thumbnailDiv.addEventListener ("touchstart", function(event){
																			s7sdk.Event.stopPropagation(event);
																		});	
							self.thumbnailDiv.addEventListener ("touchmove", function(event){
																			s7sdk.Event.stopPropagation(event);
																		});	
							self.thumbnailDiv.addEventListener ("touchend", function(event){
																			s7sdk.Event.stopPropagation(event);
																		});	
							self.thumbnailDiv.addEventListener ("touchcancel", function(event){
																			s7sdk.Event.stopPropagation(event);
																		});	
						}
						else if(document.body.attachEvent) {
							self.thumbnailDiv.attachEvent ("click", function(event){
																			s7sdk.Event.stopPropagation(event);
																		});
							self.thumbnailDiv.attachEvent ("touchstart", function(event){
																			s7sdk.Event.stopPropagation(event);
																		});	
							self.thumbnailDiv.attachEvent ("touchmove", function(event){
																			s7sdk.Event.stopPropagation(event);
																		});	
							self.thumbnailDiv.attachEvent ("touchend", function(event){
																			s7sdk.Event.stopPropagation(event);
																		});	
							self.thumbnailDiv.attachEvent ("touchcancel", function(event){
																			s7sdk.Event.stopPropagation(event);
																		});						
						}
						document.getElementById(self.containerId+"_pageView").appendChild(self.thumbnailDiv);
						self.gridView.setCSS(".s7thumbnailgridview", "visibility", "inherit");
						self.gridView.setCSS(".s7thumbnailgridview", "z-index", "1");
						self.primaryControls.allowAutoHide(false);
						self.gridView.focus();
						enableUI(false);
					}
					else {
						if (self.thumbnailDiv != null) document.getElementById(self.containerId+"_pageView").removeChild(self.thumbnailDiv);
						self.thumbnailDiv = null;
						self.gridView.setCSS(".s7thumbnailgridview", "z-index", "0");
						self.gridView.setCSS(".s7thumbnailgridview", "visibility", "hidden");
						document.getElementById(self.containerId+"_pageView").style.visibility = "inherit";
						enableUI(true);
						self.primaryControls.allowAutoHide(true);
					}
					// 
					self.socialShare.hidePanel();
					if (self.tocAvailable){
						self.tableOfContents.hidePanel();
					}
					hideFavoritesView();
					if (self.favoritesMenu){
						self.favoritesMenu.hidePanel();	
					}

				}
				
				function enableUI (value) {
					if (value) {
						self.pageView.setCSS(".s7pageview", "pointer-events", "auto");
						self.pageView.activate();
						if (self.favoritesEffect){
							self.favoritesEffect.setCSS(".s7favoriteseffect", "pointer-events", "auto");
						}
						if (self.imageMapEffect && !self.imageMapEffect.getOverlaysVisible()){
							self.imageMapEffect.setOverlaysVisible(true);
						}
						if (self.pageView.getCurrentFrameIndex() != 0) {
							self.leftButton.activate();
							self.toolBarLeftButton.activate();
							self.firstPageButton.activate();
							self.secondaryFirstPageButton.activate();
						}
						if (self.pageView.getCurrentFrameIndex() != self.assetLength-1) {
							self.rightButton.activate();
							self.toolBarRightButton.activate();
							self.lastPageButton.activate();
							self.secondaryLastPageButton.activate();
						}
						self.fullScreenButton.activate();

						var curState = self.pageView.getCapabilityState();
						if (curState.hasCapability(s7sdk.ZoomCapabilityState.ZOOM_IN)){
							self.zoomInButton.activate();
						} else {
							self.zoomInButton.deactivate();
						}
						if (curState.hasCapability(s7sdk.ZoomCapabilityState.ZOOM_OUT)){
							self.zoomOutButton.activate();
						} else {
							self.zoomOutButton.deactivate();						
						}
						if (curState.hasCapability(s7sdk.ZoomCapabilityState.ZOOM_RESET)) {
							self.secondaryZoomResetButton.activate();
							self.zoomResetButton.activate();
						} else {
							self.secondaryZoomResetButton.deactivate();
							self.zoomResetButton.deactivate();
						}
						if (self.closeButton) self.closeButton.activate();
						self.socialShare.activate();
						if (self.tocAvailable){
							self.tableOfContents.activate();
						}
						if(self.downloadAvailable){
							self.download.activate();
						}
						if(self.print){
							self.print.activate();
						}
						if (self.favoritesMenu){
							self.favoritesMenu.activate();
						}
					}
					else {
						self.pageView.setCSS(".s7pageview", "pointer-events", "none");
						self.pageView.deactivate();
						if (self.favoritesEffect){
							self.favoritesEffect.setCSS(".s7favoriteseffect", "pointer-events", "none");
						}
						if (self.imageMapEffect && self.imageMapEffect.getOverlaysVisible()){
							self.imageMapEffect.setOverlaysVisible(false);
						}
						//deactivating
						if(self.downloadAvailable){
							self.download.deactivate();
						}
						if(self.print){
							self.print.deactivate();
						}
						self.leftButton.deactivate();
						self.rightButton.deactivate();
						self.toolBarLeftButton.deactivate();
						self.toolBarRightButton.deactivate();
						self.firstPageButton.deactivate();
						self.secondaryFirstPageButton.deactivate();
						self.lastPageButton.deactivate();
						self.secondaryLastPageButton.deactivate();
						self.fullScreenButton.deactivate();
						self.zoomInButton.deactivate();
						self.zoomOutButton.deactivate();
						self.zoomResetButton.deactivate();
						self.secondaryZoomResetButton.deactivate();
						if (self.closeButton) self.closeButton.deactivate();
						self.socialShare.deactivate();
						if (self.tocAvailable){
							self.tableOfContents.deactivate();
						}
						if (self.favoritesMenu){
							self.favoritesMenu.deactivate();
						}
					}
				}
				
				function onPageViewChange(e) {
					self.infoPanelPopup.setItem(e.s7event.asset);
					self.pageViewChanged = true;
					var idx = self.pageView.getCurrentFrameIndex();
					self.gridView.selectSwatch(idx);
					if (self.tocAvailable){
						self.tableOfContents.setCurrentFrameIndex(idx);
					}
					if (self.print){
						self.print.setCurrentFrameIndex(idx);
					}
					self.pageViewChanged = false;
					if (self.pageView.getCurrentFrameIndex() == 0) {
						self.leftButton.deactivate();
						self.toolBarLeftButton.deactivate();
						self.firstPageButton.deactivate();
						self.secondaryFirstPageButton.deactivate();
					}
					else {
						self.leftButton.activate();
						self.toolBarLeftButton.activate();
						self.firstPageButton.activate();
						self.secondaryFirstPageButton.activate();
					}
					if (self.pageView.getCurrentFrameIndex() == self.assetLength-1) {
						self.rightButton.deactivate();
						self.toolBarRightButton.deactivate();
						self.lastPageButton.deactivate();
						self.secondaryLastPageButton.deactivate();
					}
					else{ 
						self.rightButton.activate();
						self.toolBarRightButton.activate();
						self.lastPageButton.activate();
						self.secondaryLastPageButton.activate();
					}
					self.setPageIndicator((self.pageView.getCurrentFrameIndex() > 0 ? self.pageView.getCurrentFrameIndex() + 1 : 1));				
					if (self.favoritesView){
						self.favoritesView.selectSwatch(-1);
						if (self.isTriggeredByFavoriteSelection == true){
							self.isTriggeredByFavoriteSelection = false;
						} else{
							hideFavoritesView();
							self.viewAllFavoriteButton.setSelected(false);
							self.primaryControls.detach(self.favoritesView);
						}
					}
					if (self.favoritesMenu){
						var favs = self.favoritesEffect.getFavorites();
						self.addFavoriteButton.setSelected(false);
						self.removeFavoriteButton.setSelected(false);
						self.addFavoriteButton.activate();
						if (favs.length > 0) {
							if (self.viewAllFavoriteButton.isSelected() && self.viewAllFavoriteButton.getActivated()){
							}else{
								self.viewAllFavoriteButton.activate();
							}
						}else{
							self.viewAllFavoriteButton.setSelected(false);
							self.viewAllFavoriteButton.deactivate();
						}
					}
				}

				function onFrameTransitionEnd(e){
			//		self.lastKnownState.frameIndex = e.s7event.frameIndex;
			//		self.lastKnownState.orientation = self.getOrientation();
				}

				function onSwatchSelect(e) {
					if (self.pageViewChanged) {
						return;
					}
					if (self.thumbnailDiv != null){
						document.getElementById(self.containerId+"_pageView").removeChild(self.thumbnailDiv);
						self.thumbnailDiv = null;
					}

					self.gridView.setCSS(".s7thumbnailgridview", "visibility", "hidden");
					if (self.thumbnailPageButton.isSelected()){
						self.thumbnailPageButton.focus();
					}
					self.thumbnailPageButton.setSelected(false);
					if(self.print){
						self.print.setCurrentFrameIndex(e.s7event.frame);
					}
					if (self.tocAvailable){
						self.tableOfContents.setCurrentFrameIndex(e.s7event.frame);
					}
					self.pageView.setCurrentFrameIndex(e.s7event.frame);
					enableUI(true);
					self.primaryControls.allowAutoHide(true);
				}			

				// Define an event handler function to switch pages for TableOfContent item selections
				function onTableOfContentSelected(event){
					if (self.pageViewChanged) {
						return;
					}
					if(self.print){
						self.print.setCurrentFrameIndex(event.s7event.frame);
					}
					self.gridView.selectSwatch(event.s7event.frame, true);
					self.pageView.setCurrentFrameIndex(event.s7event.frame);
				}
				
				// FullScreenButton Event Handlers
				function onFullScreenButtonClick() {
					
					document.getElementById(self.containerId + "_socialShare").style.display = self.container.isFullScreen() ? "" : "none";
					if (!self.container.isFullScreen()){
						if(self.closeButton){
							self.closeButton.setCSS(".s7closebutton", "display", "none");
						}
						self.container.requestFullScreen();
					}
					else {
						if(self.closeButton){
							self.closeButton.setCSS(".s7closebutton", "display", "block");
						}
						self.container.cancelFullScreen();
					}					
				}				

				function resizeViewer(w, h){
					self.updateOrientationMarkers();
					self.pageView.resize(w, h);
					self.primaryControls.resize(w, self.primaryControls.getHeight());
					self.secondaryControls.resize(w, self.secondaryControls.getHeight());
					self.infoPanelPopup.resize(w, h);
					self.gridView.resize(w - self.marginLeft - self.marginRight, h - self.primaryControls.getHeight() - self.marginTop - self.marginBottom);
						var secondaryHeight = (s7sdk.Util.getStyle(document.getElementById(self.containerId+"_secondaryControls"), "display") != "none") ? self.secondaryControls.getHeight():0;
						var primaryTop = parseInt(s7sdk.Util.getStyle(document.getElementById(primaryControlsDivID), "top"));
					if (self.favoritesView){
						self.favoritesView.resize(self.favoritesView.getWidth(), h - self.primaryControls.getHeight() - secondaryHeight);
						if (secondaryHeight > 0 || (primaryTop == 0)){
							self.favoritesView.setCSS(".s7favoritesview", "top", self.primaryControls.getHeight()+primaryTop+"px");
						}else{
							self.favoritesView.setCSS(".s7favoritesview", "top", "auto");
						}
					}
				}

				//Container Resize handler
				function onContainerResize(event) {
					if((typeof(event.target) == 'undefined') || (event.target == document.getElementById(containerDivID))) {
						if(!self.container.isInLayout()){
							return;
						}
						document.getElementById(self.containerId + "_socialShare").style.display = self.container.isFullScreen() ? "none" : "";
						if(self.closeButton){
							document.getElementById(self.containerId + "_closeButton").style.display = self.container.isFullScreen() ? "none" : "block";
						}
						resizeViewer(event.s7event.w, event.s7event.h);
					}
				}
				
				// Generate template for EmbedShare
				function getTemplateForViewer() {
					// NOTE: The following use of .component is a work-around for retrieving modifier values from core component.  This should be fixed in future releases	to retrieve values use an API on the control level.
					var config = "";
					if (self.s7params.params.config !="" && self.s7params.params.config != undefined) {
						config = '    eCatalogViewer.setParam("config", "'+ self.s7params.params.config +'"); \n';
					}
					var config2 = "";
					if (self.s7params.params.config2 != "" && self.s7params.params.config2 != undefined) 
						config2 = '		eCatalogViewer.setParam("config2", "' + self.s7params.params.config2 + '"); \n';

					var template =
								'<'+'script language="javascript" type="text/javascript" src="' + (s7viewers.eCatalogViewer.codebase.contentUrl +"js/"+ self.viewerFileName) + '"><'+'/script> \n'+     
								'<'+'div id="' +self.containerId+ '"><'+'/div> \n'+
								'<'+'script type="text/javascript"> \n'+
								'    var eCatalogViewer = new s7viewers.eCatalogViewer(); \n'+
								'    eCatalogViewer.setParam("serverurl", "' + makeAbsolutePath(self.mediaSet.component.serverUrl) + '"); \n' +
								'    eCatalogViewer.setAsset("' + self.mediaSet.component.asset+ '"); \n'+
								'    eCatalogViewer.setParam("stagesize", "$EMBED_WIDTH$,$EMBED_HEIGHT$"); \n'+
								'	 eCatalogViewer.setParam("emailurl", "' + makeAbsolutePath(self.emailShare.component.emailurl) + '"); \n'+
								'    eCatalogViewer.setParam("contenturl", "' + makeAbsolutePath(self.s7params.get("contenturl","/is/content")) + '"); \n'+
								config +
								config2 +
								'	 eCatalogViewer.setContainerId("' +self.containerId+ '"); \n'+
								'	 eCatalogViewer.init(); \n'+
								'<'+'/script> \n';
					return template;
				}

				// Helper for getTemplateForViewer
				function makeAbsolutePath(url) {
					if (url && ((url.indexOf("http://") == 0) || (url.indexOf("https://") == 0))) {
						return url;
					}

					var absUrl = document.location.protocol + "//" + document.location.host;

					if (!url || url.indexOf('/') != 0) {
						absUrl += "/";
					}

					if (url) {
						absUrl += url;
					}
					return absUrl;
				}

				//Container FullScreen Resize handler
				function onContainerFullScreen(event) {
					document.getElementById(self.containerId + "_socialShare").style.display = self.container.isFullScreen() ? "none" : "";
					if(self.closeButton){
						self.closeButton.setCSS(".s7closebutton", "display", self.container.isFullScreen() ? "none" : "block");
					}
					self.fullScreenButton.setSelected(self.container.isFullScreen());
					resizeViewer(event.s7event.w, event.s7event.h);
				}
				
				function onContainerSizeMarkerChange(event) {
					self.updateCSSMarkers();
				}

				// Define an event handler function to activate the InfoPanelPopup for image map rollovers
				function rolloverKeyHandler(event) {
					if (event.s7event.rolloverKey != null) {
						self.infoPanelPopup.activateRollover(event.s7event.rolloverKey);
						self.thumbnailPageButton.deactivate();
						enableUI(false);
					}
					}
				
				function onInfoClose(event) {
					enableUI(true);
					self.thumbnailPageButton.activate();
				}
				
				function rolloverKeyTargetHandler(event) {
					if(event.s7event.frame) {
						var frameIndex = event.s7event.frame;
						var orientation = self.getOrientation();
						if (orientation == 0 || orientation == 180) {
							var vSetDesc = self.mediaSetDesc;
							if(vSetDesc instanceof s7sdk.OrientationSetDesc){
								frameIndex = vSetDesc.getPortraitIndex(frameIndex);
							}
						}
						self.pageView.setCurrentFrameIndex(frameIndex);
						if(self.print){
							self.print.setCurrentFrameIndex(frameIndex);
						}
						if (self.tocAvailable){
							self.tableOfContents.setCurrentFrameIndex(frameIndex);
						}
					}
				}
				
				function closeWindow() {
					try{
						if(s7sdk.browser.name != "firefox") {
							window.open(self.getContentUrl() + "s7sdkclose.html","_self"); //workaround for close self window with JS
						} else {
							window.close(); // Firefox does not allow workaround so we fall back to window.close to cover pop-up case
						} 
					}
					catch(e){
						s7sdk.Logger.log(s7sdk.Logger.WARN,"Cannot close the window");
					}
				}			
			}

			this.s7params.addEventListener(s7sdk.Event.SDK_READY,function(){
													self.initSiteCatalyst(self.s7params,initViewer);
											},false);
			this.s7params.setProvidedSdk(this.sdkProvided);
			this.s7params.init();
		};

		s7viewers.eCatalogViewer.prototype.updateOrientation = function() {
			
			var orientation = this.getOrientation();
			if(!(orientation == 0 || orientation == 180)){
				orientation = 90;
			}
			var assetRatio;
			var index = 0;
			var vSetDesc = this.mediaSetDesc;
			var mediaSetDesc;
			var idx = (this.pageView.getCurrentFrameIndex() > 0 ? this.pageView.getCurrentFrameIndex() : 0);
			switch (orientation)
			{   
				case 0://portrait
				case 180://portrait
						if(vSetDesc instanceof s7sdk.OrientationSetDesc){
							mediaSetDesc = vSetDesc.portrait;
							idx = vSetDesc.getPortraitIndex(idx);
						} else {
							mediaSetDesc = vSetDesc;
						}
						if (this.tocAvailable){
							this.tableOfContents.setPortrait();
						}
						this.gridView.setPortrait();
						this.pageView.setPortrait();
					break;

				case -90://landscape
				case 90://landscape
						if(vSetDesc instanceof s7sdk.OrientationSetDesc){
							mediaSetDesc = vSetDesc.landscape;
							idx = vSetDesc.getLandscapeIndex(idx);
						} else {
							mediaSetDesc = vSetDesc;
						}
						if (this.tocAvailable){
							this.tableOfContents.setLandscape();
						}
						this.gridView.setLandscape();
						this.pageView.setLandscape();
					break;
			}
			this.assetLength = mediaSetDesc.items.length;
			this.setPageIndicator(idx + 1);
			index = (mediaSetDesc.items.length > 1) ? 1 : 0;
			if(this.viewerMode == "ratio"){
				var itm = mediaSetDesc.items[index];
				assetRatio = itm.width/itm.height;
				this.container.setModifier({ "aspect": assetRatio });
			}
		}
		
		s7viewers.eCatalogViewer.prototype.setPageIndicator = function(idx) {
			this.pageIndicator.innerHTML = this.secondaryPageIndicator.innerHTML = idx + "/" + this.assetLength;
		};

		s7viewers.eCatalogViewer.prototype.processLocalizationData = function (srcLocalizationData) {
			if (typeof(srcLocalizationData) != "object") {
				return srcLocalizationData;
			}
			var dstLocalizationData = {};
			for (var key in srcLocalizationData) {
				if (typeof(srcLocalizationData[key]) == "object") {
					dstLocalizationData[key] = {};
					for (var symbolName in srcLocalizationData[key]) {
						dstLocalizationData[key][symbolName.replace("$CONTAINER_ID$", this.containerId)] = srcLocalizationData[key][symbolName];
					}
				} else {
					dstLocalizationData[key] = srcLocalizationData[key];
				}
			}
			return dstLocalizationData;
		}

		s7viewers.eCatalogViewer.prototype.setParam = function(key, def){
			if (this.isDisposed) return;
			this.params[key] = def;
		}

		s7viewers.eCatalogViewer.prototype.getParam = function(key){
			var keyLC = key.toLowerCase();
            for (var paramsKey in this.params) {
                if (paramsKey.toLowerCase() == keyLC) {
                    return this.params[paramsKey];
                }
            }
            return null; 
		};

		s7viewers.eCatalogViewer.prototype.setParams = function(inParams){
			if (this.isDisposed) return;
			var params = inParams.split("&");
			for (var i = 0; i < params.length; i++) {
				var pair = params[i].split("=");
				if (pair.length > 1) {
					this.setParam(pair[0],decodeURIComponent(params[i].split("=")[1]));
				}
			}
		}

		s7viewers.eCatalogViewer.prototype.getDomScriptTag = function(jsFileNameOrPath){
			var scriptTags;
			if (document.scripts){
				scriptTags = document.scripts;
			}else{
				scriptTags = document.getElementsByTagName("script");
			}
			for (var i = 0; i < scriptTags.length; i++){ 
				if (scriptTags[i] && scriptTags[i].getAttribute("src") != null && scriptTags[i].getAttribute("src").indexOf(jsFileNameOrPath) != -1){
					return scriptTags[i];
					break;
				}
			}
			return null;
		};	
		
		s7viewers.eCatalogViewer.prototype.s7sdkUtilsAvailable = function(){
			if (s7viewers.eCatalogViewer.codebase.isDAM) {
				return typeof(s7viewers.s7sdk) != "undefined";
			} else {
				return (typeof(s7classic) != "undefined") && (typeof(s7classic.s7sdk) != "undefined");
			}
		};

		s7viewers.eCatalogViewer.prototype.init = function(){
			if (this.isDisposed) return;
			if (this.initCalled) return;
			this.initCalled = true;
			if (this.initializationComplete) return this;

			this.lockurldomains = (Boolean(Number(this.params.lockurldomains)) || typeof this.params.lockurldomains == "undefined") ? 1 : 0;

			var containerDiv = document.getElementById(this.containerId);
			if (containerDiv.className != ""){
				if (containerDiv.className.indexOf(s7viewers.eCatalogViewer.cssClassName) != -1){
					//
				}else{
					containerDiv.className += " "+s7viewers.eCatalogViewer.cssClassName;
				}	
			}else{
				containerDiv.className = s7viewers.eCatalogViewer.cssClassName;
			}

			this.s7sdkNamespace = s7viewers.eCatalogViewer.codebase.isDAM ? "s7viewers" : "s7classic";
			var utilSrcPath = this.getContentUrl() + this.sdkBasePath + "js/s7sdk/utils/Utils.js?namespace="+this.s7sdkNamespace;
			var allScripts = null;
			if (document.scripts){
				allScripts = document.scripts;
			}else{
				allScripts = document.getElementsByTagName("script");
			}

			if (this.s7sdkUtilsAvailable()){
				s7sdk = (s7viewers.eCatalogViewer.codebase.isDAM ? s7viewers.s7sdk : s7classic.s7sdk);
				this.sdkProvided = true;
				if (this.isDisposed) {
					return;
				}
				s7sdk.Util.init(); 
				this.includeViewer(); 
				this.initializationComplete = true; 
			}else if (!this.s7sdkUtilsAvailable() && (s7viewers.eCatalogViewer.codebase.isDAM ? s7viewers.S7SDK_S7VIEWERS_LOAD_STARTED : s7viewers.S7SDK_S7CLASSIC_LOAD_STARTED)){
				this.sdkProvided = true;
				var selfRef = this;
				var utilsWaitId = setInterval(
					function() {
						if (selfRef.s7sdkUtilsAvailable()) {
							clearInterval(utilsWaitId);
							s7sdk = (s7viewers.eCatalogViewer.codebase.isDAM ? s7viewers.s7sdk : s7classic.s7sdk);
							if (selfRef.isDisposed) {
								return;
							}
							s7sdk.Util.init(); 
							selfRef.includeViewer();
							selfRef.initializationComplete = true;  
						}
					}, 100
				);
			}else{
				this.utilsScriptElm = document.createElement("script");
				this.utilsScriptElm.setAttribute("language", "javascript");
				this.utilsScriptElm.setAttribute("type", "text/javascript");

				var headElem = document.getElementsByTagName("head")[0];
				var self = this;

				function cleanupAndInitUtils() {
					if (!self.utilsScriptElm.executed) { 
						self.utilsScriptElm.executed = true;
						s7sdk = (s7viewers.eCatalogViewer.codebase.isDAM ? s7viewers.s7sdk : s7classic.s7sdk);
						if (self.s7sdkUtilsAvailable() && s7sdk.Util){
							if (self.isDisposed) {
								return;
							}
							s7sdk.Util.init(); 
							self.includeViewer();  
							self.initializationComplete = true;
							self.utilsScriptElm.onreadystatechange = null;
							self.utilsScriptElm.onload = null;
							self.utilsScriptElm.onerror = null;
						}
					}  
				}

				if (typeof(self.utilsScriptElm.readyState) != "undefined") {
					self.utilsScriptElm.onreadystatechange =  function() {
						if (self.utilsScriptElm.readyState == "loaded") {
							headElem.appendChild(self.utilsScriptElm);
						} else if (self.utilsScriptElm.readyState == "complete") {
							cleanupAndInitUtils();
						}
					};
					self.utilsScriptElm.setAttribute("src", utilSrcPath);
				} else {
					self.utilsScriptElm.onload = function() {
						cleanupAndInitUtils();
					};
					self.utilsScriptElm.onerror = function() {
					};
					self.utilsScriptElm.setAttribute("src", utilSrcPath);
					headElem.appendChild(self.utilsScriptElm);
					self.utilsScriptElm.setAttribute("data-src", self.utilsScriptElm.getAttribute("src"));
					self.utilsScriptElm.setAttribute("src", "?namespace="+this.s7sdkNamespace);
				}
				if(s7viewers.eCatalogViewer.codebase.isDAM) {
					s7viewers.S7SDK_S7VIEWERS_LOAD_STARTED = true;
				}else {
					s7viewers.S7SDK_S7CLASSIC_LOAD_STARTED = true;	
				}
			}
			
			return this;
		}
				
		s7viewers.eCatalogViewer.prototype.getDomain = function(inUrl) {
			var res = /(^http[s]?:\/\/[^\/]+)/i.exec(inUrl);
			if (res == null) {
				return '';
			} else {
				return res[1];
			}
		}

		s7viewers.eCatalogViewer.prototype.setAsset = function(inAsset) {
			if (this.isDisposed) return;
			if (this.mediaSet){
				this.mediaSet.setAsset(inAsset);
				this.emailShare.setThumbnail(inAsset);
			}else{
				this.setParam("asset", inAsset);
			}
		};
		
		s7viewers.eCatalogViewer.prototype.setLocalizedTexts = function(inText) {
			if (this.isDisposed) return;
			if (this.s7params){
				this.s7params.setLocalizedTexts(inText);
			}else{
				this.setParam("localizedtexts", inText);
			}
		};

		s7viewers.eCatalogViewer.prototype.getOrientation = function() {
			var orientation = 0;
			if(s7sdk.browser.device.name == "android"){
				orientation = screen.width/screen.height > 1 ? 90:0;
			}else{
				orientation = window.orientation;
			}
			return orientation;
		};

		s7viewers.eCatalogViewer.prototype.initSiteCatalyst = function(params,inCallback) {
				//integrate SiteCatalyst logging
				//strip modifier from asset and take the very first entry from the image list, and the first element in combination from that entry
				var siteCatalystAsset = params.get("asset", null, "MediaSet").split(',')[0].split(':')[0];
				this.isConfig2Exist = false;
				if (siteCatalystAsset.indexOf('/') != -1) {
					var company = s7sdk.MediaSetParser.findCompanyNameInAsset(siteCatalystAsset);
					var config2 = params.get("config2");
					this.isConfig2Exist = (config2 != '' && typeof config2 != "undefined");
					if (this.isConfig2Exist){
						this.trackingParams = {
							siteCatalystCompany: company,
							config2: config2,
							isRoot: params.get("serverurl")
						};
						var jsp_src =this.getContentUrl()+'../../AppMeasurementBridge.js?company=' + company + (config2 == '' ? '' : '&preset=' + config2);
						if (params.get("serverurl", null)) {
							jsp_src += "&isRoot=" + params.get("serverurl");
						}
						var elem = document.createElement("script");
						elem.setAttribute("language", "javascript");
						elem.setAttribute("type", "text/javascript");
						elem.setAttribute("src", jsp_src);

						var elems = document.getElementsByTagName("head");
						elem.onload = elem.onerror = function() {  
							if (!elem.executed) { 
								elem.executed = true;  
								if (typeof inCallback == "function"){
									inCallback();
								}
								elem.onreadystatechange = null;
								elem.onload = null;
								elem.onerror = null;
							}  
						};  

						elem.onreadystatechange = function() {  
							if (elem.readyState == "complete" || elem.readyState == "loaded") {  
								setTimeout(function() { 
									if (!elem.executed) { 
										elem.executed = true;  
										if (typeof inCallback == "function"){
											inCallback();
										}
									}  
									elem.onreadystatechange = null;
									elem.onload = null;
									elem.onerror = null;
								}, 0);
							}  
						};
						elems[0].appendChild(elem);
					}else{
						if (typeof inCallback == "function"){
							inCallback();
						}
					}	
				}
		}
		/*support for JavaScript templates to eCatalog*/
		if (typeof loadProduct != "function"){
			loadProduct = function(product_url){ 
				window.open(product_url);
			}
		}
		if (typeof loadProductPW != "function"){
			loadProductPW = function(product_url){ 
				window.open(product_url);
			}
		}
		if (typeof loadProductNW != "function"){
			loadProductNW = function(product_url){ 
				window.open(product_url);
			}
		}	
		if (typeof loadProductCW != "function"){
			loadProductCW = function(product_url){
				document.location = product_url;
			}
		}
		/*getComponent() method*/
		s7viewers.eCatalogViewer.prototype.getComponent = function(inId) {
			if (this.isDisposed) return null;
			switch(inId){
				case "container":
					return this.container || null;
				case "mediaSet":
					return this.mediaSet || null;
				case "pageView":
					return this.pageView || null;
				case "primaryControls":
					return this.primaryControls || null;
				case "secondaryControls":
					return this.secondaryControls || null;
				case "tableOfContents":
					return this.tableOfContents || null;
				case "gridView":
					return this.gridView || null;
				case "infoPanelPopup":
					return this.infoPanelPopup || null;
				case "imageMapEffect":
					return this.imageMapEffect || null;
				case "leftButton":
					return this.leftButton || null;
				case "rightButton":
					return this.rightButton || null;
				case "zoomInButton":
					return this.zoomInButton || null;	
				case "zoomOutButton":
					return this.zoomOutButton || null;
				case "zoomResetButton":
					return this.zoomResetButton || null;				
				case "secondaryZoomResetButton":
					return this.secondaryZoomResetButton || null;				
				case "thumbnailPageButton":
					return this.thumbnailPageButton || null;			
				case "fullScreenButton":
					return this.fullScreenButton || null;				
				case "toolBarLeftButton":
					return this.toolBarLeftButton || null;				
				case "toolBarRightButton":
					return this.toolBarRightButton || null;				
				case "firstPageButton":
					return this.firstPageButton || null;	
				case "secondaryFirstPageButton":
					return this.secondaryFirstPageButton || null;				
				case "lastPageButton":
					return this.lastPageButton || null;
				case "secondaryLastPageButton":
					return this.secondaryLastPageButton || null;					
				case "closeButton":
					return this.closeButton || null;				
				case "socialShare":
					return this.socialShare || null;				
				case "twitterShare":
					return this.twitterShare || null;
				case "facebookShare":
					return this.facebookShare || null;
				case "linkShare":
					return this.linkShare || null;
				case "emailShare":
					return this.emailShare || null;
				case "embedShare":
					return this.embedShare || null;
				case "download":
					return this.download || null;
				case "print":
					return this.print || null;
				case "parameterManager":
					return this.s7params || null;
				case "favoritesEffect":
					return this.favoritesEffect || null;
				case "favoritesView":
					return this.favoritesView || null;
				case "favoritesMenu":
					return this.favoritesMenu || null;
				case "addFavoriteButton":
					return this.addFavoriteButton || null;
				case "removeFavoriteButton":
					return this.removeFavoriteButton || null;
				case "viewAllFavoriteButton":
					return this.viewAllFavoriteButton || null;
				default:
					return null;
			}
		};
		s7viewers.eCatalogViewer.prototype.setHandlers = function(inObj) {
			if (this.isDisposed) return;
			if (this.initCalled) return;
			this.handlers = [];
			for (var i in inObj) {
				if (!inObj.hasOwnProperty(i)) continue;
				if (typeof inObj[i] != "function") continue;
				this.handlers[i] = inObj[i];
			}
		};	

		function getStyleValue(elem, cssProp){
			if (document.defaultView && document.defaultView.getComputedStyle){
			  return document.defaultView.getComputedStyle(elem, "")[cssProp];
			} else if (elem.currentStyle) {
			  return elem.currentStyle[cssProp];
			} else {
			  return elem.style[cssProp];
			}
		};
		s7viewers.eCatalogViewer.prototype.getModifiers = function() {
			return this.modifiers;
		};

		s7viewers.eCatalogViewer.prototype.setModifier = function(modifierObject) {
			if (this.isDisposed) return;
			var modName, modDesc, modObj, modVal, parsedModifier, i;
			for(modName in modifierObject) {
				if(!this.modifiers.hasOwnProperty(modName)) {
					continue;
				}
				modDesc = this.modifiers[modName];
				
				try {
					modVal = modifierObject[modName];

					if (modDesc.parseParams === false) {
						parsedModifier = new s7sdk.Modifier([modVal  != "" ? modVal : modDesc.defaults[0]]);
					} else {
						parsedModifier = s7sdk.Modifier.parse(modVal, modDesc.defaults, modDesc.ranges);
					}

					if(parsedModifier.values.length == 1) {
						this[modName] = parsedModifier.values[0];
						this.setModifierInternal(modName);
					}
					else if(parsedModifier.values.length > 1) {
						modObj = {};
						for(i = 0; i < parsedModifier.values.length; i++) {
							modObj[modDesc.params[i]] = parsedModifier.values[i];
						}
						this[modName] = modObj;
						this.setModifierInternal(modName);
					}
				}
				catch(error) {
					throw new Error("Unable to process modifier: '"+ modName + "'. " + error);
				}
			}
		};

		s7viewers.eCatalogViewer.prototype.setModifierInternal = function(modName) {
			switch (modName) {
				default :
					break;				
			}
		};

		s7viewers.eCatalogViewer.prototype.parseMods = function () {
			var modName, modDesc, modObj, modVal, parsedModifier, i;
			
			for(modName in this.modifiers) {
				if(!this.modifiers.hasOwnProperty(modName)) {
					continue;
				}
				modDesc = this.modifiers[modName];
				
				try {
					modVal = this.s7params.get(modName, "");

					if (modDesc.parseParams === false) {
						parsedModifier = new s7sdk.Modifier([modVal  != "" ? modVal : modDesc.defaults[0]]);
					} else {
						parsedModifier = s7sdk.Modifier.parse(modVal, modDesc.defaults, modDesc.ranges);
					}

					if(parsedModifier.values.length == 1) {
						this[modName] = parsedModifier.values[0];
					}
					else if(parsedModifier.values.length > 1) {
						modObj = {};
						for(i = 0; i < parsedModifier.values.length; i++) {
							modObj[modDesc.params[i]] = parsedModifier.values[i];
						}
						this[modName] = modObj;
					}
				}
				catch(error) {
					throw new Error("Unable to process modifier: '"+ modName + "'. " + error);
				}
			}
		};

		/**
		 * @private
		 */
		s7viewers.eCatalogViewer.prototype.updateCSSMarkers = function (){
			var sizeMarker = this.container.getSizeMarker();
			var newclass;
			if (sizeMarker == s7sdk.common.Container.SIZE_MARKER_NONE){
				return;
			}		
			if (sizeMarker == s7sdk.common.Container.SIZE_MARKER_LARGE){
				newclass = "s7size_large";
			}else{
				if (sizeMarker == s7sdk.common.Container.SIZE_MARKER_SMALL){
					newclass = "s7size_small";
				}else if (sizeMarker == s7sdk.common.Container.SIZE_MARKER_MEDIUM){
					newclass = "s7size_medium";
				}
			}
			if (this.containerId) {
				this.setNewSizeMarker(this.containerId, newclass);
			}
			this.reloadInnerComponents();
		};
		
		s7viewers.eCatalogViewer.prototype.reloadInnerComponents = function () {
			var regCompArr = this.s7params.getRegisteredComponents();
			for(var i=0; i < regCompArr.length; i++){
				if (regCompArr[i] && regCompArr[i].restrictedStylesInvalidated()){
					regCompArr[i].reload();
				}
			}
		};
		
		s7viewers.eCatalogViewer.prototype.setNewSizeMarker = function (elm, inClass) {
			var cls = document.getElementById(elm).className;
			var re = /^(.*)(s7size_small|s7size_medium|s7size_large)(.*)$/gi;
			var newcls;
			if(cls.match(re)){
				newcls = cls.replace(re,  "$1" + inClass + "$3");
			} else {
				newcls = cls + " " + inClass;
			}
			if(cls != newcls){
				document.getElementById(elm).className = newcls;
			}
		};

		s7viewers.eCatalogViewer.prototype.dispose = function () {
			window.removeEventListener("orientationchange", this.orientationListener);

			if (this.appMeasurementBridge) {
				this.appMeasurementBridge.dispose();
				this.appMeasurementBridge = null;
			}
			if (this.trackingManager){
				this.trackingManager.dispose();
				this.trackingManager = null;
			}
			if (this.visibilityManager){
				this.visibilityManager.dispose();
				this.visibilityManager = null;
			}
			if (this.zoomInButton){
				this.zoomInButton.dispose();
				this.zoomInButton = null;
			}
			if (this.zoomOutButton){
				this.zoomOutButton.dispose();
				this.zoomOutButton = null;
			}
			if (this.zoomResetButton){
				this.zoomResetButton.dispose();
				this.zoomResetButton = null;
			}
			if (this.fullScreenButton){
				this.fullScreenButton.dispose();
				this.fullScreenButton = null;
			}
			if (this.closeButton){
				this.closeButton.dispose();
				this.closeButton = null;
			}
	//
			if (this.leftButton){
				this.leftButton.dispose();
				this.leftButton = null;
			}
			if (this.rightButton){
				this.rightButton.dispose();
				this.rightButton = null;
			}
			if (this.secondaryZoomResetButton){
				this.secondaryZoomResetButton.dispose();
				this.secondaryZoomResetButton = null;
			}
			if (this.thumbnailPageButton){
				this.thumbnailPageButton.dispose();
				this.thumbnailPageButton = null;
			}
			if (this.fullScreenButton){
				this.fullScreenButton.dispose();
				this.fullScreenButton = null;
			}
			if (this.toolBarLeftButton){
				this.toolBarLeftButton.dispose();
				this.toolBarLeftButton = null;
			}
			if (this.toolBarRightButton){
				this.toolBarRightButton.dispose();
				this.toolBarRightButton = null;
			}
			if (this.firstPageButton){
				this.firstPageButton.dispose();
				this.firstPageButton = null;
			}
			if (this.secondaryFirstPageButton){
				this.secondaryFirstPageButton.dispose();
				this.secondaryFirstPageButton = null;
			}
			if (this.lastPageButton){
				this.lastPageButton.dispose();
				this.lastPageButton = null;
			}
			if (this.secondaryLastPageButton){
				this.secondaryLastPageButton.dispose();
				this.secondaryLastPageButton = null;
			}
			if (this.favoritesView){
				this.favoritesView.dispose();
				this.favoritesView = null;
			}
			if (this.addFavoriteButton){
				this.addFavoriteButton.dispose();
				this.addFavoriteButton = null;
			}
			if (this.removeFavoriteButton){
				this.removeFavoriteButton.dispose();
				this.removeFavoriteButton = null;
			}
			if (this.viewAllFavoriteButton){
				this.viewAllFavoriteButton.dispose();
				this.viewAllFavoriteButton = null;
			}
			if (this.favoritesMenu){
				this.favoritesMenu.dispose();
				this.favoritesMenu = null;
			}
			if (this.favoritesEffect){
				this.favoritesEffect.dispose();
				this.favoritesEffect = null;
			}
	//
			if (this.socialShare){
				this.socialShare.dispose();
				this.socialShare = null;
			}
			if (this.twitterShare){
				this.twitterShare.dispose();
				this.twitterShare = null;
			}
			if (this.facebookShare){
				this.facebookShare.dispose();
				this.facebookShare = null;
			}
			if (this.linkShare){
				this.linkShare.dispose();
				this.linkShare = null;
			}
			if (this.emailShare){
				this.emailShare.dispose();
				this.emailShare = null;
			}
			if (this.embedShare){
				this.embedShare.dispose();
				this.embedShare = null;
			}
			if (this.download){
				this.download.dispose();
				this.download = null;
			}
			if (this.print){
				this.print.dispose();
				this.print = null;
			}
	//
			if (this.infoPanelPopup){
				this.infoPanelPopup.dispose();
				this.infoPanelPopup = null;
			}
			if (this.tableOfContents){
				this.tableOfContents.dispose();
				this.tableOfContents = null;
			}
			if (this.imageMapEffect){
				this.imageMapEffect.dispose();
				this.imageMapEffect = null;
			}
			if (this.gridView){
				this.gridView.dispose();
				this.gridView = null;
			}
			if (this.thumbnailDiv){
				this.thumbnailDiv.parentNode.removeChild(this.thumbnailDiv);	
				delete this.thumbnailDiv
			}
			if (this.pageView){
				this.pageView.dispose();
				this.pageView = null;
			}
	//
			if (this.divLeftButton){
				this.divLeftButton.parentNode.removeChild(this.divLeftButton);	
				delete this.divLeftButton
			}
			if (this.divRightButton){
				this.divRightButton.parentNode.removeChild(this.divRightButton);	
				delete this.divRightButton
			}
			if (this.divFirstPageButton){
				this.divFirstPageButton.parentNode.removeChild(this.divFirstPageButton);	
				delete this.divFirstPageButton
			}
			if (this.divSecondaryFirstPageButton){
				this.divSecondaryFirstPageButton.parentNode.removeChild(this.divSecondaryFirstPageButton);	
				delete this.divSecondaryFirstPageButton
			}
			if (this.divLastPageButton){
				this.divLastPageButton.parentNode.removeChild(this.divLastPageButton);	
				delete this.divLastPageButton
			}
			if (this.divSecondaryLastPageButton){
				this.divSecondaryLastPageButton.parentNode.removeChild(this.divSecondaryLastPageButton);	
				delete this.divSecondaryLastPageButton
			}
			if (this.divToolBarLeftButton){
				this.divToolBarLeftButton.parentNode.removeChild(this.divToolBarLeftButton);	
				delete this.divToolBarLeftButton
			}
			if (this.divToolBarRightButton){
				this.divToolBarRightButton.parentNode.removeChild(this.divToolBarRightButton);	
				delete this.divToolBarRightButton
			}
			if (this.pageIndicator){
				this.pageIndicator.parentNode.removeChild(this.pageIndicator);	
				delete this.pageIndicator
			}
			if (this.secondaryPageIndicator){
				this.secondaryPageIndicator.parentNode.removeChild(this.secondaryPageIndicator);	
				delete this.secondaryPageIndicator
			}
			if (this.secondaryControls){
				this.secondaryControls.dispose();
				this.secondaryControls = null;
			}
			if (this.divSecondaryControls){
				this.divSecondaryControls.parentNode.removeChild(this.divSecondaryControls);	
				delete this.divSecondaryControls
			}
			if (this.primaryControls){
				this.primaryControls.dispose();
				this.primaryControls = null;
			}
	//
			if (this.mediaSet){
				this.mediaSet.dispose();
				this.mediaSet = null;
			}
			this.mediaSetDesc = null; 
			this.lastKnownState = null;

			if (this.s7params){
				this.s7params.dispose();
				this.s7params = null;
			}
			if (this.container){
				var classes = [s7viewers.eCatalogViewer.cssClassName,"s7touchinput","s7mouseinput","s7size_large","s7size_small","s7size_medium"];
				var cls = document.getElementById(this.containerId).className.split(' ');
				for(var i=0; i<classes.length;i++){
					var idx = cls.indexOf(classes[i]);
					if(idx != -1) { 
						cls.splice(idx, 1);
					}
				}
				document.getElementById(this.containerId).className = cls.join(' ');
				this.container.dispose();
				this.container = null;
			}
			this.handlers = [];
			this.isDisposed = true;
		};

		/**
		 * @private
		 */	
		s7viewers.eCatalogViewer.prototype.updateOrientationMarkers = function (){
			if(!this.isOrientationMarkerForcedChanged){
				var newclass;
				if (window.innerWidth > window.innerHeight){
					newclass = "s7device_landscape";
				}else{
					newclass = "s7device_portrait";
				}			
				if (document.getElementById(this.containerId).className.indexOf(newclass) == -1) {
					this.setNewOrientationMarker(this.containerId, newclass);
					this.reloadInnerComponents();
				}
			}
		};
		
		s7viewers.eCatalogViewer.prototype.setNewOrientationMarker = function (elm, inClass) {
			var cls = document.getElementById(elm).className;
			var re = /^(.*)(s7device_landscape|s7device_portrait)(.*)$/gi;
			var newcls;
			if(cls.match(re)){
				newcls = cls.replace(re,  "$1" + inClass + "$3");
			} else {
				newcls = cls + " " + inClass;
			}
			if(cls != newcls){
				document.getElementById(elm).className = newcls;
			}
		};

		s7viewers.eCatalogViewer.prototype.forceDeviceOrientationMarker = function (marker){
			switch (marker){
				case "s7device_portrait":
				case "s7device_landscape":
					this.isOrientationMarkerForcedChanged = true;
					if (this.containerId) {
						this.setNewOrientationMarker(this.containerId, marker);
					}
					this.reloadInnerComponents();
					break;
				case null:
					this.isOrientationMarkerForcedChanged = false;
					this.updateOrientationMarkers();
					break;
				default:
					break;
			}
		};

		s7viewers.eCatalogViewer.prototype.getURLParameter = function (name) {
			var sanitizedUrlParams = s7sdk.ParameterManager.getSanitizedParameters(s7sdk.query.params, this.lockurldomains); 
            		return  sanitizedUrlParams[name];
		};

		s7viewers.eCatalogViewer.prototype.addClass = function (elm, inClass) {
			var cls = document.getElementById(elm).className.split(' ');
			if(cls.indexOf(inClass) == -1) {
				cls[cls.length] = inClass;
				document.getElementById(elm).className = cls.join(' ');
			}
		};

	})();		
}
