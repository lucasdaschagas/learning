/*
 * ADOBE CONFIDENTIAL
 *
 * Copyright 2012 Adobe Systems Incorporated
 * All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
 *
 * AdobePatentID="2994US01"
 */

/**
 * Filters the @media queries from the CSS.
 * Known limitations:
 * - Doesn't support media query units - all dimensions are assumed to be PX and screen resolutions to be DPI.
 * - The default DPI value if none provided is always 96dpi even if this doesn't correspond to the current device settings.
 * - Doesn't support media groups other than "all" (doesn't support: continuous, paged, visual, audio, speech, tactile, grid, bitmap, interactive, and static).
 * - Doesn't support the "grid" media feature.
 * @param {string} css The CSS to filter.
 * @param {object} device The device capabilities, an object of the form: {"width":320,"height":480} - unexisting properties will be completed.
 * @return {string} the filtered CSS.
 */
CQ.wcm.mobile.simulator.MediaFilter = function () {

    "use strict";

    // Regular expressions
    var comments       = "/\\*[^*]*(?:(?:\\*+([^/][^*]*\\*+)*/)|$)", // Description of the comment scope
        doubleStr      = '"(?:[^\\\\"]*(?:\\\\"?)*)*(?:"|$)',        // Description of the double quote string scope
        singleStr      = "'(?:[^\\\\']*(?:\\\\'?)*)*(?:'|$)",        // Description of the single quote string scope
        escaped        = "(?:\\\\.?)",                               // Descrption of escaped string characters
        passThrough    = "^(?:[^\\\\@{}\"'/]*|@(?!media)|/(?!\\*)|"+escaped+"|"+comments+"|"+doubleStr+"|"+singleStr+")*", // See comment below for passThroughRE
        mediaQuery     = "^(?:[^\\\\;{}\"'/]*|/(?!\\*)|"+escaped+"|"+comments+"|"+doubleStr+"|"+singleStr+")*",            // See comment below for mediaQueryRE
        mediaTypeRE    = /^\s*(?:(?:(?:(not)|(only))\s+)?([^\s()]+))?/,          // Matches the type query (e.g. "not all")
        mediaAndExprRE = /^(\s+and\s+)?\(([^()]+)\)/,                            // Matches the expression that follows the type query (e.g. " and (min-width: 800px)")
        mediaExprRE    = /^\s*(?:(?:(min)|(max))-)?(\S+)(?:\s*:\s*(\S.*))+\s*$/, // Matches the expression itself (e.g. "min-width: 800px" or "min-width:800px")
        ratioRE        = /^\s*(\d+)\s*\/\s*(\d+)\s*$/, // Matches a ratio (e.g. "1/2")
        trimRE         = /^\s+|\s+$/g,                 // Matches the whitespace at the start and end of a string (useful to trim a string)
        notBlankRE     = /\S/,                         // Matches the first non-blank character (used by StringReader.isBlank())
        commentsRE     = new RegExp(comments, "g"),    // Matches comments
        passThroughRE  = new RegExp(passThrough, "i"), // Matches everything that isn't a block or a @media query
        mediaQueryRE   = new RegExp(mediaQuery);       // Matches the @media query selector (everything until the opening bracket)

    /**
     * Initializes the device object, completing unexisting properties with meaningful defaults.
     * @constructor
     * @prop {object} device The device capabilities, an object of the form: {"width":320,"height":480}.
     */
    var Device = function(device) {

        var deviceCfg = {
            "device": device || {},
            "type": device.type || "screen",
            "width": parseInt(device.width, 10) || window.innerWidth || document.documentElement.clientWidth,
            "height": parseInt(device.height, 10) || window.innerHeight || document.documentElement.clientHeight,
            "device-width": parseInt(device["device-width"], 10) || parseInt(device.width, 10) || screen.width,
            "device-height": parseInt(device["device-height"], 10) || parseInt(device.height, 10) || screen.height,
            "orientation": device.orientation || (this.width > this.height ? "landscape" : "portrait"),
            "aspect-ratio": Device.parseRatio(device["aspect-ratio"]) || (this.width / this.height),
            "device-aspect-ratio": Device.parseRatio(device["device-aspect-ratio"]) || (this["device-width"] / this["device-height"]),
            "color": parseInt(device.color, 10) || 8,
            "color-index": parseInt(device["color-index"], 10) || 0,
            "monochrome": parseInt(device.monochrome, 10) || 0,
            "resolution": parseInt(device.resolution, 10) || 96,
            "scan": device.scan || false,
            "device-pixel-ratio": parseFloat(device["device-pixel-ratio"]) || 1
        };

        deviceCfg.getPixelWidth =  function() {
            var width;
            if (this.orientation == "landscape" || this.orientation == "horizontal" ) {
                width = (this.width > this.height) ? this.width : this.height;
            } else {
                width = (this.width < this.height) ? this.width : this.height;
            }
            return Math.ceil(width * this["device-pixel-ratio"]);
        };
        deviceCfg.getPixelHeight = function() {
            var height;
            if (this.orientation == "landscape" || this.orientation == "horizontal" ) {
                height = (this.width > this.height) ? this.height : this.width;
            } else {
                height = (this.width < this.height) ? this.height : this.width;
            }
            return Math.ceil(height * this["device-pixel-ratio"]);
        }

        initialize.call(deviceCfg);

        function initialize() {
            //Reduce width/height based on device pixel density
            this.width = Math.floor(this.width / this["device-pixel-ratio"]);
            this.height = Math.floor(this.height / this["device-pixel-ratio"]);
        }

        return deviceCfg;
    };

    /**
     * Parses a ratio string (e.g. "1/2").
     * @prop {string} The string to parse.
     * @return {integer} The value of the ratio (e.g. 0.5).
     * @static
     */
    Device.parseRatio = function (ratio) {
        if (typeof ratio === "string") {
            var match = ratio.match(ratioRE);
            if (match && match[1] && match[2] && match[2] !== "0") {
                return parseInt(match[1], 10) / parseInt(match[2], 10);
            }
        }
        return false;
    };

    /**
     * Helper object to read from the beginning of a string.
     * @constructor
     * @prop {string} str The inital string.
     */
    var StringReader = function(str) {

        return {
            str: str,

            /**
             * Tells if the string that is read contains no characters anymore.
             * @return {boolean}
             */
            notEmpty: function () {
                return this.str.length > 0;
            },

            /**
             * Tells if the string that is read contains only whitespace.
             * @return {boolean}
             */
            isBlank: function () {
                return !this.str.match(notBlankRE);
            },

            /**
             * Returns the i first characters from the string and removes them from the string.
             * @param {integer} i
             * @return {string} The i first characters.
             */
            pull: function (i) {
                var pulled = this.str.substr(0, i);
                this.str = this.str.substr(i);
                return pulled;
            },

            /**
             * Returns the match from the RegExp and removes the matched characters from the beginning of the string.
             * Take special care with this function to have a regExp that matches the *beginning* of the string (always start the RegExp with "^")
             * @param {RegExp} regExp
             * @param {boolean} [returnFullMatch] Optional: provide this parameter to indicate that you want the full match object to be returned.
             * @return {string} The content of the matched regular expression, or the full match object if returnFullMatch is true.
             */
            matchPull: function (regExp, returnFullMatch) {
                var match = this.str.match(regExp);
                if (match && match[0].length) {
                    this.str = this.str.substr(match[0].length);
                    return returnFullMatch ? match : match[0];
                } else {
                    return returnFullMatch ? match : "";
                }
            }
        }
    };

    /**
     * Parses and filters the @media queries from the CSS.
     * This function handles correctly the string and comment scopes and also considers backslash character escaping correctly.
     * @param {StringReader} input The CSS to filter.
     * @param {object} device The device capabilities.
     * @param {object} depth Don't provide this parameter, it is only used by the recursion to track the recusion level.
     * @return {string} The filtered CSS.
     */
    function parseAndFilter(input, device, depth) {
        var cssOutput   = "",
            head        = "",
            parsed      = "",
            media       = "",
            match       = false;

        depth = depth || 0;

        while (true) {
            // Let's get everything that isn't a block punctuation ("{" or "}"), and that isn't a media query ("@media")
            parsed = input.matchPull(passThroughRE);
            cssOutput += parsed;
            if (input.notEmpty()) {
                // Let's see why we stopped parsing (basically can be because of "{", "}", or of "@" character)
                head = input.pull(1);
                if (head === "{") {
                    // Opening block => we do a recursion
                    cssOutput += head + parseAndFilter(input, device, depth+1);
                } else if (head === "}") {
                    // Closing block => we exit recursion (unless we are already at the outer level)
                    cssOutput += head;
                    if (depth) {
                        return cssOutput;
                    }
                } else if (head === "@") {
                    // @media query!
                    media = input.matchPull(mediaQueryRE);
                    match = evalMediaQueryList(media.substr(5), device);

                    head = input.pull(1);
                    if (head === "{") {
                        // The @media query is followed by an opening block
                        parsed = parseAndFilter(input, device, depth+1);
                        if (match) {
                            cssOutput += parsed.replace(/\}$/, "");
                        }
                    } else if (head === "}") {
                        // The @media query is followed by an closing block
                        cssOutput += head;
                        if (depth) {
                            return cssOutput;
                        }
                    } else if (head === ";") {
                        cssOutput += head;
                    } else {
                        // Shouldn't happen, unless the RegExp was malformed...
                        error("Media query parsing error at:\n"+input.pull(20)+"...");
                        return cssOutput;
                    }
                } else {
                    // Shouldn't happen, unless the RegExp was malformed...
                    error("Block parsing error at:\n"+input.pull(20)+"...");
                    return cssOutput;
                }
            } else {
                // We've parsed everything there is!
                return cssOutput;
            }
        }
    }

    /**
     * Checks if the comma separated list of media queries match the device.
     * @param {string} query The comma separated list of media queries (e.g. "screen and (min-width: 100px), (orientation: protrait)").
     * @param {object} device The device capabilities.
     * @return {boolean} The result of the match.
     */
    function evalMediaQueryList(query, device) {
        var queryItem = query.replace(commentsRE, " ").split(","); // TODO handle strings correctly

        //query = new StringReader(query.toLowerCase());

        for (var i = 0, l = queryItem.length; i < l; i++) {
            if (evalMediaQueryItem(queryItem[i], device)) {
                return true;
            }
        }

        return false;
    }

    /**
     * Checks the if the media query item matches the device.
     * @param {string} query The media query (e.g. "screen and (min-width: 100px)").
     * @param {object} device The device capabilities.
     * @return {boolean} The result of the match.
     */
    function evalMediaQueryItem(query, device) {
        var match, isNot, isOnly, type, result, needAndKeyword;

        query = new StringReader(query.toLowerCase());

        //console.log("------------\nquery item: "+query.str);

        match = query.matchPull(mediaTypeRE, true);
        if (!match) {
            // Shouldn't happen, unless the RegExp was malformed...
            error("Media query item parsing error at:\n"+query.pull(20)+"...");
            return false;
        }

        isNot  = !!match[1];
        isOnly = !!match[2];
        type   = match[3];

        if ((isNot || isOnly) && !type) {
            // There cannot be the NOT or ONLY keyword without a type
            return false;
        }
        if (type === "not" || type === "only") {
            // There cannot be the NOT and the ONLY keywords at the same time
            return false;
        }

        result = !type || type === "all" || type === device.type;

        // If a type has been defined, there will need to be an AND between it and the expressions that follows
        needAndKeyword = !!type;

        while (true) {
            // If there's nothing left to parse we're done
            if (query.isBlank()) {
                break;
            }
            match = query.matchPull(mediaAndExprRE, true);
            if (!match || (needAndKeyword && !match[1]) || !match[2]) {
                // Invalid query item
                return false;
            }
            result = result && evalMediaQueryExpression(match[2], device);
            needAndKeyword = true;
        }

        return isNot ? !result : result;
    }

    /**
     * Checks the if the media query expression matches the device.
     * @param {string} query The media query expression (e.g. "min-width: 100px").
     * @param {object} device The device capabilities.
     * @return {boolean} The result of the match.
     */
    function evalMediaQueryExpression(query, device) {
        var match = query.match(mediaExprRE),
            isMin, isMax, property, value;

        if (!match) {
            return false;
        }
        isMin  = !!match[1];
        isMax  = !!match[2];
        property = match[3];
        value    = match[4];

        if (!property || !(property in device) || ((isMin || isMax) && (!value || (typeof device[property] !== "number")))) {
            // Invalid query expression
            return false;
        }

        if (value) {
            // Parse ratio
            if (property === "aspect-ratio" || property === "device-aspect-ratio") {
                value = Device.parseRatio(value);
                if (value === false) {
                    return false;
                }
                // Parse numerical values
            } else if (typeof device[property] === "number") {
                value = parseInt(value, 10);
                if (isNaN(value) || value < 0) {
                    return false;
                }
                // Trim strings
            } else if (typeof value === "string") {
                value = value.replace(trimRE, "");
            } else {
                // The value must be a ratio, numerical or a string.
                return false;
            }

            // Now we can finally evaluate the expression
            if (isMin) {
                return value <= device[property];
            }
            if (isMax) {
                return value >= device[property];
            }
            return value === device[property];
        } else {
            return !!device[property];
        }
    }

    /**
     * Defensive error logger.
     * @param {string} The message to log.
     */
    function error(msg) {
        if ("console" in window && "log" in window.console) {
            window.console.log(msg);
        }
    }

    return {

        filterCssText: function(css, device) {
            return parseAndFilter(new StringReader(css), new Device(device));
        },

        evalMediaText: function(media, device){
            return evalMediaQueryList(media, new Device(device));
        },

        getDevice: function(deviceCfg) {
            return new Device(deviceCfg);
        }
    }
};
