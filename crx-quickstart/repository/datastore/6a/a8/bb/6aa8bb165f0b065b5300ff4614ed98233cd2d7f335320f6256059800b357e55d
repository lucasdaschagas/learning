/**
 * ADOBE CONFIDENTIAL
 *
 * Copyright 2012 Adobe Systems Incorporated
 * All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
 */

/**
 * @class CQ.taskmanagement.TaskProjects
 * @extends CQ.Ext.Viewport
 * The TaskProjects is a console providing project and task management functions.
 * @constructor
 * Creates a new TaskProjects console.
 * @param {Object} config The config object
 */
CQ.taskmanagement.TaskProjects = CQ.Ext.extend(CQ.Ext.Viewport, {

    /**
     * Internal clipboard for copy operations.
     * @private
     */
    copyClipboard: null,

    /**
     * @cfg {Object} search
     * The config options of the search field in the grid. Must be a valid
     * {@link CQ.form.SearchField} configuration.
     * Defaults to {"width":200}.
     */

    /**
     * @cfg {Boolean} noSearch
     * <code>true</code> to not render the search field in the grid.
     * @since 5.5
     */

    /**
     * @cfg {} searchPanel
     * The config for the search panel. If defined, the console will be wrapped
     * by a tab panel.
     * @since 5.5
     */

    /**
     * @cfg {String} tabTitle
     * If defined the console will be wrapped by a tab panel.
     */

    /**
     * @cfg {Object} treeLoader
     * The config options of the tree loader. Must be a valid
     * {@link CQ.Ext.tree.TreeLoader} configuration.
     */

    /**
     * @cfg {Object} treeRoot
     * The config options of the tree root. Must be a valid
     * {@link CQ.Ext.tree.TreeNode} configuration.
     */

    /**
     * @cfg {Object} actions
     * Object containing the config options for actions and menu items.
     * Must be valid {@link CQ.Ext.Action} configurations.
     */

    /**
     * @cfg {Object} grid
     * An object containing the grid configurations for different paths.
     * <ul>
     * <li>&lt;Config name&gt;<ul>
     * <li>pageSize: Maximum number of items per page (defaults to {@link CQ.themes.wcm.SiteAdmin.GRID_PAGE_SIZE})</li>
     * <li>pathRegex: Regular expression for the path (defaults to "(/.*)?")</li>
     * <li>storeProxyPrefix: The prefix for the URL used by the store (defaults to "")</li>
     * <li>storeProxySuffix: The suffix for the URL used by the store (defaults to ".pages.json")</li>
     * <li>storePredicate: The predicate used to retrieve the list of pages (defaults to "siteadmin")</li>
     * <li>storeReaderTotalProperty: The property containing the number of pages returned (see {@link CQ.Ext.data.JsonReader}), defaults to "results"</li>
     * <li>storeReaderRoot: The root property to start reading at (see {@link CQ.Ext.data.JsonReader}), defaults to "pages"</li>
     * <li>storeReaderId: The property containing the ID (see {@link CQ.Ext.data.JsonReader}), defaults to "path"</li>
     * <li>storeReaderFields: The fields to read (see {@link CQ.Ext.data.JsonReader}).</li>
     * <li>columns: The column configurations (see {@link CQ.Ext.grid.GridPanel#columns})</li>
     * <li>defaultSortable: True if the grid should be sortable by default (defaults to true)</li>
     * </ul></li></ul>
     */

    /**
     * @cfg {Number} treeAutoExpandMax
     * The maximum number of allowed child nodes for automatic
     * (slingeclick) expansion (defaults to {@link CQ.TREE_AUTOEXPAND_MAX})
     */

    /**
     * @cfg {Object} attribFilter
     * An attribute based node filter.
     * @private
     */

    /**
     * @cfg {Boolean} considerSubNodes
     * True if subnodes should be calculated to ensure correct display of
     * filtered subnodes (defaults to true).
     * @private
     */

    constructor: function(config) {
        var admin = this;
        this.title = config.title;
        config = CQ.Util.applyDefaults(config, {
            "id": "cq-taskprojects",
            "search": {
                "width": 145,
                "listWidth": 260,
                "listAlign": "tr-br",
                "minChars": 3,
                "queryDelay": 500
            },
            "grid": {
                "assets": {
                    "pathRegex":"(/.*)?",
                    "storeProxyPrefix":"",
                    "storeProxySuffix": ".tasks.json",
                    "storePredicate":"taskprojects",
                    "storeReaderTotalProperty": "results",
                    "storeReaderRoot": "tasks",
                    "storeReaderId": "id",
                    "storeReaderFields": [
                        "parentTaskId",
                        "updateTime",
                        "createTime",
                        "completeTime",
                        {
                            name: "description",
                            mapping: "description",
                            sortType: CQ.taskmanagement.TaskProjects.sortTypeIgnoreCase
                        },
                        {
                            name: "instructions",
                            mapping: "instructions",
                            sortType: CQ.taskmanagement.TaskProjects.sortTypeIgnoreCase
                        },
                        {
                            name: "contentPath",
                            mapping: "contentPath",
                            sortType: CQ.taskmanagement.TaskProjects.sortTypeIgnoreCase
                        },
                        {
                            name: "name",
                            mapping: "name",
                            sortType: CQ.taskmanagement.TaskProjects.sortTypeIgnoreCase
                        },
                        {
                            name: "ownerId",
                            mapping: "ownerId",
                            sortType: CQ.taskmanagement.TaskProjects.sortTypeIgnoreCase
                        },
                        {
                            name: "selectedAction",
                            mapping: "selectedAction",
                            sortType: CQ.taskmanagement.TaskProjects.sortTypeIgnoreCase
                        },
                        {
                            name: "status",
                            mapping: "status",
                            sortType: CQ.taskmanagement.TaskProjects.sortTypeIgnoreCase
                        },
                        {
                            name: 'taskPriority',
                            mapping: 'properties.taskPriority'
                        },
                        {
                            name: 'taskDueDate',
                            mapping: 'properties.taskDueDate'
                        },
                        {
                            name: 'taskComment',
                            mapping: 'properties.comment',
                            sortType: CQ.taskmanagement.TaskProjects.sortTypeIgnoreCase
                        },
                        "createdBy",
                        "nameHierarchy",
                        "taskType",
                        "hasSubTasks"
                    ],
                    "columns": [
                        CQ.taskmanagement.TaskProjects.COLUMNS["numberer"],
                        CQ.taskmanagement.TaskProjects.COLUMNS["name"],
                        CQ.taskmanagement.TaskProjects.COLUMNS["contentPath"],
                        CQ.taskmanagement.TaskProjects.COLUMNS["assignedTo"],
                        CQ.taskmanagement.TaskProjects.COLUMNS["priority"],
                        CQ.taskmanagement.TaskProjects.COLUMNS["description"],
                        CQ.taskmanagement.TaskProjects.COLUMNS["duedate"],
                        CQ.taskmanagement.TaskProjects.COLUMNS["taskStatus"],
                        CQ.taskmanagement.TaskProjects.COLUMNS["selectedAction"],
                        CQ.taskmanagement.TaskProjects.COLUMNS["createTime"],
                        CQ.taskmanagement.TaskProjects.COLUMNS["completeTime"],
                        CQ.taskmanagement.TaskProjects.COLUMNS["comment"]
                   ],
                  "defaultSortable": true
                }
            }
        });

        // set up grid configs
        this.lastClickedRow = -1;
        var gridCfgs = {};
        for (var name in config.grid) {
            if (!config.grid[name].pathRegex) {
                // reject grid configs without pathRegex
                // to avoid overriding default config
                continue;
            }
            gridCfgs[name] = config.grid[name];
            if (name != "pages") {
                // fill missing options with defaults
                gridCfgs[name] = CQ.Ext.applyIf(gridCfgs[name], config.grid["pages"]);
            }
            if (gridCfgs[name].pageSize == undefined) {
                gridCfgs[name].pageSize = CQ.themes.wcm.SiteAdmin.GRID_PAGE_SIZE;
            }
            if (gridCfgs[name].pageText == undefined) {
                gridCfgs[name].pageText = CQ.themes.wcm.SiteAdmin.GRID_PAGE_TEXT;
            }
            gridCfgs[name].storeConfig = CQ.Util.applyDefaults(config.store, {
                "autoLoad":false,
                "remoteSort":false,
                "listeners":gridCfgs[name].storeListeners,
                "proxy": new CQ.Ext.data.HttpProxy({
                    "api": {
                        "read": {
                            "url":gridCfgs[name].storeProxyPrefix,
                            "method":"GET"
                        }
                    }
                }),
                "reader": new CQ.Ext.data.JsonReader({
                    "totalProperty": gridCfgs[name].storeReaderTotalProperty,
                    "root": gridCfgs[name].storeReaderRoot,
                    "id": gridCfgs[name].storeReaderId,
                    "fields": gridCfgs[name].storeReaderFields
                }),
                "baseParams": {
                    "start":0,
                    "limit":gridCfgs[name].pageSize,
                    "predicate":gridCfgs[name].storePredicate,
                    "_charset_":"utf-8"
                }
            });
            gridCfgs[name].colModelColumns = new Array();
            for (var i = 0; i < gridCfgs[name].columns.length; i++) {
                var c = gridCfgs[name].columns[i];
                var pref = null;
                if (typeof c == "string") {
                    pref = c;
                } else if (typeof c == "object") {
                    if (c.usePredefined) {
                        pref = c.usePredefined;
                    }
                    if (c.editor) {
                        if (typeof c.editor == "string") {
                            try {
                                eval("c.editor = " + c.editor + ";");
                            } catch (e) { }
                        }
                        try {
                            c.editor = c.editor.cloneConfig();
                        } catch (e) { }
                    }

                    // #33555 - Site Admin: vulnerable to XSS
                    CQ.shared.XSS.updatePropertyName(c, "dataIndex");
                }

                if (pref && CQ.taskmanagement.TaskProjects.COLUMNS[pref]) {
                    var prefCfg = CQ.Util.copyObject(CQ.taskmanagement.TaskProjects.COLUMNS[pref]);
                    // overlay config options
                    for (var prop in c) {
                        if (prop == "usePredefined") continue;
                        prefCfg[prop] = c[prop];
                    }
                    gridCfgs[name].colModelColumns.push(prefCfg);
                } else {
                    gridCfgs[name].colModelColumns.push(c);
                }
            }
        }

        this.debug = config.debug;
        var id = config.id;

        var body = CQ.Ext.getBody();
        body.setStyle("margin", "0");
        if (CQ.Ext.isIE) {
            body.dom.scroll = "no";
        }
        else {
            body.setStyle("overflow", "hidden");
        }

        // actions
        this.actions = [];
        this.checkedActions = [];
        var gridContextActions = [];

        // add global actions
        this.actions.push({
            "id":id + "-grid-refresh",
            "iconCls":"cq-siteadmin-refresh",
            "handler": this.reloadPages,
            "scope":this,
            "tooltip": {
                "title": id == "cq-damadmin" ? CQ.I18n.getMessage("Refresh Asset List") : CQ.I18n.getMessage("Refresh Page List"),
                "text": id == "cq-damadmin" ? CQ.I18n.getMessage("Refreshs the list of assets") : CQ.I18n.getMessage("Refreshs the list of pages"),
                "autoHide":true
            }
        });

        // add custom actions
        this.actions.push("-");
        this.actions = this.actions.concat(
                this.formatActions(config.actions, gridContextActions));

        this.actions.push("->");

        var autoExpandMax = config.treeAutoExpandMax || CQ.TREE_AUTOEXPAND_MAX;

        // tree config
        var treeLdrCfg = CQ.Util.applyDefaults(config.treeLoader, {
            "requestMethod":"GET",
            "dataUrl":"/libs/granite/taskmanager/list.json",
            "baseParams": {
                "ncc":autoExpandMax,
                "_charset_": "utf-8",
                "returnCompleted": true,
                "taskType": "project"
            },
            "baseAttrs": {
                "autoExpandMax":autoExpandMax,
                "singleClickExpand":true
            },
            "listeners": {
                "beforeload": function(loader, node) {
                    this.baseParams.path = node.getPath();
                    // don't add a parentTaskid if we node is the rootnode (i.e. parentNode is null)
                    if ((node.parentNode!=null) && node.attributes && node.attributes.id) {
                        this.baseParams.parentTaskId = node.attributes.id;
                    } else {
                        delete this.baseParams.parentTaskId;
                    }
                }
            },
            createNode : function(attr) {
                attr.text = attr.name;
                if (attr.hasSubTasks) {
                    attr.type = "sling:Folder";
                    attr.cls = "folder";
                    attr.iconCls = "folder";
                    attr.sub = 1;
                } else {
                    attr.type = "OrderedFolder";
                    attr.cls="folder";  // "file";
                    attr.iconCls = "folder"; // "file";
                }

                if (this.baseAttrs) {
                    CQ.Ext.applyIf(attr, this.baseAttrs);
                }

                if (this.applyLoader !== false) {
                    attr.loader = this;
                }
                if (typeof attr.uiProvider == 'string') {
                    attr.uiProvider = this.uiProviders[attr.uiProvider] || eval(attr.uiProvider);
                }

                var node;
                if (!attr.hasSubTasks) {
                    node = new CQ.Ext.tree.TreeNode(attr);
                } else {
                    node = new CQ.Ext.tree.AsyncTreeNode(attr);
                }
                return node;
            }
        });
        this.treeRootCfg = CQ.Util.applyDefaults(config.treeRoot, {
            "name":"content",
            "text":CQ.I18n.getMessage("Websites"),
            "draggable":false,
            "expanded":true,
            "iconCls":"file"
        });

        // look for anchor and clear existing tree state if present
        var anchor = CQ.HTTP.getAnchor(document.location.href);
        if (anchor) {
            var state = CQ.Ext.state.Manager.get(id + "-tree");
            if (state) {
                CQ.Ext.state.Manager.set(id + "-tree", state.width ?
                        { width:state.width } : {});
            }
        }

        // the panel holding the tree and the grid
        var consolePanel = {
            "id":id + "-wrapper",
            "cls":"cq-taskadmin-wrapper",
            "xtype":"panel",
            "layout":"border",
            "border":false,
            "items": [
                {
                    "xtype":"treepanel",
                    "id":id + "-tree",
                    "cls":"cq-taskadmin-tree",
                    "region":"west",
                    "margins":"5 0 5 5",
                    "width": CQ.themes.wcm.SiteAdmin.TREE_WIDTH,
                    "autoScroll":true,
                    "containerScroll":true,
                    "collapsible":true,
                    "collapseMode":"mini",
                    "hideCollapseTool": true,
                    "animate":true,
                    "split":true,
                    "stateful":true,
                    "enableDD":false,
                    "loader": new CQ.Ext.tree.TreeLoader(treeLdrCfg),
                    "root": new CQ.Ext.tree.AsyncTreeNode(this.treeRootCfg),
                    "tbar": [
                        {
                            "id":id + "-tree-refresh",
                            "iconCls":"cq-siteadmin-refresh",
                            "handler":function() {
                                admin.mask();
                                CQ.Ext.getCmp(id + "-tree").getRootNode().reload();
                                admin.loadPath();
                            },
                            "tooltip": {
                                "title":CQ.I18n.getMessage("Refresh Page Tree"),
                                "text":CQ.I18n.getMessage("Refreshs the page tree"),
                                "autoHide":true
                            }
                        }
                    ]
                },{
                    "xtype": "siteadmingrid",
                    "id":id + "-grid",
                    "region":"center",
                    "enableDragDrop":false,
                    "tbar":this.actions,
                    "contextActions": gridContextActions,
                    "admin": this,
                    "listeners":{
                        "rowdblclick":CQ.taskmanagement.TaskManagementAdmin.openTasks,
                    	"render": function(grid) {
                            grid.getSelectionModel().on("selectionchange",
                                function(sm) {
                                    // enable/disable toolbar items
                                    admin.checkActions();
                                }
                            );

                            var grd = document.getElementById(grid.id);
                            var addEvent = grd.addEventListener;
                            if (!addEvent) {
                                addEvent = grd.attachEvent;
                            }


                            // bottom margin to allow reordering at the end of the list
                            grid.getView().mainBody.setStyle("padding-bottom","22px");
                        }
                    }
                }
            ]
        };

        var centerPanel;

        if (config.tabTitle || config.tabs) {
            consolePanel.title = config.tabTitle ? config.tabTitle : CQ.I18n.getMessage("Console");

            var items = [consolePanel];
            
            if(config.tabs) {
	            for(var i=0; i<config.tabs.length; i++) {
	            	items.push(CQ.Util.applyDefaults(config.tabs[i], {"admin": this}));
	            }
            }
            
            centerPanel = {
                "activeTab": 0,
                "region": "center",
                "id": id + "-tabpanel",
                "xtype": "tabpanel",
                "cls": "cq-taskadmin-tabpanel",
                "border": false,
                "enableTabScroll": true,
                "items": items,
                "listeners": {
                    "tabchange": function(panel, tab) {
                        if (tab.path) {
                            // asset tab
                            admin.tabPath = tab.path;
                            admin.setDocumentTitle(tab.path.substring(tab.path.lastIndexOf("/") + 1));
                            CQ.Ext.History.add(tab.path, true);
                        }
                        else if (tab.treePath) {
                        	// admin tab
                            admin.tabPath = "";
                            var title = admin.treePath ? admin.treePath.substring(admin.treePath.lastIndexOf("/") + 1) : "";
                            admin.setDocumentTitle(title);
                            if (admin.treePath) {
                                // avoid history entry on initial tabchange where treePath is undefined
                                CQ.Ext.History.add(admin.treePath, true);
                            }
                        }
                        else if(tab.performSearch) {
                            //search tab
                        	tab.reloadPages();
                        }
                    }
                }
            };
        }
        else {
            consolePanel.region = "center";
            centerPanel = consolePanel;
        }

        CQ.taskmanagement.TaskProjects.superclass.constructor.call(this, {
            "id":id,
            "layout":"border",
            "renderTo":CQ.Util.ROOT_ID,
            "gridConfig": gridCfgs,
            "items": [
                {
                    "id":"cq-header",
                    "xtype":"container",
                    "cls": id + "-header",
                    "autoEl":"div",
                    "region":"north",
                    "items": [
                        new CQ.HomeLink({})
                    ]
                },
                centerPanel
            ]
        });

//        var tree = CQ.Ext.getCmp(id + "-tree");

        // init history, check for anchor and open tree
        new CQ.Ext.form.Hidden({
            "id":CQ.Ext.History.fieldId,
            "renderTo":CQ.Util.ROOT_ID
        });
        var historyFrame = document.createElement("iframe");
        historyFrame.id = CQ.Ext.History.iframeId;
        historyFrame.src = CQ.Ext.SSL_SECURE_URL;
        historyFrame.className = "x-hidden";
        historyFrame.frameBorder = "0";
        historyFrame.border = "0";
        new CQ.Ext.Element(historyFrame).appendTo(CQ.Util.getRoot());

        CQ.Ext.History.init();
        CQ.Ext.History.on("change", function(token) {
            var current = admin.getCurrentPath();
            if (admin.id == "cq-damadmin") {
                // check if token is a tree node (direcotry) or an asset
                var tree = CQ.Ext.getCmp(window.TaskAdmin_id + "-tree");
                var isTreeNode = false;
                tree.selectPath(token, "name",
                    function(success) {
                        if (success) isTreeNode = true;
                    }
                );

                var tabPanel = CQ.Ext.getCmp(window.TaskAdmin_id + "-tabpanel");

                if (isTreeNode) {
                    // token is directory: => open admin tab
                    tabPanel.setActiveTab(admin.id + "-wrapper");
                }
                else {
                    // token is asset => open asset
                    var id = CQ.DOM.encodeId(token);
                    var editor = CQ.Ext.getCmp(id);
                    if (editor) {
                        // asset is already open: switch to tab
                        tabPanel.setActiveTab(editor);

                    }
                    else {
                        // asset is not open: load path in tree and open asset
                        admin.loadPath(token);
                        tabPanel.setActiveTab(admin.id + "-wrapper");
                    }
                }
            }
            else {
                if (token != current) {
                    admin.loadPath(token);
                }
            }
        });

        if (anchor) {
            admin.loadPath(decodeURI(anchor));
        }
        window.TaskAdmin_id = id;

        // stop editing when window loses focus
        CQ.Ext.EventManager.on(window, "blur", function() {
            window.setTimeout(function() {
            	CQ.Ext.getCmp(id + "-grid").stopEditing(true);
            },500);
        });

        this.typeCache = {};
    },

    initComponent : function() {
        CQ.taskmanagement.TaskProjects.superclass.initComponent.call(this);

        var admin = this;
        CQ.Ext.getCmp(admin.id + "-tree").getSelectionModel().on(
            "selectionchange",
            function(selModel, node) {
                if (node) {
                    var path = node.getPath();
                    admin.loadPages(node);
                    CQ.Ext.History.add(path, true);
                    admin.setDocumentTitle(node.text);
                    admin.checkActions();
                }
            }
        );
    },

    setDocumentTitle: function(text) {
        var t = this.title;
        if (text) t += " | " + text;
        document.title = t;
    },

    /**
     * Returns the node or resource type of the node at the specified path.
     * @param path The path
     * @return The type
     */
    getType: function(path) {
        if (!this.typeCache[path]) {
            var info = CQ.HTTP.eval(path + ".json");
            if (info) {
                this.typeCache[path] = info["jcr:primaryType"];
            }
        }
        return this.typeCache[path];
    },

    copySelectionToClipboard: function() {
        this.copyClipboard = new Array();

        var selections = this.getSelectedPages();
        for (var i=0; i<selections.length; i++) {
            this.copyClipboard.push(selections[i].id);
        }
        this.checkActions();
    },

    hasClipboardSelection: function() {
        return ((this.copyClipboard != null) && (this.copyClipboard.length > 0));
    },

    getGridConfigId: function(path) {
        if (!path) path = "/";
        var gridCfgs = this.initialConfig.gridConfig;
        var id;
        for (id in gridCfgs) {
            gridCfg = gridCfgs[id];
            if (new RegExp(gridCfgs[id].pathRegex).test(path)) {
                break;
            }
        }
        if (!id) id = "pages";
        return id;
    },

    getGridConfig: function(path) {
        var gridCfgs = this.initialConfig.gridConfig;
        var id = this.getGridConfigId(path);
        if (id) {
            return gridCfgs[id];
        } else {
            return null;
        }
    },

    reconfigureGrid: function(grid, path, parentTaskId) {
        grid.inProgress = [];
        var gridCfg = this.getGridConfig(path);
        if (!gridCfg) {
            // should actually never happen, but just in case
            return grid.getStore();
        }
        if (!gridCfg.inited) {
            gridCfg.store = new CQ.Ext.data.Store(gridCfg.storeConfig);
            gridCfg.store.on("beforeload", function() {
                grid.inProgress = [];
            });
            gridCfg.colModel = new CQ.Ext.grid.ColumnModel({
                "columns": gridCfg.colModelColumns,
                "defaults": {
                    "sortable": true
                }
            });
            gridCfg.colModel.on("hiddenchange", function(cm, index, hidden) {
                // make sure grid state is saved when columns are hidden or shown
                grid.saveState();
                if (!hidden && cm.getColumnById(cm.getColumnId(index)).refreshOnHiddenchange) {
                    // refresh thumbnail column when shown
                    grid.getView().refresh(true);
                }

            });
            gridCfg.inited = true;
        }
        // update store url
        var url = "/libs/granite/taskmanager/list.json";


        url = url + "?returnCompleted=true";
        if (parentTaskId) {
            url = url + "&parentTaskId="+CQ.HTTP.encodePath(parentTaskId);
        } else {
            // if we do not have a parent task specified, then we want to return project tasks with no parent
            url = url + "&taskType=project";
        }

        gridCfg.store.proxy.api["read"].url = url;
        // forget last options
        if (gridCfg.store.lastOptions) {
            delete gridCfg.store.lastOptions;
        }

        // check if grid needs to be reconfigured
        if (gridCfg.pathRegex != this.lastGridPathRegex) {
            grid.reconfigure(gridCfg.store, gridCfg.colModel);
            var id = this.getGridConfigId(this.treePath);
            grid.stateId = grid.id + "-" + id;
            grid.initState();
            this.lastGridPathRegex = gridCfg.pathRegex;
            gridCfg.store.removeAll();
        }
        return gridCfg.store;
    },

    reloadPages: function() {
        this.mask();
        var store = CQ.Ext.getCmp(this.id + "-grid").getStore();
        store.reload({
            "callback": function() {
                this.unmask();
            },
            "scope": this
        });
    },

    loadPages: function(node, selectRecord) {
        this.mask();
        this.lastClickedRow = -1;
        var path = node.getPath();
        this.treePath = path;
        this.treePathEncoded = CQ.HTTP.encodePath(path);
        var grid = CQ.Ext.getCmp(this.id + "-grid");



        var parentTaskId = null;
        if ((node.parentNode!=null) && node.attributes && node.attributes.id) {
            parentTaskId = node.attributes.id;
        }

        var store = this.reconfigureGrid(grid, this.treePath, parentTaskId);
        var id = this.id;
        var admin = this;
        store.reload({
            callback: function(records, options, success) {
                var recSelected = false;
                if (selectRecord) {
                    var selModel = grid.getSelectionModel();
                    for (var i = 0; i < records.length; i++) {
                        if (records[i].id == selectRecord) {
                            selModel.clearSelections();
                            selModel.selectRecords([records[i]]);
                            recSelected = true;
                        }
                    }
                    if (id == "cq-damadmin" && selModel.hasSelection()) {
                        CQ.taskmanagement.TaskProjects.openPages.call(admin);
                    }
                }

                if (selectRecord && !recSelected) {
                    try {
                        var sort = grid.getStore().sortInfo;
                        var url = store.proxy.api.read.url;
                        for (var param in store.baseParams) {
                            url = CQ.HTTP.addParameter(url, param, store.baseParams[param]);
                        }
                        if (sort) {
                            url = CQ.HTTP.addParameter(url, "sort", sort.field);
                            url = CQ.HTTP.addParameter(url, "dir", sort.direction);
                        }
                        url = CQ.HTTP.addParameter(url, "index", "true");
                        url = CQ.HTTP.addParameter(url, "path", selectRecord);

                        var index = CQ.HTTP.eval(url).index + 1;
                        if (index > 0) {
                            var selectRow = function(recs) {
                                grid.getSelectionModel().selectRecords([this.getById(selectRecord)]);
                                this.un("load", selectRecord);
                            };
                            grid.getStore().on("load", selectRow);
                        }
                    } catch (e) {
                        //console.log("error:" + e);
                    }
                }
                admin.unmask();
            }
        });
    },

    loadPath: function(path, selectRecord) {
        var admin = this;
        var callback = function(success, node, selectRecord) {
            if (success) {
                this.loadPages(node, selectRecord);
                node.expand();
            }
            else {
                // path not found => load parent
                this.loadPath(this.treePath.substring(0, this.treePath.lastIndexOf("/")), this.treePath);
            }
        };

        // select tree path
        var tree = CQ.Ext.getCmp(this.id + "-tree");

        if (!path && !this.treePath) {
            this.treePath = tree.getRootNode().getPath();
            tree.selectPath(tree.getRootNode().id, "id",
                function(success, node) {
                    callback.call(admin, success, node, selectRecord);
                }
            );
        } else {
            if (path) {
                this.treePath = path;
            }
            if (this.treePath == tree.getRootNode().getPath()) {
                tree.selectPath(tree.getRootNode().id, "id",
                    function(success, node) {
                        callback.call(admin, success, node, selectRecord);
                    }
                );
            } else {
                tree.selectPath(this.treePath, "name",
                    function(success, node) {
                        callback.call(admin, success, node, selectRecord);
                    }
                );
            }
        }
    },

    reloadCurrentTreeNode: function() {
        // TODO insert new tree node directly instead of reloading parent
        var tree = CQ.Ext.getCmp(this.id + "-tree");
        var selectedNode;
        try {
            selectedNode = tree.getSelectionModel().getSelectedNode();
        } catch (e) {
        }
        if (selectedNode && selectedNode != tree.getRootNode()) {
            var selectedPath = selectedNode.getPath();
            selectedNode.parentNode.reload(function() {
                tree.selectPath(selectedPath, null, function(success, node) {
                    if (success) {
                        node.expand();
                    }
                });
            });
        } else {
            tree.getRootNode().reload();
        }
        CQ.Ext.getCmp(this.id + "-grid").getStore().reload();
        this.unmask();
    },

    /**
     * Returns the currently selected path in the tree.
     * @return {String} The current path
     */
    getCurrentPath: function() {
        var tree = CQ.Ext.getCmp(this.id + "-tree");
        var node = tree.getSelectionModel().getSelectedNode();
        if (node != null) {
            return node.getPath();
        }
    },

    /**
     * Returns the currently selected pages in the grid.
     * @return {Object[]} The selected pages
     */
    getSelectedPages: function() {
    	
    	var gridSel = CQ.Ext.getCmp(this.id + "-grid").getSelectionModel().getSelections();
    	
    	//use grid from active tab
    	var tabPanel = CQ.Ext.getCmp(window.TaskAdmin_id + "-tabpanel");
        if (tabPanel) {
        	var grid = CQ.Ext.getCmp(tabPanel.getActiveTab().id + "-grid");
        	if(grid) {
        		gridSel = grid.getSelectionModel().getSelections();
        	}
        }
        
        if (gridSel.length > 0) {
            return gridSel;
        } else if (this.treePath) {
        	var admin = this;
            var node = CQ.Ext.getCmp(this.id + "-tree").getSelectionModel().getSelectedNode();
            return [{
                "id": admin.treePath,
                "label":admin.treePath.substring(admin.treePath.lastIndexOf("/")+1),
                "replication": node && node.attributes ? node.attributes.replication : null,
                "title":node ? node.text : null,
                "type":null,
                "_displayTitle_": true,
                "get":function(name) {
                    // fake getter
                    return this[name];
                }
            }];
        } else {
            return [];
        }
    },

    /**
     * Masks the main panel for loading.
     */
    mask: function() {
        if (!this.loadMask) {
            this.loadMask = new CQ.Ext.LoadMask(this.id + "-wrapper", {
                "msg": CQ.I18n.getMessage("Loading...")
            });
        }
        this.loadMask.show();
    },

    /**
     * Unmasks the main panel after loading.
     */
    unmask: function(timeout) {
        if (!this.loadMask) return;
        this.loadMask.hide();
    }

});

CQ.Ext.reg("taskprojects", CQ.taskmanagement.TaskProjects);

//overrides current CQ.taskmanagement.TaskProjects class with methods contained in CQ.wcm.AdminBase.
CQ.Ext.override(CQ.taskmanagement.TaskProjects, CQ.wcm.AdminBase);


CQ.taskmanagement.TaskProjects.formatDate = function(date) {
    if (typeof date == "string") {
        // nothing we can do here, it's already formatted.
        return date;
    }
    if (typeof date == "number") {
        date = new Date(date);
    }
    var fmt = CQ.I18n.getMessage("d-M-Y H:i", null, "Date format for ExtJS SiteAdmin (short, eg. two-digit year, http://extjs.com/deploy/ext/docs/output/Date.html)");
    return date.format(fmt);
};

CQ.taskmanagement.TaskProjects.sortTypeIgnoreCase = function(value) {
    if (value) {
        return value.toLowerCase();
    }
    return value;
}

/**
 * Returns the 'New file' upload URL
 * @param {String} path Upload path
 * @param {String} fileName File name
 * @return {String} Upload URL
 * @since 5.5
 */
CQ.taskmanagement.TaskProjects.getPostUploadUrl = function(path, fileName) {
    var url = path;
    if (path.match(/^\/content\/dam.*/)) {
        url += ".createasset.html";
    } else if (fileName) {
        url += "/" + fileName;
    }
    return url;
};

// constants
CQ.taskmanagement.TaskProjects.DD_GROUP_TREE = "cq.siteadmin.tree";
CQ.taskmanagement.TaskProjects.DD_GROUP_GRID = "cq.siteadmin.grid";

CQ.taskmanagement.TaskProjects.TEXT_EDITOR = new CQ.Ext.form.TextField({
    "enableKeyEvents":true,
    "listeners": {
        "render": function() {
            window.CQ_TextEditor = this;
            this.enterPressed = false;
        },
        "keydown": function(field, evt) {
            this.enterPressed = (evt.getKey() == evt.ENTER);
        }
    }
});

CQ.taskmanagement.TaskProjects.GRID_LISTENERS = {
    "beforeedit": {
        "title": function(params) {
        	 var lockedBy = params.record.data.lockedBy;
             var currentUserId = CQ.User.getUserID();
             var locked = lockedBy != undefined && lockedBy.length > 0 && lockedBy != currentUserId;
             if(locked){
                 return false;
             }
            return this.inProgress.indexOf(params.record.id) == -1;
        }
    },
    "afteredit": {
        "title": function(params) {
            if (window.CQ_TextEditor.enterPressed) {
                if (params.originalValue == undefined) {
                    params.originalValue = "";
                }
                CQ.Ext.Msg.confirm(
                    CQ.I18n.getMessage("Change title"),
                    CQ.I18n.getMessage("Are you sure you want to change the title from '{0}' to '{1}'?", [CQ.shared.XSS.getXSSValue(params.originalValue), CQ.shared.XSS.getXSSValue(params.value)]),
                    function(btn) {
                        if (btn == 'yes') {
                            var titleProp = "./jcr:content/jcr:title";
                            if (params.record.get("type") == "dam:Asset") {
                                titleProp = "./jcr:content/metadata/dc:title";
                            }
                            var postParams = {};
                            postParams["_charset_"] = "utf-8";
                            postParams["./jcr:content/jcr:primaryType"] = "nt:unstructured";
                            postParams[titleProp] = params.value;

                            var response = CQ.HTTP.post(params.record.id, null, postParams);
                            if (CQ.HTTP.isOk(response)) {
                                params.record.commit();
                                try {
                                    CQ.Ext.getCmp(window.TaskAdmin_id + "-tree").getSelectionModel()
                                            .getSelectedNode().reload();
                                } catch (e) { }
                            } else {
                                params.record.reject();
                            }
                        } else {
                            params.record.reject();
                        }
                    },
                    this
                );
            } else {
                params.record.reject();
            }
        },
        "label": function(params) {
            // set new ID in page list
            var oldID = params.record.id;
            params.record.id = oldID.substring(0, oldID.lastIndexOf("/") + 1) + params.value;

            // update tree node name
            var tree = CQ.Ext.getCmp(this.id + "-tree");
            var root = tree.getRootNode();

            var node;
            var path = oldID.split("/");
            for (var i = 1; i < path.length; i++) {
                var name = path[i];
                if (name == root.attributes.name) {
                    node = root;
                } else {
                    node = node.findChild("name", name);
                }
            }
            node.attributes.name = params.value;
        }
    }
};

CQ.taskmanagement.TaskProjects.COLUMNS = {
    "numberer": {
        "id":"numberer",
        "header":CQ.I18n.getMessage(""),
        "width":23,
        "menuDisabled":true,
        "fixed":true,
        "hideable":false,
        "dataIndex":"index",
        "renderer": function(v, params, record) {
            if (v != undefined) {
                return v + 1;
            }
            return "";
        }
    },
    "name": {
        "header":CQ.I18n.getMessage("Task"),
        "id":"name",
        "dataIndex":"name",
        "width":60
    },
    "contentPath": {
        "header":CQ.I18n.getMessage("Asset"),
        "id":"contentPath",
        "dataIndex":"contentPath",
        "renderer":function(v, params, record) {
            if (record && record.json) {
                if (record.json.properties) {
                    if (record.json.contentPath) {
                        return CQ.shared.XSS.getXSSValue(record.json.contentPath);
                    }
                }
            }
            return "";
        }
    },
    "assignedTo": {
        "header":CQ.I18n.getMessage("Assigned To"),
        "id":"assignedTo",
        "dataIndex":"ownerId",
        "renderer":function(v, params, record) {
            if (record && record.json) {
                if (record.json.ownerId) {
                    return record.json.ownerId;
                }
            }
            return "";
        },
        "width":50
    },
    "priority": {
        "header":CQ.I18n.getMessage("Priority"),
        "id":"priority",
        "dataIndex":"taskPriority",
        "width":50,
        "renderer": function (v, params, record) {
            if (v) {
                var testValue = v.toLowerCase();
                // split it up to make sure the localization extractor
                // catches these phrases.
                if (testValue === "high") {
                    return CQ.I18n.getMessage("High");
                }
                if (testValue === "medium") {
                    return CQ.I18n.getMessage("Medium");
                }
                if (testValue === "low") {
                    return CQ.I18n.getMessage("Low");
                }
            }
            return "";
        }
    },
    "description": {
        "header":CQ.I18n.getMessage("Description"),
        "id":"description",
        "dataIndex":"description"
    },
    "taskDueDate": {
        "header":CQ.I18n.getMessage("Due Date"),
        "id":"duedate",
        "dataIndex":"taskDueDate",
        "renderer":function(v, params, record) {
            if (record.get("taskDueDate")) {
                return CQ.taskmanagement.TaskProjects.formatDate(record.get("taskDueDate"));
            }
            return "";
        }
    },
    "taskStatus": {
        "header":CQ.I18n.getMessage("Status"),
        "id":"status",
        "dataIndex":"status",
        "renderer": function (v, params, record) {
            if (v) {
                if (v === "ACTIVE") {
                    return CQ.I18n.getMessage("Active");
                }
                if (v === "COMPLETE") {
                    return CQ.I18n.getMessage("Completed");
                }
            }
            return "";
        }
    },
    "selectedAction": {
        "header":CQ.I18n.getMessage("Selected Action"),
        "id":"selectedAction",
        "dataIndex":"selectedAction",
        "renderer":function(v, params, record) {
            if (record && record.json && record.json.selectedAction)  {
                return record.json.selectedAction;
            }
            return "";
        }
    },
    "createTime": {
        "header":CQ.I18n.getMessage("Created"),
        "id":"createTime",
        "dataIndex":"createTime",
        "renderer":function(v, params, record) {
            if (record.get("createTime")) {
                return CQ.taskmanagement.TaskProjects.formatDate(record.get("createTime"));
            }
            return "";
        }
    },
    "completeTime": {
        "header":CQ.I18n.getMessage("Completed"),
        "id":"completeTime",
        "dataIndex":"completeTime",
        "renderer":function(v, params, record) {
            if (record.get("completeTime")) {
                return CQ.taskmanagement.TaskProjects.formatDate(record.get("completeTime"));
            }
            return "";
        }
    },
    "comment": {
        "header":CQ.I18n.getMessage("Comment"),
        "id":"comment",
        "dataIndex":"taskComment"
    }
};

/**
 * The context value for actions to appear on the tool bar.
 * @static
 * @final
 * @type String
 */
CQ.taskmanagement.TaskProjects.CONTEXT_TOOLBAR = "toolbar";

/**
 * The context value for actions to appear on the context menu.
 * @static
 * @final
 * @type String
 */
CQ.taskmanagement.TaskProjects.CONTEXT_CONTEXTMENU = "contextmenu";

/**
 * The regular expression to identify that file upload will create a DAM asset.
 * @static
 * @final
 * @type String
 */
CQ.taskmanagement.TaskProjects.UPLOAD_URL_ASSET_REGEXP = /\.createasset\.html$/;
