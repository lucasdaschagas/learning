/*
 * ADOBE CONFIDENTIAL
 *
 * Copyright 2012 Adobe Systems Incorporated
 * All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
 */

(function(document, $) {
    "use strict";

    var CONST_STATICRENDITIONS_SERVICE = "/mnt/overlay/dam/gui/coral/content/commons/sidepanels/renditions/items/unifiedrenditionsouter/items/unifiedrenditionsscroll/items/unifiedrenditions/items/colorpalettedata/items/staticrenditions.html"; // eslint-disable-line max-len
    var ns = ".unified-renditions";
    var s7presetPath = "";
    var prevstatic = null;
    var prevdynamic = null;
    var isRemoteAsset = false;
    // this variable is exported by a script tag at staticrenditions.jsp , CQ-4246182
    var isVideoAsset = null;
    var assetName = window.ASSET_NAME;
    var ui = $(window).adaptTo("foundation-ui");
    function showDynamicRenditions(show) {
        if (isVideoAsset) {
            $(".dynamic-renditions").hide();
            if (show) {
                $(".static-renditions").show();
                $(".each-rendition").not(".encodes-avs-item").hide();
                $(".colorpalette-headings").hide();
                $(".encodes-avs-item").show();
            } else {
                $(".encodes-avs-item").hide();
            }
        } else {
            if (show) {
                $(".dynamic-renditions").show();
            } else {
                $(".dynamic-renditions").hide();
            }
        }
    }

    function showSmartCropRenditions(show) {
        if (isVideoAsset) {
            $(".smartcrop-renditions").hide();
            if (show) {
                $(".static-renditions").show();
                $(".each-rendition").not(".encodes-avs-item").hide();
                $(".colorpalette-headings").hide();
                $(".encodes-avs-item").show();
            } else {
                $(".encodes-avs-item").hide();
            }
        } else {
            if (show) {
                $(".smartcrop-renditions").show();
                $(".colorpalette-headings").hide();
            } else {
                $(".smartcrop-renditions").hide();
            }
        }
    }

    function setCopy(copyUrlClipboardVisible, copyRessCodVisible) {
        copyUrlClipboardVisible ? $("#copyUrlClipboard").show() : $("#copyUrlClipboard").hide();
        copyRessCodVisible ? $("#copyRessCode").show() : $("#copyRessCode").hide();
        if (copyUrlClipboardVisible || copyRessCodVisible) {
            $(".renditionscontainer").find(".copy-buttons-container").show();
            $(".unified-renditions-outer").css("bottom", "");
            $(".unified-renditions-outer").addClass("copybtns");
        } else {
            $(".renditionscontainer").find(".copy-buttons-container").hide();
            $(".unified-renditions-outer").removeClass("copybtns");
        }
    }

    var manageRenditions = function() {
        var assetDetailLength = $(".foundation-content-current.asset-detail").length;
        var renditionsLength = $(".foundation-content-current .rendition-canvas").length;
        if (!assetDetailLength && !renditionsLength) {
            var isColorPalletActive = !$(".rail .icongroup a[data-view='colorpalette'] " +
                ".rail-colorpalette-renditions").hasClass("hidden");
            if (isColorPalletActive) {
                $(".rail .rail-view.active").removeClass("active");
                $($(".icongroup a.active")).removeClass("active");
                $(".rail .rail-view .unified-renditions").parent().removeClass("active");
                $($(".rail .rail-view")[0]).addClass("active");
            }
            $(".rail .rail-colorpalette-renditions").addClass("hidden");
        }

        // if there is no preview path,
        // it means the file being browsed is not available for  viewers, or dm is turned off.
        if (!$("#rendition-preview").data("s7imagePreviewPath")) {
            showDynamicRenditions(false);
            return;
        }
    };

    var renderStaticRenditionData = function() {
        var $staticRenditions = $(".static-renditions");
        var path = $(".foundation-content-path").data("foundation-content-path");
        var url = CONST_STATICRENDITIONS_SERVICE + encodeURIComponent(path) + "?ch_ck=" + Date.now();
        $.ajax({
            type: "GET",
            async: false,
            url: Granite.HTTP.externalize(url),
            success: function(response) {
                $staticRenditions.replaceWith(Granite.UI.Foundation.Utils.processHtml(response));
                $(".rendition-active").removeClass("rendition-active").find(
                    "[aria-pressed]").attr("aria-pressed", "false");
                setCopy(false, false);

                if ($(".unified-renditions-outer").data("enable-restore-selection")) {
                    var items = $(".each-rendition");
                    if (prevstatic && prevstatic !== "") {
                        for (var i = 0; i < items.length; i++) {
                            var item = $(items[i]);
                            if (item.attr("href") === prevstatic) {
                                item.trigger("click");
                            }
                        }
                    } else {
                        if ($(".damadmin-rail-colorpalette-renditions").find("select").first().val() !== "all") {
                            $(items[0]).trigger("click");
                        }
                    }
                }
            }
        });
    };

    // For static renditions
    $(document).on("fetch-static-rendition" + ns, function(e, fillArea, group, showHeading) {
        if ($(".damadmin-rail-colorpalette-renditions").find("select").first().val() !== "all") {
            prevstatic = $(".each-rendition.rendition-active").attr("href");
        }

        renderStaticRenditionData();
        $(".static-renditions").show();
        if (!showHeading) {
            showDynamicRenditions(false);
            $(".static-renditions > .colorpalette-headings").hide();
        } else {
            if (!$(".colorpalettedata").data("isDMRendition")) {
                $(".static-renditions > .colorpalette-headings").text(Granite.I18n.getVar(group));
            }
            $(".static-renditions > .colorpalette-headings").show();
        }
    });

    var renderVideo = function(val) {
        var $val = $(val);
        $(".each-rendition").removeClass("rendition-active").find(
            "[aria-pressed]").attr("aria-pressed", "false");
        $val.addClass("rendition-active").find(
            "a[role='button']").attr("aria-pressed", "true");
        $("#image-preview").hide();
        $(".asset-view").hide();
        $(".asset-detail-metadata").hide();
        var url = $(val).attr("href");
        if (url.indexOf("/") !== 0) {
            url = "/" + url;
        }
        if (url) {
            url = "/mnt/overlay/dam/gui/content/s7dam/video/rendition.html" + url;
        }
        var contentAPI = $(".foundation-content").adaptTo("foundation-content");
        contentAPI.go(Granite.HTTP.externalize(url), true);
    };

    var onStaticRenditionClick = function(val) {
        var isSetCopyDefault = true;
        var $val = $(val);
        var type = $val.data("type");
        if (type === "video/mp4" ||
            type === "video/webm" ||
            (type === "Video" &&
            $(".foundation-content-path").data("isremoteasset"))) {
            renderVideo(val);
        } else {
            var href = $(val).attr("href");
            $(".rendition-active").removeClass("rendition-active").find(
                "[aria-pressed]").attr("aria-pressed", "false");
            $val.addClass("rendition-active").find(
                "a[role='button']").attr("aria-pressed", "true");
            $("#image-preview").hide();
            $(".asset-view").hide();
            $(".asset-detail-metadata").hide();

            if (Granite.Toggles.isEnabled("FT_CQ-4283511")) {
                if ($(val).data("threedsourcepath")) {
                    isSetCopyDefault = false;
                    $("#copyUrlClipboard").data("message", "");
                    setCopy(true, false);
                    $.get("/.embedcode.copyurllong.text" + $(val).data("threedsourcepath"))
                        .always(function(response) {
                            if (response.readyState) { // fail
                                $("#copyUrlClipboard").data("message", response.statusText);
                            } else {
                                $("#copyUrlClipboard").data("message", response);
                            }
                        });
                }
            }
            var url = $(".unified-renditions").data("renditionpathprefix") + href;
            var contentAPI = $(".foundation-content").adaptTo("foundation-content");
            contentAPI.go(Granite.HTTP.externalize(url), true);
            if (type === "text/html") {
                url = href;
                window.open(url, "_blank").blur();
                window.focus();
            }
        }

        if (isSetCopyDefault) {
            setCopy(false, false);
        }
    };

    $(document).on("click keydown", ".each-rendition", function(e) {
        if (e.type === "click" || (e.type === "keydown" && (e.keyCode === 13 || e.keyCode === 32))) {
            e.preventDefault();
            if ($(this).data("type") !== "dynamic") {
                onStaticRenditionClick(this);
            }
        }
    });

    // For dynamic renditions based on Scene7 Presets
    $(document).on("fetch-dynamic-rendition" + ns, function(e, fillArea, group, showHeading) {
        if ($(".damadmin-rail-colorpalette-renditions").find("select").first().val() !== "all") {
            prevdynamic = $("div.foundation-collection-item.rendition-active").data("foundation-collection-item-id");
        }
        if (!showHeading) {
            $(".static-renditions").hide();
            $(".dynamic-renditions > .colorpalette-headings").hide();
        } else {
            $(".dynamic-renditions > .colorpalette-headings").show();
        }
        showDynamicRenditions(true);
        // Add dynamic rendition CSS to enable scrollbar when content is larger than available space.
        $(".colorpalettedata").addClass("dynamicrenditiondata");
        $(".colorpalettedata").css("position", "relative");

        var items = $("div.foundation-collection-item");
        if (prevdynamic && prevdynamic !== "") {
            for (var i = 0; i < items.length; i++) {
                var item = $(items[i]);

                if (item.data("foundation-collection-item-id") === prevdynamic) {
                    item.trigger("click");
                    return;
                }
            }
        } else {
            if ($(".damadmin-rail-colorpalette-renditions").find("select").first().val() !== "all") {
                $(items[0]).trigger("click");
            } else {
                setCopy(false, false);
            }
        }
    });

    // For smartcrop renditions based on Scene7 Presets
    $(document).on("fetch-smartcrop-rendition", function(e, fillArea, group, showHeading) {
        if ($(".damadmin-rail-colorpalette-renditions").find("select").first().val() !== "all") {
            prevdynamic = $("div.foundation-collection-item.rendition-active").data("foundation-collection-item-id");
        }
        if (!showHeading) {
            $(".static-renditions").hide();
            $(".dynamic-renditions > .colorpalette-headings").hide();
        } else {
            $(".dynamic-renditions > .colorpalette-headings").show();
        }
        showDynamicRenditions(true);
        // Add dynamic rendition CSS to enable scrollbar when content is larger than available space.
        $(".colorpalettedata").addClass("dynamicrenditiondata");
        $(".colorpalettedata").css("position", "relative");

        var items = $("div.foundation-collection-item");
        if (prevdynamic && prevdynamic !== "") {
            for (var i = 0; i < items.length; i++) {
                var item = $(items[i]);

                if (item.data("foundation-collection-item-id") === prevdynamic) {
                    item.trigger("click");
                    return;
                }
            }
        } else {
            if ($(".damadmin-rail-colorpalette-renditions").find("select").first().val() !== "all") {
                $(items[0]).trigger("click");
            } else {
                setCopy(false, false);
            }
        }
    });

    // For all renditions
    $(document).on("fetch-all-rendition" + ns, function(e, fillArea, group) {
        e.stopImmediatePropagation();
        e.preventDefault();

        prevstatic = $(".each-rendition.rendition-active").attr("href");
        prevdynamic = $("div.foundation-collection-item.rendition-active").data("foundation-collection-item-id");

        // hard coded data : would be replaced by fetching through S7 api
        if (!s7presetPath || s7presetPath === "") {
            if (!isVideoAsset) {
                $(".unified-renditions").find(".wrap").addClass("hide");
            }
            $(".colorpalettedata").trigger("fetch-static-rendition",
                [ $(".colorpalettedata"), Granite.I18n.get("Renditions"), true ]);
            $(".colorpalettedata").removeClass("dynamicrenditiondata");

            setCopy(false, false);
        } else {
            $(".colorpalettedata").trigger("fetch-static-rendition", [ $(".colorpalettedata"), "Static", true ]);
            $(".colorpalettedata").trigger("fetch-dynamic-rendition", [ $(".colorpalettedata"), "Dynamic", true ]);
        }
        if (isVideoAsset) {
            $(".dynamic-renditions").addClass("hide");
        }
    });

    function showClipboard(heading, message) {
        // update dialog title
        var publishRootPath = $("#image-preview-unif").data("publishRootPath");
        var productionImageserver = $("#image-preview-unif").data("productionImageserver");
        var assetPath = $("#rendition-preview").data("ips-imageurl") || $("#image-preview-unif").data("assetPath");

        // use companyAlias (if available) instead of companyName
        var companyAlias = $("#image-preview-unif").data("companyalias");
        var companyName = $("#image-preview-unif").data("scene7companyid");
        var isCompanyAliasFeatureEnabled = $("#image-preview-unif").data("iscompanyaliasfeatureenabled");
        if (isCompanyAliasFeatureEnabled && isCompanyAliasFeatureEnabled === true &&
            companyName && companyName !== "" &&
            companyAlias && companyAlias !== "") {
            assetPath = assetPath.replace(companyName + "/", companyAlias + "/");
        }

        message = message.replace("$$s7publishRootPath$$", publishRootPath);
        message = message.replace("$$isRootPath$$", productionImageserver);
        message = message.replace("$$s7assetId$$", assetPath);
        message = message.replace(/([^:])\/\/+/g, "$1/"); // cleanup url (remove extra double slash)

        $("coral-dialog-header").text(decodeURI(heading));

        var $messageClipboard = $("#messageClipboard");
        var $message = $messageClipboard.find(".message");
        if (heading.indexOf("Embed") !== -1) {
            $message.val($.trim(message));
        } else {
            // since message contains only url, decoding is not necessary
            // Decoding breaks for few characters like '%20' in asset name
            // which add spaces and breaks URL
            $message.val($.trim(message));
        }

        // show dialog in order to correctly determine scroll height of text area
        $(document.querySelector("#messageClipboard")).show();

        var msgScrH = $message[0].scrollHeight;
        var foundationH = $(".foundation-layout-panel-content").height();
        if (msgScrH > parseInt(foundationH - 300)) {
            msgScrH = parseInt(foundationH - 300);
        }
        $message.height(msgScrH);

        // show dialog after adjusting height
        document.querySelector("#messageClipboard").show();
    }


    var copyurlFn = function(e) {
        showClipboard("URL", $("#copyUrlClipboard").data("message"));
    };
    var embedFn = function(e) {
        showClipboard("Embed Responsive Image", decodeEmbedCode($("#copyRessCode").data("message")));
    };

    $(document).on("foundation-contentloaded", function(e) {
        if ($("#aem-assets-rail-renditions.is-selected").length === 0) {
            setCopy(false, false);
            $(".rendition-active").removeClass("rendition-active").find(
                "[aria-pressed]").attr("aria-pressed", "false");
        }
        $("#copyUrlClipboard").off("click", copyurlFn);
        $("#copyUrlClipboard").on("click", copyurlFn);
        $("#copyRessCode").off("click", embedFn);
        $("#copyRessCode").on("click", embedFn);

        $(document).off("click.foundation-content", ".foundation-content-control", renditionsOnBack);
        $(document).on("click.foundation-content", ".foundation-content-control", renditionsOnBack);

        isRemoteAsset = $(".dm-setup-info").data("remoteasset");
        $(".foundation-content-path").data("isremoteasset", isRemoteAsset);

        function renditionsOnBack(e) {
            e.preventDefault();
            var action = $(this).data("foundationContentControlAction");
            if (action === "back") {
                // For Firefox
                if ($(".foundation-content-current .rendition-canvas").length > 0) {
                    $(".rail .rail-colorpalette-renditions").removeClass("hidden");
                } else {
                    manageRenditions();

                    // For chrome and IE 10
                    var showColorPalette = function(e1) {
                        e1.preventDefault();
                        if ($(".foundation-content-current .rendition-canvas").length > 0) {
                            $(".rail .rail-colorpalette-renditions").removeClass("hidden");
                        }
                        $(window).off("statechange", showColorPalette);
                    };
                    $(window).on("statechange", showColorPalette);
                }
            }
        }

        s7presetPath = $(".unified-renditions").attr("s7presetPath");

        var $colorpalette = $(".damadmin-rail-colorpalette-renditions");

        $(document).on("show-asset-renditions", function(event) {
            $(".damadmin-detail-viewon-select .popover").css("display", "none");
            var renditionsTarget = $("[data-coral-view-target=renditions]");
            renditionsTarget.trigger("click");
            event.stopImmediatePropagation();
            event.preventDefault();
            $(".colorpalettedata").trigger("fetch-all-rendition", [ $(".colorpalettedata"), "All" ]);
        });

        manageRenditions();

        $.getFeeds = (function getFeeds($url) {
            return $.ajax({
                dataType: "json",
                url: $url
            }).pipe(function(response) {
                return response;
            });
        });


        $.getAssetPath = (function getAssetPath() {
            return $(".unified-renditions").data("path");
        });

        $colorpalette.on("change", function(e) {
            // e.stopImmediatePropagation();
            // e.preventDefault();
            // getValue for select coralUI workaround
            var $option = $(this).parent().find("coral-select").val();

            if ($option === "static") {
                showDynamicRenditions(false);
                showSmartCropRenditions(false);
                $(".static-renditions").show();
                $(".colorpalettedata").trigger("fetch-static-rendition", [ $(".colorpalettedata"), "Static", false ]);
            } else if ($option === "all") {
                showDynamicRenditions(true);
                showSmartCropRenditions(true);
                $(".static-renditions").show();
                $(".dynamic-renditions").show();
                $(".colorpalette-headings").show();
                $(".colorpalettedata").trigger("fetch-all-rendition", [ $(".colorpalettedata"), "All" ]);
            } else if ($option === "dynamic") {
                $(".static-renditions").hide();
                $(".smartcrop-renditions").hide();
                showDynamicRenditions(true);

                $(".colorpalettedata").trigger("fetch-dynamic-rendition", [ $(".colorpalettedata"), "Dynamic", false ]);
            } else if ($option === "smartcrop") {
                showDynamicRenditions(false);
                showSmartCropRenditions(true);
                $(".dynamic-renditions").hide();
                $(".static-renditions").hide();
            }
        });

        $(".damadmin-rail-colorpalette-renditions .dropdown-container button").on("click tap", function() {
            var text = $(this).text();
            $(".damadmin-rail-colorpalette-renditions .dropdown-container .dropdown-list ul li span").each(function() {
                if ($(this).text() === text) {
                    $(this).parent().addClass("selected-rend-type");
                }
                $(this).parent().on("hover", function(e) {
                    $(".damadmin-rail-colorpalette-renditions").attr("title", $(this).text() + " Renditions");
                });
            });
        });
        var items = $(".foundation-collection-item");
        for (var i = 0; i < items.length; i++) {
            var item = items[i];
            var preset = $(item).data("init-values");
            var content = null;
            if (preset && preset["jcr:content"] !== "") {
                content = jQuery.parseJSON(preset["jcr:content"]);
                if (content["dam:s7damType"] === "ViewerPreset") {
                    continue;
                }
            }
            if (content !== null) {
                if (typeof (assetName) !== "undefined") {
                    $(item).attr("title", assetName + "." + preset.id + "." + content.fmt);
                } else {
                    $(item).attr("title", preset.id + " " + (content.wid ? content.wid : "") +
                        " " + (content.hei ? content.hei : "") + " " + content.fmt);
                }
            }
            $(item).off("click keydown");
            $(item).on("click keydown", function(e) {
                if (e.type === "click" || (e.type === "keydown" && (e.keyCode === 13 || e.keyCode === 32))) {
                    e.preventDefault();

                    var el = $(e.currentTarget);
                    var content = jQuery.parseJSON(el.attr("data-init-values"));
                    var cfg = content["jcr:content"] = jQuery.parseJSON(content["jcr:content"]);
                    var presetPath = el.data("foundation-collection-item-id");
                    presetPath = presetPath.substring(presetPath.lastIndexOf("/") + 1);

                    if (cfg && presetPath) {
                    // toggle selected state
                        $(".rendition-active").removeClass("rendition-active").find(
                            "[aria-pressed]").attr("aria-pressed", "false");
                        el.addClass("rendition-active").find(
                            "[role='button']").attr("aria-pressed", "true");

                        $("#image-preview").hide();
                        $(".asset-view").hide();
                        $(".asset-detail-metadata").hide();

                        // skip this block if we are not inside of an asset preview (eg: imagepresets)
                        if ($("#rendition-preview").renditionPreview !== undefined) {
                            var assetIsPublished = $(".foundation-content-path").data("s7-published-status");
                            var presetIsPublished = (cfg.published !== "unpublished");
                            var imgWidth = cfg.wid;
                            var imgHeight = cfg.hei;
                            var fmt = cfg.fmt + (cfg.colorspace && (cfg.colorspace !== "") ? "," + cfg.colorspace : "");

                            // add extra mods (unsharp mask, and extramodifiers) for copy url
                            var extra = cfg.extra;
                            extra = (typeof extra !== "undefined" && extra.length > 0) ? "&" + extra : "";

                            var imgWidth_ = imgWidth;
                            var imgHeight_ = imgHeight;

                            $("#rendition-preview").renditionPreview({ config: presetPath,
                                extraModifiers: extra,
                                usm: "",
                                width: imgWidth_,
                                height: imgHeight_,
                                fmt: fmt });

                            var copyUrlClipboardVisible = false;
                            var copyRessCodVisible = false;

                            // only show copy URL button for Scene7 Assets when it's enabled; default = true
                            if (assetIsPublished && presetIsPublished) {
                                copyUrlClipboardVisible =
                                $("#copyUrlClipboard").data("enable");
                                copyRessCodVisible =
                                $("#copyRessCode").data("enable") && !imgWidth && !imgHeight;
                            }
                            setCopy(copyUrlClipboardVisible, copyRessCodVisible);
                        }
                    }
                }
            });
        }

        var action = document.querySelector(".cq-damadmin-admin-rendition-delete-activator");
        if (action) {
            Coral.commons.ready(action, function() {
                var canDeleteRendition = $(".content-container").data("canDeleteRendition");
                canDeleteRendition ? action.show() : action.hide();
            });
        }
    });

    $(document).one("foundation-contentloaded", function(e) {
        isVideoAsset = window.CONST_IS_VIDEO_ASSET;
        setCopy(false, false);

        // For consistency, make coral-table behave as a group of buttons
        var dRenCl = ".dynamic-renditions";
        $(dRenCl).find("table, tbody, tfoot, tr, th").attr("role", "presentation");
        $(dRenCl).removeAttr("aria-multiselectable").removeAttr("aria-selected");
        $(dRenCl + " td[alignment='column']").attr({ "role": "button", "tabIndex": "0", "aria-pressed": "false" });
        $(dRenCl + " tfoot tr td").removeAttr("tabindex");
        $(dRenCl + " tfoot tr td").removeAttr("role").removeAttr("aria-pressed");

        // make headings for groups of buttons
        var renHeaderCl = ".aem-asset-rendition-item--header";
        $(renHeaderCl).attr({ "role": "heading", "aria-level": "2" });
        $(dRenCl + " " + renHeaderCl).attr("id", "dynRendHeader");
        $(dRenCl + " table table").attr({ "role": "list", "aria-labelledby": "dynRendHeader" });
        $(dRenCl + " tr").attr("role", "listitem");

        // make groups of buttons for smart crop rendition items
        var smRenCl = ".smartcrop-renditions";
        $(smRenCl + " " + renHeaderCl).attr("id", "smRendHeader");
        $(smRenCl + " " + renHeaderCl + " + div").attr({ "role": "list", "aria-labelledby": "smRendHeader" });
        $(smRenCl + " .each-rendition").attr("role", "listitem");

        // make groups of buttons for static rendition items
        var stRenCl = ".static-renditions";
        $(stRenCl + " " + renHeaderCl).attr("id", "stRenRendHeader");
        $(stRenCl + " " + renHeaderCl + " + div").attr({ "role": "list", "aria-labelledby": "stRenRendHeader" });
        $(stRenCl + " .each-rendition").attr("role", "listitem");

        //original-alt-preview will be added only if PDF rendition present
        // if present re-submit to force default rendering of the PDF preview rendition.
        var originalAltPrevCl = $(".static-renditions .each-rendition.rendition-active.original-alt-preview");
        if (originalAltPrevCl && originalAltPrevCl.get(0)) {
            onStaticRenditionClick(originalAltPrevCl.get(0));
        }
    });

    $(document).on("click", ".aem-assetdetails-delete-rendition", function(e) {
        var smartcroprendition = $(".smartcrop-renditions .rendition-active").attr("data-asset-smartcrop");
        if (!smartcroprendition) {
            var paths = [];
            paths.push($(".rendition-active").attr("data-path"));
            $.ajax({
                url: "/bin/wcmcommand",
                type: "post",
                data: {
                    cmd: "deletePage",
                    path: paths,
                    force: false,
                    "_charset_": "utf-8"
                },
                success: function() {
                    $(document).trigger("fetch-all-rendition");
                    $(".foundation-content").adaptTo("foundation-content").refresh();
                }
            });
        } else {
            var deleteSmartCropURL = $.getAssetPath() + ".deletesmartcrop.html";
            ui.wait();
            $.ajax({
                url: Granite.HTTP.externalize(deleteSmartCropURL),
                type: "post",
                data: {
                    assetpath: $.getAssetPath(),
                    cropToDelete: $(".smartcrop-renditions .rendition-active").attr("data-breakpoint-name")
                },
                success: function() {
                    ui.clearWait();
                    $(".smartcrop-renditions .rendition-active").remove();
                    $(".foundation-content").adaptTo("foundation-content").refresh();
                }
            });
        }
    });

    // Workaround for decoding until we migrate embed code to proper servlet - TODO
    function decodeEmbedCode(res) {
        var REGEX = [[ "&lt;", "<" ],
            [ "&gt;", ">" ],
            [ "&#34;", '"' ]];
        var decodedStr = res;
        for (var i = 0; i < REGEX.length; i++) {
            var regex = new RegExp(REGEX[i][0], "g");
            decodedStr = decodedStr.replace(regex, REGEX[i][1]);
        }
        return decodedStr;
    }
})(document, Granite.$);
