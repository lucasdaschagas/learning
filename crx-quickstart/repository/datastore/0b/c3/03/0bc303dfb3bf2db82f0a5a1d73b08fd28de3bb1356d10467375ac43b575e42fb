 /*
 * ADOBE CONFIDENTIAL
 * __________________
 *
 *  Copyright 2018 Adobe Systems Incorporated
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
 */
(function ($, document, ExpEditorUtils) {
  'use strict';

  var variableList = [];
  var jsonInfoMessage = CQ.I18n.get("Enter the json dot notation for the above variable that you want to update. " +
  "For example , if you want to update the element 'firstName' as given in the json variable below , " +
  "you can specify 'insurance.customerDetails.firstName'. </br>{0}",
  " </br> insurance: {</br>&emsp;&emsp;customerId: \"1\", </br>&emsp;&emsp;policyType: \"Premium\,</br>&emsp;&emsp;policyNumber: \"Premium-521499\",</br>&emsp;&emsp;customerDetails: { </br>&emsp;&emsp;&emsp;firstName: \"Sarah\",</br>&emsp;&emsp;&emsp;lastName: \"Rose\",</br>&emsp;&emsp;&emsp;customerId: \"1\",</br>&emsp;&emsp;&emsp;emailAddress: \"srose@we.info\" </br>&emsp;&emsp;}</br>}");


  $(document).on('dialog-ready', function() {
       if ($("#workflow-variableSetterOpnStep")[0]) {
          ExpEditorUtils.initializeExpEditor(ExpEditorUtils.constants.CALC_EXPRESSION);
          $('.variablesetter-dialog-commondescription')[0].value = "Set value of variables";
          $('.variablesetter-dialog-inputs button[coral-multifield-add]').find("coral-button-label")[0].innerText = Granite.I18n.get("Add Mapping");
          Coral.commons.ready(".variablesetter-dialog-inputs",function() {
             //Functionality to add variables on clicking "Add mapping"

  		$('.variablesetter-dialog-inputs').on("coral-collection:add", function(e) {
                 if(this === e.target) {
                     Coral.commons.ready(".variablesetter-dialog-inputs .variablesetter-dialog-propertyKey:nth-last-child(1):last",function() {
                       removeArrayOfComplexTypes($(".variablesetter-dialog-inputs .variablesetter-dialog-propertyKey:nth-last-child(1):last")[0]);
                       registerEventListeners();
                    });
                    Coral.commons.ready('.variablesetter-dialog-schema-path:nth-last-child(1):last', function (element) {
                       initSchemaPathComponent(element);
                    });
                 }
             });

             renderVariableProperties();
              // Handling dynamic change after Variables have been rendered
             Coral.commons.ready(".variablesetter-dialog-propertyKey",function() {
                registerEventListeners();
             });

             Coral.commons.ready('.variablesetter-dialog-schema-path', function (elements) {
                 $(elements).each(function (index, field) {
                     initSchemaPathComponent(field);
                 });
             });
          });
       }
    });

  function registerEventListeners() {
      Array.from($('.variablesetter-dialog-propertyKey')).forEach(variableNameChangeListener);
      Array.from($('.variablesetter-dialog-fillJsonPath')).forEach(JsonOrXPathChangeListener);
      Array.from($('.variablesetter-dialog-fillXPath')).forEach(JsonOrXPathChangeListener);
      Array.from($('.variablesetter-dialog-propertyType')).forEach(mappingTypeChangeListener);
      Array.from($('.variablesetter-dialog-expressionholder')).forEach(ruleTextClickListener);
      Array.from($('.variablesetter-dialog-jsonValue')).forEach(jsonOrXmlValueChangeListener);
      Array.from($('.variablesetter-dialog-xmlValue')).forEach(jsonOrXmlValueChangeListener);
  }

  function ruleTextClickListener(elem) {
      var propKeyElement = $('.variablesetter-dialog-propertyKey')[Array.from($('.variablesetter-dialog-expressionholder')).indexOf(elem)];
      var hiddenRuleTextField = $(elem).closest("coral-accordion").find(".variablesetter-dialog-rulehidden")[0];
      $(elem).find("span")[0].addEventListener("click", function () {
         ExpEditorUtils.launchExpEditor(propKeyElement.value, this, hiddenRuleTextField);
      });
  }

  function variableNameChangeListener(elem) {
      elem.addEventListener("change", function() {
          var variableList = CQ.workflow.variables.variableListInstance.getVariablesList();
          var varType=[];
          var varName = [];
          for (var i=0; i< variableList.length;i++) {
            varType[i] = variableList[i].type;
            varName[i]=  variableList[i].getName();
          }
          var index =  Array.from($('.variablesetter-dialog-propertyKey')).indexOf(elem);
          $(elem).closest("coral-accordion-item").find("coral-accordion-item-label")[0].innerText= elem.value;
          var currVarType =  varType[varName.indexOf(elem.value)];
          var currentVariable = getVariable(elem.value);
          showJsonOrXPath(currentVariable,index);
          var isEmpty = true;
          var domselector =  $('.variablesetter-dialog-propertyType')[index];
          fillMappingTypes(currentVariable, domselector, isEmpty);
          hideElements(index);
          var propValueElement =  $('.variablesetter-dialog-propertyValue')[index],
              propValueHolderElement = $('.variablesetter-dialog-propertyvalueholder')[index];
          propValueHolderElement.hidden = false;
          propValueElement.hidden = false;
          $(propValueElement).adaptTo('foundation-field').setRequired(true);
      });
  }

  function JsonOrXPathChangeListener(elem) {

      $(elem).on("change", function () {
          var div = elem.parentElement.parentElement.parentElement.firstChild.firstChild.nextSibling,
              index = Array.from($('.variablesetter-dialog-propertyKey')).indexOf(div),
              domselector = $('.variablesetter-dialog-propertyType')[index],
              isEmpty = true,
              currVar = getVariable($('.variablesetter-dialog-propertyKey')[index].value),
              currMappingMode = $('.variablesetter-dialog-propertyType')[index].value;


          if($(elem).adaptTo('foundation-field').getValue() != ""){
              if ((!currMappingMode) || (currMappingMode === CQ.workflow.setvariable.constants.RELATIVE_TO_PAYLOAD) ||
                  (currMappingMode === CQ.workflow.setvariable.constants.ABSOLUTE_PATH)) {
                isEmpty = false;
                fillMappingTypes(currVar, domselector, isEmpty);
              }
          } else {
              fillMappingTypes(currVar, domselector, isEmpty);
          }
      });
  }

  function mappingTypeChangeListener(elem) {
      $(elem).on("change", function () {
        var index = Array.from($('.variablesetter-dialog-propertyType')).indexOf(elem);
        hideElements(index) ;
        showValueInput(elem,index);
     });
  }

  function jsonOrXmlValueChangeListener(element) {
        $(element).on('change', function () {
            initSchemaPathComponent($(element).parent().parent().find('.variablesetter-dialog-schema-path')[0]);
        });
  }

  function removeArrayOfComplexTypes(element) {
        var i = element.items.length;
        var items = element.items.getAll();
        while (i--) {
            var item = items[i];
            if (isArrayOfComplex(getVariable(item.value))) {
                element.items.remove(item);
            }
        }
  }

  function getDomElements(index) {
     return {
         propValueElement : $('.variablesetter-dialog-propertyValue')[index],
         propValueHolderElement : $('.variablesetter-dialog-propertyvalueholder')[index],
         expressionHolderElement :  $('.variablesetter-dialog-expressionholder')[index],
         jsonHolderElement : $('.variablesetter-dialog-jsonholder')[index],
         xmlHolderElement : $('.variablesetter-dialog-xmlholder')[index],
         variableHolderElement : $('.variablesetter-dialog-variableHolder')[index],
         pathFieldHolder : $('.variablesetter-dialog-pathfield')[index],
         jsonValueElement :  $('.variablesetter-dialog-jsonValue')[index],
         jsonPathforValueElement : $('.variablesetter-dialog-jsonPathForValue')[index],
         xmlValueElement :  $('.variablesetter-dialog-xmlValue')[index],
         XPathforValueElement : $('.variablesetter-dialog-XPathForValue')[index],
         variableValueElement : $('.variablesetter-dialog-variableSelect')[index],
         pathFieldValueElement : $('.variablesetter-dialog-pathFieldValue')[index],
         hiddenRuleTextElement : $('.variablesetter-dialog-rulehidden')[index],
         literalValueHolderElement : $('.variablesetter-dialog-default-value-container')[index]
      }
  }


  function hideElements(index) {

        var allValueContainer = $('.variablesetter-dialog-valueContainer')[index],
            domObject = getDomElements(index);
        // special handling  since Expression field uses the "propValueElement" to render its fieldLabel
        domObject.propValueElement.hidden = true;

        for ( var i =0 ; i < allValueContainer.childNodes.length ; i++) {
             if(allValueContainer.childNodes[i].hidden == false) {
                 allValueContainer.childNodes[i].hidden = true;
             }
        }
        $(domObject.hiddenRuleTextElement).adaptTo('foundation-field').setRequired(false);
        $(domObject.jsonPathforValueElement).adaptTo('foundation-field').setRequired(false);
        $(domObject.XPathforValueElement).adaptTo('foundation-field').setRequired(false);
        $(domObject.pathFieldValueElement).adaptTo('foundation-field').setRequired(false);
        $(domObject.propValueElement).adaptTo('foundation-field').setRequired(false);

        $(domObject.jsonValueElement).adaptTo('foundation-field').setRequired(false);
        $(domObject.xmlValueElement).adaptTo('foundation-field').setRequired(false);
        $(domObject.variableValueElement).adaptTo('foundation-field').setRequired(false);
        CQ.workflow.variables.variableHelper.setRequiredFalse($(domObject.literalValueHolderElement));

  }



  function showValueInput(elem, index) {

      var domObject = getDomElements(index);
      var currVarName = $('.variablesetter-dialog-propertyKey')[index].value;

      switch(elem.value) {
         case CQ.workflow.setvariable.constants.EXPRESSION : {
             domObject.expressionHolderElement.hidden = false;
             domObject.propValueHolderElement.hidden = false;
             domObject.propValueElement.hidden = true;
             $(domObject.hiddenRuleTextElement).adaptTo('foundation-field').setRequired(true);
             break;
         }
         case CQ.workflow.setvariable.constants.JSON_DOT_NOTATION : {
             domObject.jsonHolderElement.hidden = false;
             $(domObject.jsonValueElement).adaptTo('foundation-field').setRequired(true);
             $(domObject.jsonPathforValueElement).adaptTo('foundation-field').setRequired(true);
             fillDropDown($('.variablesetter-dialog-jsonValue')[index],CQ.workflow.variables.constants.JSON);
             initSchemaPathComponent(domObject.jsonPathforValueElement);
             break;
         }
         case CQ.workflow.setvariable.constants.XPATH : {
              domObject.xmlHolderElement.hidden = false;
              $(domObject.xmlValueElement).adaptTo('foundation-field').setRequired(true);
              $(domObject.XPathforValueElement).adaptTo('foundation-field').setRequired(true);
              fillDropDown($('.variablesetter-dialog-xmlValue')[index],CQ.workflow.variables.constants.XML);
              initSchemaPathComponent(domObject.XPathforValueElement);
             break;
         }

         case CQ.workflow.setvariable.constants.LITERAL : {
              $('.variablesetter-dialog-default-value-container')[index].hidden = false;
              CQ.workflow.variables.variableHelper.setFieldLabel($(domObject.literalValueHolderElement),"Specify Value *");
              if(CQ.workflow.variables.variableHelper.isPrimitiveType(getVariableType(currVarName))) {
                 CQ.workflow.variables.variableHelper.renderDefaultValueContainer($(domObject.literalValueHolderElement), getVariableType(currVarName), true, null);
              }else {
                 CQ.workflow.variables.variableHelper.renderDefaultValueContainer($(domObject.literalValueHolderElement), CQ.workflow.variables.constants.STRING , true, null);
              }
              break;
         }
         case CQ.workflow.setvariable.constants.RELATIVE_TO_PAYLOAD : {
              domObject.propValueHolderElement.hidden = false;
              domObject.propValueElement.hidden = false;
              $(domObject.propValueElement).adaptTo('foundation-field').setRequired(true);
              break;
         }

         case CQ.workflow.setvariable.constants.VARIABLE : {
             domObject.variableHolderElement.hidden = false;
             $(domObject.variableValueElement).adaptTo('foundation-field').setRequired(true);
             break;
         }

         case CQ.workflow.setvariable.constants.ABSOLUTE_PATH : {
              domObject.pathFieldHolder.hidden =false;
              $(domObject.pathFieldValueElement).adaptTo('foundation-field').setRequired(true);
              break;
         }

      }
  }

   //fills drop downs except for Mapping type
    function fillDropDown(element,type) {
         var variableList = CQ.workflow.variables.variableListInstance.getVariablesList();
         element.items.clear();
         if (!type) {
           for (var i=0; i< variableList.length;i++) {
             element.items.add({content : {innerHTML : variableList[i].getName()}, value : variableList[i].getName()});
           }
         } else {
            for (var i=0; i< variableList.length;i++) {
                if ((type === CQ.workflow.variables.constants.JSON && isJsonType(variableList[i])) ||
                    (type === CQ.workflow.variables.constants.XML && isXMLType(variableList[i]))) {
                    element.items.add({content : {innerHTML : variableList[i].getName()}, value : variableList[i].getName()})
                }
            }
         }
    }

  function isJsonType(variableObj) {
    var varType = variableObj.getType(),
        addProp = variableObj.getAdditionalProperties();
    if (addProp) {
        addProp = JSON.parse(addProp);
    }
    if (varType === CQ.workflow.variables.constants.JSON || addProp[CQ.workflow.setvariable.constants.jsonSchemaRef]) {
        return true;
    }
    return false;
  }

  function isXMLType(variableObj) {
      var varType = variableObj.getType(),
          addProp = variableObj.getAdditionalProperties();
      if (addProp) {
          addProp = JSON.parse(addProp);
      }
      if (varType === CQ.workflow.variables.constants.XML || addProp[CQ.workflow.setvariable.constants.xmlSchemaRef]) {
          return true;
      }
      return false;
  }



  function getVariableType(variableName) {
      var variableObj = getVariable(variableName);
      return variableObj ? variableObj.type : null;
  }

  function getVariable(variableName) {
      var variableList = CQ.workflow.variables.variableListInstance.getVariablesList();
      if(variableName.indexOf(':') != -1){
          variableName = variableName.substring(0, variableName.indexOf(":"));
      }
      for (var i=0; i< variableList.length;i++) {
          if(variableList[i].getName() === variableName) {
             return variableList[i];
          }
      }
      return null;
  }

  function showJsonOrXPath(currVar,index) {
     if(isJsonType(currVar)){
        $('.variablesetter-dialog-jsonPathForVariable')[index].hidden = false;
         initSchemaPathComponent($('.variablesetter-dialog-fillJsonPath')[index]);
         $($('.variablesetter-dialog-fillJsonPath')[index]).adaptTo('foundation-field').setValue("");
        $('.variablesetter-dialog-XPathForVariable')[index].hidden = true;
        showJsonInfoTip($('.variablesetter-dialog-fillJsonPath')[index],jsonInfoMessage,"variablesetter-dialog-jsonpath-infotip");
     } else if(isXMLType(currVar)){
        $('.variablesetter-dialog-jsonPathForVariable')[index].hidden = true;
        $('.variablesetter-dialog-XPathForVariable')[index].hidden = false;
         initSchemaPathComponent($('.variablesetter-dialog-fillXPath')[index]);
         $($('.variablesetter-dialog-fillXPath')[index]).adaptTo('foundation-field').setValue("");
     } else {
        $('.variablesetter-dialog-jsonPathForVariable')[index].hidden = true;
        $('.variablesetter-dialog-XPathForVariable')[index].hidden = true;
     }
  }

  function showJsonInfoTip(element, message, className) {
        var icon = new Coral.Icon().set({icon:'infoCircle', size: 'S'}),
            tooltip = new Coral.Tooltip().set({
              content: {
                innerHTML: message
              },
              placement: "left",
              target: icon
            });
        $(icon).addClass(className);
        $(tooltip).addClass(className+"-message");
        $(icon).insertBefore(element);
        $(tooltip).insertBefore(element);
  }

   //function to fill Mapping type field
  function fillMappingTypes(currVar, dom ,isEmpty){
      if(CQ.workflow.variables.variableHelper.isPrimitiveType(currVar.getType())) {
         dom.items.clear();
         dom.items.add({content : {innerHTML :Granite.I18n.get("JSON Dot Notation") }, value : CQ.workflow.setvariable.constants.JSON_DOT_NOTATION });
         dom.items.add({content : {innerHTML :Granite.I18n.get("Literal") }, value : CQ.workflow.setvariable.constants.LITERAL});
         dom.items.add({content : {innerHTML :Granite.I18n.get("Expression") }, value : CQ.workflow.setvariable.constants.EXPRESSION});
         dom.items.add({content : {innerHTML :Granite.I18n.get("XPath") }, value : CQ.workflow.setvariable.constants.XPATH});
      } else if (isArrayOfPrimitives(currVar)){
         dom.items.clear();
         dom.items.add({content : {innerHTML :Granite.I18n.get("Json Dot Notation") }, value : CQ.workflow.setvariable.constants.JSON_DOT_NOTATION });
         dom.items.add({content : {innerHTML :Granite.I18n.get("XPath") }, value : CQ.workflow.setvariable.constants.XPATH});
      } else {
         if(isEmpty == true) {
            dom.items.clear();
            dom.items.add({content : {innerHTML :Granite.I18n.get("Absolute Path") }, value : CQ.workflow.setvariable.constants.ABSOLUTE_PATH});
            dom.items.add({content : {innerHTML :Granite.I18n.get("Relative to Payload") }, value : CQ.workflow.setvariable.constants.RELATIVE_TO_PAYLOAD});
            if (isJsonType(currVar)) {
                dom.items.add({content: {innerHTML: Granite.I18n.get("JSON Dot Notation")}, value: CQ.workflow.setvariable.constants.JSON_DOT_NOTATION});
                dom.items.add({content : {innerHTML :Granite.I18n.get("Literal") }, value : CQ.workflow.setvariable.constants.LITERAL});
            }
         } else {
             dom.items.clear();
             dom.items.add({content : {innerHTML :Granite.I18n.get("Literal") }, value : CQ.workflow.setvariable.constants.LITERAL});
             dom.items.add({content : {innerHTML :Granite.I18n.get("Variable") }, value : CQ.workflow.setvariable.constants.VARIABLE});
             dom.items.add({content: {innerHTML: Granite.I18n.get("Xpath")}, value: CQ.workflow.setvariable.constants.XPATH});
             dom.items.add({content: {innerHTML: Granite.I18n.get("JSON Dot Notation")}, value: CQ.workflow.setvariable.constants.JSON_DOT_NOTATION});
         }
      }
  }

  function isArrayOfPrimitives(wfVariable) {
      if (wfVariable) {
          return (wfVariable.getType() === CQ.workflow.variables.constants.ARRAY &&
          CQ.workflow.variables.variableHelper.isPrimitiveType(wfVariable.getSubType()));
      } else {
          return false;
      }
  }

  function isArrayOfComplex(wfVariable) {
      if (wfVariable) {
          return (wfVariable.getType() === CQ.workflow.variables.constants.ARRAY &&
          !CQ.workflow.variables.variableHelper.isPrimitiveType(wfVariable.getSubType()));
      } else {
          return false;
      }
   }

  // Function to populate Select Variable drop down while rendering
    // TODO https://jira.corp.adobe.com/browse/CQ-4304810 as this is a workaround for CUI bug: https://jira.corp.adobe.com/browse/CUI-7425
  function populateKeyOptions(element, jsonPathHolder, jsonPath, XPathHolder, XPath, value, varType) {
      jsonPathHolder.hidden = true;
      XPathHolder.hidden = true;
      removeArrayOfComplexTypes(element);
      if(CQ.workflow.variables.variableHelper.isPrimitiveType(varType)){
          element.value = value ;
          element.setAttribute('value', value);
      }
      var currentVariable = getVariable(value);
      if (isJsonType(currentVariable)) {
             jsonPathHolder.hidden = false;
             showJsonInfoTip(jsonPath, jsonInfoMessage, "variablesetter-dialog-jsonpath-infotip");
             if (value.indexOf(':') != -1) {
                element.value = value.substring(0, value.indexOf(":"));
                 $(jsonPath).adaptTo('foundation-field').setValue(value.substring(value.indexOf(":") + 1));
                 $(jsonPath).trigger($.Event('change')); // set value does not fire change event
             } else{
                 element.value = value;
                 element.setAttribute('value', value);
             }
      } else if (isXMLType(currentVariable)) {
          XPathHolder.hidden = false;
          if (value.indexOf(':') != -1) {
              element.value = value.substring(0, value.indexOf(":"));
              $(XPath).adaptTo('foundation-field').setValue(value.substring(value.indexOf(":") + 1));
              $(XPath).trigger($.Event('change')); // set value does not fire change event
          } else {
              element.value = value;
              element.setAttribute('value', value);
          }
      } else {
          element.value = value;
          element.setAttribute('value', value);
      }
      $(element).closest("coral-accordion-item").find("coral-accordion-item-label")[0].innerText= element.value;
  }

  // Function to Populate Mode of Mapping dropdown while rendering
  function populateTypeOptions(element, value, currentVariableName,isEmpty){
     var currentVariable = getVariable(currentVariableName);
     fillMappingTypes(currentVariable, element,isEmpty);
     if (value) {
        element.value = value;
     }
  }

  function populateValueOptions(index , type , value,elem) {
       var domObject = getDomElements(index);
       var currVarName = $('.variablesetter-dialog-propertyKey')[index].value;

      hideElements(index);
      showValueInput(elem,index);

      switch(type){

          case CQ.workflow.setvariable.constants.JSON_DOT_NOTATION : {
              domObject.jsonValueElement.value = value.substring(0, value.indexOf(":"));
              $(domObject.jsonPathforValueElement).adaptTo('foundation-field').setValue(value.substring(value.indexOf(":") + 1));
			  $(domObject.jsonPathforValueElement)[0].setAttribute('value', value.substring(value.indexOf(":") + 1));
              $(domObject.jsonPathforValueElement).trigger($.Event('change')); // set value does not fire change event
              break;
          }

          case CQ.workflow.setvariable.constants.XPATH : {
              domObject.xmlValueElement.value = value.substring(0, value.indexOf(":"));
              $(domObject.XPathforValueElement).adaptTo('foundation-field').setValue(value.substring(value.indexOf(":") + 1));
			  $(domObject.XPathforValueElement)[0].setAttribute('value', value.substring(value.indexOf(":") + 1));
              $(domObject.XPathforValueElement).trigger($.Event('change')); // set value does not fire change event
              break;
          }

          case CQ.workflow.setvariable.constants.LITERAL : {
               if(CQ.workflow.variables.variableHelper.isPrimitiveType(getVariableType(currVarName))) {
                 CQ.workflow.variables.variableHelper.renderDefaultValueContainer($(domObject.literalValueHolderElement), getVariableType(currVarName), true, value);
               }else {
                 CQ.workflow.variables.variableHelper.renderDefaultValueContainer($(domObject.literalValueHolderElement), CQ.workflow.variables.constants.STRING , true, value);
               }
              break;
          }

          case CQ.workflow.setvariable.constants.RELATIVE_TO_PAYLOAD : {
               domObject.propValueElement.value = value ;
               break;
          }

          case CQ.workflow.setvariable.constants.VARIABLE : {
               domObject.variableValueElement.value = value;
               break;
          }

          case CQ.workflow.setvariable.constants.ABSOLUTE_PATH :{
              domObject.pathFieldValueElement.value = value ;
              break;
          }

          case CQ.workflow.setvariable.constants.EXPRESSION : {
              var htmlContent = ExpEditorUtils.getSummaryContent(value),
                  ruleTextElement =  $('.variablesetter-dialog-ruletext')[index],
                  hiddenRuleTextEl = $('.variablesetter-dialog-rulehidden')[index];
              hiddenRuleTextEl.value = value;
              $(ruleTextElement).html("").html(htmlContent);
              break;
          }
        }

  }

  function initSchemaPathComponent(component) {
      var schemaInfo = getSchemaInfo(component);
      SchemaTree.initSchemaPathField($(component).get(0), schemaInfo);
  }

  function getSchemaInfo(schemaPathField) {
      var schemaInfo = {};
      var schemaRef = '';
      var schemaType = '';
      var variable = getVariableForSchemaPathField(schemaPathField);
      if (variable != null && variable != undefined) {
          var addProps = JSON.parse(variable.getAdditionalProperties() || {});
          if (variable.type === CQ.workflow.variables.constants.XML || addProps[CQ.workflow.setvariable.constants.xmlSchemaRef]) {
              schemaType = SchemaTree.SCHEMA_TYPE_XML;
              schemaRef = addProps[CQ.workflow.setvariable.constants.xmlSchemaRef] || '';
          } else if (variable.type === CQ.workflow.variables.constants.JSON || addProps[CQ.workflow.setvariable.constants.jsonSchemaRef]) {
              schemaType = SchemaTree.SCHEMA_TYPE_JSON;
              schemaRef = addProps[CQ.workflow.setvariable.constants.jsonSchemaRef] || '';
          }
      }
      schemaInfo[SchemaTree.SCHEMA_REF_PROP] = schemaRef;
      schemaInfo[SchemaTree.SCHEMA_TYPE_PROP] = schemaType;
      return schemaInfo;
  }

  function getVariableForSchemaPathField(schemaPathField) {
      var variableFieldSelector = $(schemaPathField).data('forfield');
      var selectField = $(schemaPathField).closest('.variablesetter-dialog-accordion').find('.' + variableFieldSelector);
      var selectedVariable = $(selectField).adaptTo('foundation-field').getValue();
      return getVariable(selectedVariable);
  }

  // Function to render saved/submitted variable
  function renderVariableProperties() {
      var variableMappingArray = $('.variablesetter-dialog-mappings');
      for (var i =0; i < variableMappingArray.length; i++) {
           var variableMapping = JSON.parse(variableMappingArray[i].value),
               isEmpty = false;

           if(getVariableType(variableMapping.variableName) != null) {
               populateKeyOptions($('.variablesetter-dialog-propertyKey')[i],$('.variablesetter-dialog-jsonPathForVariable')[i],$('.variablesetter-dialog-fillJsonPath')[i], $('.variablesetter-dialog-XPathForVariable')[i],$('.variablesetter-dialog-fillXPath')[i],variableMapping.variableName,getVariableType(variableMapping.variableName));

              if (($($('.variablesetter-dialog-fillJsonPath')[i]).adaptTo('foundation-field').getValue() == "") &&
                  ($($('.variablesetter-dialog-fillXPath')[i]).adaptTo('foundation-field').getValue() == "")) {
                  isEmpty = true;
              }
              populateTypeOptions($('.variablesetter-dialog-propertyType')[i], variableMapping.mappingType, variableMapping.variableName,isEmpty);
              populateValueOptions(i,variableMapping.mappingType, variableMapping.mappingValue, $('.variablesetter-dialog-propertyType')[i]);
           }
      }
  };

  $(document).on('click', '.cq-dialog-submit', function(e) {
     if ($('#workflow-variableSetterOpnStep')[0]) {
        saveVariableProperties();
     }
  });

  $(document).on('click', '.variablesetter-dialog-deleteRule', function(e) {
       var ruleTextElement = $(e.currentTarget.parentElement).find("span")[0],
           hiddenRuleTextField = $(e.currentTarget.parentElement).find("input")[0];
       $(ruleTextElement).text(Granite.I18n.get("Click to Add Expression"));
       hiddenRuleTextField.value = "";
  });

  //Function to save variables in a JSON object
  function saveVariableProperties() {
     var propertyKeys = $('.variablesetter-dialog-propertyKey'),
         propertyTypes = $('.variablesetter-dialog-propertyType'),
         propertyValues = $('.variablesetter-dialog-propertyValue'),
         expressionValues = $('.variablesetter-dialog-rulehidden'),
         propertyJsonValue = $('.variablesetter-dialog-jsonValue'),
         propertyJsonPathForValue = $('.variablesetter-dialog-jsonPathForValue'),
         propertyXmlValue = $('.variablesetter-dialog-xmlValue'),
         propertyXPathForValue = $('.variablesetter-dialog-XPathForValue'),
         propertyVariableValue = $('.variablesetter-dialog-variableSelect'),
         propertyJsonPathHolder = $('.variablesetter-dialog-jsonPathForVariable'),
         propertyPathFieldValue = $('.variablesetter-dialog-pathFieldValue'),
         propertyXPathHolder = $('.variablesetter-dialog-XPathForVariable'),
         propertyJsonPath = $('.variablesetter-dialog-fillJsonPath'),
         propertyXPath = $('.variablesetter-dialog-fillXPath'),
         basecontainer = $('.variablesetter-dialog-default-value-container');


     for(var i=0; i< propertyKeys.length ; i++) {
        var variableJson = {};
        if (propertyKeys[i]) {
            variableJson["variableName"] = propertyKeys[i].value;
            if ((propertyJsonPathHolder[i].hidden == false) && ($(propertyJsonPath[i]).adaptTo('foundation-field').getValue() != "")) {
                variableJson["variableName"] = variableJson["variableName"] + ":" + $(propertyJsonPath[i]).adaptTo('foundation-field').getValue();
            }
            if ((propertyXPathHolder[i].hidden == false) && ($(propertyXPath[i]).adaptTo('foundation-field').getValue() != "")) {
                variableJson["variableName"] = variableJson["variableName"] + ":" + $(propertyXPath[i]).adaptTo('foundation-field').getValue();
            }
            variableJson["mappingType"]= propertyTypes[i].value;
            switch(variableJson["mappingType"]) {

                case CQ.workflow.setvariable.constants.ABSOLUTE_PATH : {
                     variableJson["mappingValue"]=propertyPathFieldValue[i].value;
                     break;
                }
                case CQ.workflow.setvariable.constants.RELATIVE_TO_PAYLOAD :{
                    variableJson["mappingValue"] = propertyValues[i].value;
                    break;
                }
                case CQ.workflow.setvariable.constants.LITERAL : {
                    variableJson["mappingValue"] = CQ.workflow.variables.variableHelper.getLiteralValue($(basecontainer[i]),getVariableType(variableJson["variableName"]));
                    break;
                }
                case CQ.workflow.setvariable.constants.VARIABLE : {
                    variableJson["mappingValue"] = propertyVariableValue[i].value;
                    break;
                }
                case CQ.workflow.setvariable.constants.JSON_DOT_NOTATION : {
                    variableJson["mappingValue"] = propertyJsonValue[i].value + ":" + $(propertyJsonPathForValue[i]).adaptTo('foundation-field').getValue();
                     break;
                }
                case CQ.workflow.setvariable.constants.XPATH : {
                    variableJson["mappingValue"] = propertyXmlValue[i].value + ":" + $(propertyXPathForValue[i]).adaptTo('foundation-field').getValue();
                    break;
                }
                case CQ.workflow.setvariable.constants.EXPRESSION : {
                   variableJson["mappingValue"] = expressionValues[i].value;
                   break;
                }
            }
        }
        $('.variablesetter-dialog-mappings')[i].value = JSON.stringify(variableJson);
     }
  }

})(Granite.$, document, CQ.workflow.expeditor);
