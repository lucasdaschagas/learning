<%@page session="false"%><%--
  Copyright 1997-2008 Day Management AG
  Barfuesserplatz 6, 4001 Basel, Switzerland
  All Rights Reserved.

  This software is the confidential and proprietary information of
  Day Management AG, ("Confidential Information"). You shall not
  disclose such Confidential Information and shall use it only in
  accordance with the terms of the license agreement you entered into
  with Day.

  ==============================================================================

  Scaffolding component

  Displays and provides editing of scaffoldings

--%><%@include file="/libs/foundation/global.jsp"%><%
%><%@ page import="
        org.apache.sling.api.resource.ResourceUtil,
        com.day.cq.i18n.I18n,
        com.day.cq.wcm.api.WCMMode,
        com.day.cq.wcm.core.utils.ScaffoldingUtils" %><%
%>
<body>
    <script src="/libs/cq/ui/resources/cq-ui.js" type="text/javascript"></script>
<%

    log.warn("This component has been deprecated.");
    I18n i18n = new I18n(slingRequest);

    String contentPath = properties.get("cq:targetPath", "");
    String dlgPath = resource.getPath() + "/dialog";
    String templatePath = properties.get("cq:targetTemplate", "");
    String scaffoldPath = resourcePage.getPath();
    String formUrl = contentPath + "/*";
    boolean pageMode = templatePath.length() > 0;
    boolean isUpdate = false;
    if (!resourcePage.getPath().equals(currentPage.getPath())) {
        contentPath = currentPage.getPath();
        formUrl = currentPage.getPath();
        isUpdate = true;
        pageMode = true;
    } else if (request.getAttribute(ScaffoldingUtils.CONTEXT_RESOURCE_ATTR_NAME) != null) {
        contentPath = ((Resource) request.getAttribute(ScaffoldingUtils.CONTEXT_RESOURCE_ATTR_NAME)).getPath();
        formUrl = contentPath;
        isUpdate = true;
        pageMode = false;
    }

    String title = null;
    if (isUpdate) {
        Resource contentResource = resourceResolver.getResource(contentPath);
        ValueMap contentProperties = ResourceUtil.getValueMap(contentResource);
        title = contentProperties.get("jcr:title", contentResource.getName()); %>
        <h1><%= xssAPI.encodeForHTML(currentPage.getTitle()) %> | <%= xssAPI.filterHTML(title) %></h1><%
    } else {
        title = pageProperties.get("jcr:title", currentPage.getName()); %>
        <h1><%= xssAPI.encodeForHTML(title) %></h1><%
        if (WCMMode.fromRequest(request) == WCMMode.DESIGN) { %>
            <%= i18n.get("You can edit this form using the <a target='_new' href='{0}.html'>dialog editor</a>.", null, xssAPI.getValidHref(dlgPath)) %><br></body><%
            return;
        }
        String description = properties.get("jcr:description", "");
        if (description.length() > 0) {
            %><em><%= xssAPI.encodeForHTML(description) %></em><br><br><%
        }
        if (scaffoldPath.equals("/etc/scaffolding")) { %>
            </body><%
            return;
        }
        if (contentPath.length() == 0) { %>
            <%= i18n.get("Please define the target path in the page properties of this scaffolding.")%><br></body><%
            return;
        } else if (pageMode) { %>
            <h3><%= i18n.get("Create pages below: ")%><span id="parentpath"><%= xssAPI.filterHTML(contentPath) %></span> (<a href="javascript:changeParentPath()"><%= i18n.get("change")%></a>)</h3>
            <ul id="linklist"></ul><%
        } else { %>
            <h3><%= i18n.get("Create resources below: ")%><span id="parentpath"><%= xssAPI.filterHTML(contentPath) %></span> (<a href="javascript:changeParentPath()"><%= i18n.get("change")%></a>)</h3>
            <ul id="linklist"></ul><%
        }
    }
    %><br>

<div id="CQ">
    <div id="dlg"></div>
</div>

<script type="text/javascript">

    // undo/redo is not allowed when in scaffolding mode (but undo history is active, as
    // we're recording the update)
    if (CQ.undo.UndoManager.isEnabled()) {
        CQ.undo.UndoManager.getHistory().block();
    }

    document.title = "<%= xssAPI.encodeForJSString(title) %>";

    var parentPath = "<%= xssAPI.encodeForJSString(contentPath) %>";
    var browseRoot = parentPath;
    var pageMode = <%= pageMode %>;
    var isUpdate = <%= isUpdate %>;

    var myForm;

    function changeParentPath() {
        var browseDialog = new CQ.BrowseDialog({
            treeRoot: {
                name: browseRoot.substring(1),
                text: browseRoot
            },
            treeLoader: {
                dataUrl: CQ.shared.HTTP.getXhrHookedURL(CQ.Util.externalize(browseRoot + ".ext.json")),
                baseParams: {
                    "_charset_": "utf-8"
                },
                createNode: function(attr) {
                    attr.text = attr.name;   // use plain node name for tree nodes
                    return CQ.Ext.tree.TreeLoader.prototype.createNode.call(this, attr);
                }
            },
            path: parentPath,
            ok: function() {
                parentPath = browseDialog.getSelectedPath();
                browseDialog.hide();
                myForm.getForm().url = CQ.HTTP.externalize(parentPath + "/*");
                document.getElementById("parentpath").innerHTML = CQ.shared.XSS.getXSSValue(parentPath);
            }
        });
        browseDialog.show();
    }

    CQ.Ext.onReady(function() {
        /**
         * An array containing the xtype of widgets that need to call
         * their processRecord function even when creating a new page
         */
        var forcedFields = ["smartfile", "smartimage", "html5smartfile", "html5smartimage"];

        myForm = new CQ.Ext.form.FormPanel({
            //standardSubmit: false,
            url: CQ.HTTP.externalize("<%= xssAPI.encodeForJSString(formUrl) %>"),
            buttonAlign: "left",
            border:false,
            processExternalDialog: function(data) {
                if (data && data.items) {
                    if (data.items instanceof Array) {
                        for (var i = 0; i < data.items.length; i++) {
                            this.processExternalItem(data.items[i]);
                        }
                    } else {
                        this.processExternalItem(data.items);
                    }
                }
            },

            processExternalItem: function(tab) {
                if (tab["xtype"] == "tabpanel") {
                    this.processExternalDialog(tab);
                } else {
                    if (tab instanceof Array) {
                        for (var i=0; i<tab.length; i++) {
                            this.processExternalItem(tab[i]);
                        }
                    } else {
                        var include = tab;
                        if (tab["xtype"] == "panel") {
                            include = CQ.Util.applyDefaults(include, {
                                layout: "form",
                                autoScroll: true,
                                border: true,
                                bodyStyle: CQ.themes.Dialog.TAB_BODY_STYLE,
                                labelWidth: CQ.themes.Dialog.LABEL_WIDTH,
                                defaultType: "textfield",
                                "stateful": false,
                                defaults: {
                                    msgTarget: CQ.themes.Dialog.MSG_TARGET,
                                    anchor: CQ.themes.Dialog.ANCHOR,
                                    "stateful": false
                                }
                            });
                        }
                        include.header = true;
                        include.border = true;
                        include.headerAsText = true;
                        if (!include.title) {
                            include.title = "untitled";
                        }
                        this.add(include);
                    }
                }
            },

            /**
             * Loads the content from the given data store or path.
             * @param {Store/String} content The data store or path
             */
            loadContent: function(content) {
                var store;
                if (typeof(content) == "string") {
                    this.path = content;
                    var url = CQ.HTTP.externalize(this.path);
                    if (pageMode) {
                        url += "/jcr:content";
                    }
                    store = new CQ.data.SlingStore({"url": url + ".infinity.json"});
                } else if (content instanceof CQ.Ext.data.Store) {
                    store = content;
                }
                if (store) {
                    store.load({
                        callback: this.processRecords,
                        scope: this
                    });
                }
            },

            /**
             * Processes the given records. This method should only be used as
             * a callback by the component's store when loading content.
             * @param {CQ.Ext.data.Record[]} recs The records
             * @param {Object} opts The options such as the scope (optional)
             * @param {Boolean} success <code>true</code> if retrieval of records was
             *        successful, <code>false</code> otherwise
             * @private
             */
            processRecords: function(recs, opts, success) {
                var rec;
                var mixins = recs[0].get("jcr:mixinTypes");
                if (success) {
                    rec = recs[0];
                    if (pageMode) {
                        rec.data = {
                            "jcr:content": rec.data
                        };
                    }
                } else {
                    CQ.Log.warn("scaffolding processRecords: retrieval of records unsuccessful");
                    rec = new CQ.data.SlingRecord();
                    rec.data = {};
                }

                var isInheritanceCancelled = false;
                if (mixins && (mixins.indexOf(CQ.wcm.msm.MSM.MIXIN_LIVE_SYNC_CANCELLED) != -1)) {
                    isInheritanceCancelled = true;
                }
                var currentPage = CQ.WCM.getPage(this.path);

                rec.data.allowUpload = isUpdate;
                CQ.Log.debug("scaffolding processRecords: processing records for fields");
                var scope = opts.scope ? opts.scope : this;

                var fields = CQ.Util.findFormFields(this);
                for (var name in fields) {
                    for (var i = 0; i < fields[name].length; i++) {
                        try {

                            if (fields[name][i].processPath) {
                                CQ.Log.debug("scaffolding processRecords: calling processPath of field '{0}'", [name]);
                                fields[name][i].processPath(this.path);
                            }
                            if (isUpdate || ($CQ && $CQ.inArray(fields[name][i].xtype, forcedFields) !== -1)) {
                                if (!fields[name][i].initialConfig.ignoreData) {
                                    CQ.Log.debug("scaffolding processRecords: calling processRecord of field '{0}'", [name]);
                                    fields[name][i].processRecord(rec, this.path);
                                }
                            }

                            //if page is a livecopy,show lock for inherited fields
                            if (currentPage.isLiveCopy()) {
                                CQ.Log.debug("scaffolding processRecords: process fieldEditLock for field '{0}'", [name]);
                                this.handleFieldLock(fields[name][i], rec, isInheritanceCancelled);
                            }

                            //if page is locked by user,make it non editable for other users
                            if (currentPage.isReadOnly()) {
                                fields[name][i].setDisabled(true);
                            }

                        } catch (e) {
                            CQ.Log.debug("scaffolding processRecords: {0}", e.message);
                        }
                    }
                }
                //this.fireEvent("loadContent", this);

                // prepare creating an undo step from the update operation
                if (CQ.undo.UndoManager.isEnabled()) {
                    CQ.undo.util.UndoUtils.addUndoMarker(this);
                    CQ.undo.UndoManager.getHistory().prepareUndo(
                        new CQ.undo.util.OriginalData(this.path, rec, this, true));
                }
            },

            handleFieldLock: function(field, rec, isInheritanceCancelled) {
                var name = field.getName();
                if (typeof name === "undefined")
                    name = field.heightParameter ? field.heightParameter : field.widthParameter;
                // only handle fields which store actual content,field name should start with ./
                if (name.indexOf("./") !== 0) {
                    return;
                }
                var propName = name.substr(name.lastIndexOf("/") + 1);
                var relativePath = name.substring(2, name.length - propName.length);
                var baseNodePath = name.substring(0, name.lastIndexOf("/"));
                var fieldEditLock = true;
                var fieldEditLockDisabled = false;
                var iconCls = "cq-dialog-locked";
                var isComponentProperty = false;
                var componentPath = null;
                // check if page inheritance is canceled, if page inheritance is cancelled show inlocked icon against the fields
                if (isInheritanceCancelled) {
                    fieldEditLock = false;
                    iconCls = "cq-dialog-unlocked";
                } else {
                    //for top (jcr:content) level property
                    if (baseNodePath === "./jcr:content") {
                        // check if property inheritance is canceled
                        var canceledProps = rec.get(relativePath + CQ.wcm.msm.MSM.PARAM_PROPERTY_INHERITANCE_CANCELED);
                        if (canceledProps && canceledProps.indexOf(propName) != -1) {
                            fieldEditLock = false;
                            iconCls = "cq-dialog-unlocked";
                        }
                    } else { //for other component level property check if inheritance is canceled for that component and its children
                        isComponentProperty = true;
                        var data = rec.get(baseNodePath);
                        //check whether the property is on a node that is a component
                        var isComponentNode = CQ.WCM.getComponentList(this.path).getComponent(data["sling:resourceType"]);
                        //get the path of the node that is an non container component
                        componentPath = this.getComponentPath(rec, baseNodePath);

                        //if item is on a Node that is not a component, but is a child of a node that is a container
                        if (!isComponentNode && componentPath == null) {
                            field.setDisabled(true);
                            return; //no lock is to be displayed
                        }
                        //for non-container
                        if (this.isInheritanceCancelled(rec, baseNodePath)) {
                            fieldEditLock = false;
                            iconCls = "cq-dialog-unlocked";
                        }
                        //if no non-container component was found
                        if (!componentPath) {
                            var mixin = data["jcr:mixinTypes"];
                            // check if inheritance is canceled for the conatiner component
                            if (mixin && (mixin.indexOf(CQ.wcm.msm.MSM.MIXIN_LIVE_SYNC_CANCELLED) != -1)) {
                                fieldEditLock = false;
                                iconCls = "cq-dialog-unlocked";
                            }
                        }
                    }
                }
                if (field.handleFieldLock) {
                    field.handleFieldLock(iconCls, fieldEditLock, fieldEditLockDisabled, rec, componentPath); // let field handle the rendering
                } else if (field.fieldEditLockBtn) {
                    field.editLock = fieldEditLock;
                    field.setDisabled(fieldEditLock);

                    field.fieldEditLockBtn.setIconClass(iconCls);
                    field.fieldEditLockBtn.setTooltip(iconCls == "cq-dialog-unlocked" ?
                                                      CQ.Dialog.REVERT_INHERITANCE : CQ.Dialog.CANCEL_INHERITANCE);
                    field.fieldEditLockBtn.setDisabled(fieldEditLockDisabled);
                } else {
                    field.editLock = fieldEditLock;
                    var tip = "";
                    if (fieldEditLockDisabled) tip = CQ.Dialog.INHERITANCE_BROKEN;
                    else tip = fieldEditLock ? CQ.Dialog.CANCEL_INHERITANCE : CQ.Dialog.REVERT_INHERITANCE;
                    try {
                        field.setDisabled(fieldEditLock);
                        var dlg = this;
                        field.fieldEditLockBtn = new CQ.TextButton({
                            "disabled": fieldEditLockDisabled,
                            "tooltip": tip,
                            "cls": "cq-dialog-editlock",
                            "iconCls": iconCls,
                            "handleMouseEvents": false,
                            "handler": function() {
                                dlg.switchPropertyInheritance(field,
                                                              propName,
                                                              function(iconCls, editLock) {
                                                                  field.fieldEditLockBtn.setIconClass(iconCls);
                                                                  field.fieldEditLockBtn.setTooltip(iconCls == "cq-dialog-unlocked" ?
                                                                                                    CQ.Dialog.REVERT_INHERITANCE : CQ.Dialog.CANCEL_INHERITANCE);
                                                                  field.setDisabled(editLock);
                                                                  field.editLock = editLock;

                                                                  dlg.updateEnableInheritanceFieldLockState(field);
                                                              },
                                                              dlg,
                                                              isComponentProperty,
                                                              componentPath);
                            }
                        });
                    } catch (e) {
                        // skip (formEl is null)
                    }

                }
                // narrow the field label
                if (field.rendered) {
                    this.renderFieldLock(field);
                } else {
                    field.on("render", this.renderFieldLock);
                }
            },

            switchPropertyInheritance: function(field, propName, callback, scope, isComponentProperty, componentPath) {
                CQ.Ext.Msg.confirm(
                    field.editLock ? CQ.I18n.getMessage("Cancel inheritance") : CQ.I18n.getMessage("Revert inheritance"),
                    field.editLock ? CQ.I18n.getMessage("Do you really want to cancel the inheritance?") : CQ.I18n.getMessage("Do you really want to revert the inheritance?"),
                    function(btnId) {
                        if (btnId == "yes") {
                            var editLock = false;
                            var iconCls = "cq-dialog-unlocked";
                            var name = field.getName();
                            if (typeof name === "undefined")
                                name = field.heightParameter ? field.heightParameter : field.widthParameter;
                            // build parameters
                            var params = {};
                            var propName = name.substr(name.lastIndexOf("/") + 1);
                            // deepCancel = true if component is not container and false if component is container
                            deepCancel = (componentPath != null) ? true : false;
                            //if it is a component level property
                            if (isComponentProperty) {
                                params[CQ.wcm.msm.MSM.PARAM_STATUS + "/" + CQ.wcm.msm.MSM.PARAM_IS_CANCELLED] = field.editLock;
                                params[CQ.wcm.msm.MSM.PARAM_STATUS + "/" + CQ.wcm.msm.MSM.PARAM_IS_CANCELLED_FOR_CHILDREN] = deepCancel;
                            }
                            //if it is a top (jcr:content) level property
                            else {
                                params["cmd"] = "cancelPropertyInheritance";
                                if (!field.editLock) {
                                    var editLock = true;
                                    var iconCls = "cq-dialog-locked";
                                    
                                    params["cmd"] = "reenablePropertyInheritance";
                                }
                                params[CQ.wcm.msm.MSM.PARAM_PROPERTY_NAME] = [];
                                if (field.getFieldLockParameters) {
                                    params = field.getFieldLockParameters(params);
                                } else {
                                    params[CQ.wcm.msm.MSM.PARAM_PROPERTY_NAME].push(propName)
                                }
                            }
                            
                            var path = this.path;
                            var relativePath = name.substr(0, name.length - propName.length);
                            if (relativePath.lastIndexOf("./", 0) === 0) { // startsWith
                                relativePath = relativePath.substr(2);
                            }
                            if (relativePath.length > 0) {
                                path += "/" + relativePath;
                            }
                            path = path.substring(0, path.length - 1);

                            if (deepCancel) {
                                path = componentPath;
                            }

                            var serverResponse = CQ.utils.HTTP.post(path + ".msm.conf", null, params, this);
                            if (CQ.utils.HTTP.isOk(serverResponse)) {
                                if (callback) {
                                    callback.call(field, iconCls, editLock);
                                }
                                CQ.Util.reload(CQ.WCM.getContentWindow());
                            }
                        }
                    },
                    scope || this
                );
            },
            
            /**
            * Updates the status of the cancelled properties based on the existence of the LC blueprint
            * Sets the blueprintExists dialog property to the status of the blueprint existence 
            * calls Dialog#updateEnableInheritanceFieldLockState for each field
            */
            updateEnableInheritanceLockState: function(bpExists) {
                var fields = CQ.Util.findFormFields(this.formPanel);
                this.blueprintExists = bpExists;
                for (var name in fields) {
                    for (var i = 0; i < fields[name].length; i++) {
                        this.updateEnableInheritanceFieldLockState(fields[name][i]);
                    }
                }
            },
            
            /**
            * Updates the status of a given field lock based on the blueprint status
            * BP exists -> re-enable inheritance enabled
            * BP inaccessible -> re-enable inheritance disabled
            */
            updateEnableInheritanceFieldLockState: function(field) {
                var fieldLockBtn = undefined;
                if (field) {
                    fieldLockBtn = field.fieldEditLockBtn;
                }
                
                if (fieldLockBtn && fieldLockBtn.iconCls === "cq-dialog-unlocked") {
                    fieldLockBtn.setDisabled(this.blueprintExists === false);
                }
            },
            
            /**
            * Renders the LC inheritance lock for the given component
            */
            renderFieldLock: function(fieldComponent) {
                var formEl = CQ.Ext.get('x-form-el-' + fieldComponent.id);
                var label = formEl.parent().first();
                formEl.parent().first().dom.style.width =
                    (parseInt(label.dom.style.width) - CQ.themes.Dialog.LOCK_WIDTH) + "px";
                fieldComponent.fieldEditLockBtn.render(formEl.parent(), label.next());
            },
            
            /**
            * Process to return if the inheritance of some component/property is cancelled
            */
            isInheritanceCancelled: function(rec, baseNodePath) {
                //start from the immediate parent & iterate up the hierarchy to see if the inheritance is cancelled for that component
                while (baseNodePath !== "./jcr:content") {
                    var data = rec.get(baseNodePath);
                    var isCancelledForChildren = data["cq:isCancelledForChildren"];
                    var mixin = data["jcr:mixinTypes"];
                    // check if inheritance is canceled for that component and for all its children
                    if (isCancelledForChildren && mixin && mixin.indexOf(CQ.wcm.msm.MSM.MIXIN_LIVE_SYNC_CANCELLED) != -1) {
                        return true;
                    }
                    //move to parent of current node
                    baseNodePath = baseNodePath.substring(0, baseNodePath.lastIndexOf("/"));
                }
                return false;
            },

            /**
            * Process to return to return the path of the 1st container that is not a container 
            */
            getComponentPath: function(rec, baseNodePath) {
                //baseNodePath is of the form ./jcr:content/par/text/image
                var nodeHierarchy = baseNodePath.split("/");
                var path = "./jcr:content";
                //starting below jcr:content traverse down the hierarchy & check if component node is not a container
                for (var index = 2; index < nodeHierarchy.length; index++) {
                    path = path + "/" + nodeHierarchy[index];
                    //if component is not a container, then return the path
                    var nodeIsContainer = this.isContainer(rec, path);
                    if (typeof nodeIsContainer === "undefined") {
                        return this.path + path.substr(1);
                    }
                }
                //if no non container component is found, return null
                return null;
            },

            /**
            * Process to return if the component is a container 
            */
            isContainer: function(rec, baseNodePath) {
                var data = rec.get(baseNodePath);
                //check if component is a container by matching for its resource type
                var component = CQ.WCM.getComponentList(this.path).getComponent(data["sling:resourceType"]);
                return component ? component.isContainer : null;
            },

            /**
             * Processes the given records. This method should only be used as
             * a callback by the component's store when loading content.
             */
            processPath: function(path) {
                var fields = CQ.Util.findFormFields(this);
                for (var name in fields) {
                    for (var i = 0; i < fields[name].length; i++) {
                        try {
                            if (fields[name][i].processPath) {
                                fields[name][i].processPath(path);
                            }
                        }
                        catch (e) {
                            CQ.Log.debug("scaffolding processPath: {0}", e.message);
                        }
                    }
                }
            },

            getActiveTab: function() {
                return this;
            }
        });
        myForm.addButton({
            text: isUpdate ? CQ.I18n.getMessage("Update") : CQ.I18n.getMessage("Create"),
            handler: function() {
                var frm = myForm.getForm();
                var title;
                var params = {
                    "_charset_": "utf-8"
                };
                if (pageMode) {
                    params["./jcr:content/cq:scaffolding"] = "<%= xssAPI.encodeForJSString(scaffoldPath) %>";
                    title = frm.findField("./jcr:content/jcr:title");
                } else {
                    params["./cq:scaffolding"] = "<%= xssAPI.encodeForJSString(scaffoldPath) %>";
                    title = frm.findField("./jcr:title");
                }
                if (!isUpdate) {
                    if (pageMode) {
                        params["./jcr:primaryType"] = "cq:Page";
                        params["./jcr:content@CopyFrom"] = "<%= xssAPI.encodeForJSString(templatePath) %>/jcr:content";
                        params["./jcr:content/jcr:primaryType"] = "cq:PageContent";
                        // Note: cq:PageContent inherits from cq:Taggable; no need to check for ./cq:tags field
                    } else {
                        params["./jcr:primaryType"] = "nt:unstructured";
                        if (frm.findField("./cq:tags")) {
                            params["./jcr:mixinTypes"] = "cq:Taggable";
                            params["./jcr:mixinTypes@TypeHint"] = "String[]";
                        }
                    }
                }
                if (title) {
                    var hint = title.getValue();
                    if (hint) {
                        params[":nameHint"] = hint;
                    }
                }

                var action = new CQ.form.SlingSubmitAction(frm, {
                    params: params,
                    success: function(frm, resp) {
                        var contentPath = resp.result["Path"];
                        var url = CQ.HTTP.externalize(contentPath);
                        if (pageMode) {
                            url += ".html";
                        } else {
                            url += ".scaffolding.html";
                        }
                        if (isUpdate) {
                            //CQ.Ext.Msg.alert("Success", "Updated " + contentPath);
                            CQ.Util.reload(CQ.WCM.getContentWindow(), url);
                        } else {
                            //CQ.Ext.Msg.alert("Success", "Created page " + contentPath);
                            var title = contentPath;
                            var html = "<li><a href='"+ CQ.shared.XSS.getXSSValue(url) + "'>" + CQ.shared.XSS.getXSSValue(title) + "</a></li>";
                            CQ.Ext.DomHelper.append("linklist", html);
                            frm.reset();
                            window.scrollTo(0,0);
                            frm.findField(0).focus();
                        }
                    }
                });
                frm.doAction(action);
            }
        });
        var url = CQ.HTTP.externalize("<%= xssAPI.encodeForJSString(dlgPath) %>.infinity.json");
        var data = CQ.HTTP.eval(url);
        if (data) {
            var ct = CQ.utils.Util.formatData(data);
            myForm.processExternalDialog(ct);
        }
        myForm.render("dlg");
        myForm.loadContent(parentPath);
        // hack: register ourselves as dialog, so that the DD from the contentfinder works
        CQ.WCM.registerDialog("<%= xssAPI.encodeForJSString(dlgPath) %>", myForm);

        myForm.fireEvent("activate", myForm);
        myForm.getForm().findField(0).focus();
        window.scrollTo(0,0);
    });
</script>
</body>
