<%--
  ADOBE CONFIDENTIAL

  Copyright 2015 Adobe Systems Incorporated
  All Rights Reserved.

  NOTICE:  All information contained herein is, and remains
  the property of Adobe Systems Incorporated and its suppliers,
  if any.  The intellectual and technical concepts contained
  herein are proprietary to Adobe Systems Incorporated and its
  suppliers and may be covered by U.S. and Foreign Patents,
  patents in process, and are protected by trade secret or copyright law.
  Dissemination of this information or reproduction of this material
  is strictly forbidden unless prior written permission is obtained
  from Adobe Systems Incorporated.
--%><%
%><%@include file="/libs/granite/ui/global.jsp"%><%
%><%@page session="false"%><%
%><%@page import="com.adobe.cq.wcm.launches.utils.LaunchUtils,
                  com.adobe.granite.jobs.async.ui.commons.asyncbarricade.AsyncBarricadeStatusService,
                  com.adobe.granite.jobs.async.ui.commons.asyncbarricade.AsyncBarricadeUIDetails,
                  com.adobe.granite.ui.components.AttrBuilder,
                  com.adobe.granite.ui.components.Tag,
                  com.adobe.granite.workflow.exec.WorkItem,
                  com.adobe.granite.workflow.exec.Workflow,
                  com.adobe.granite.workflow.status.WorkflowStatus,
                  com.day.cq.i18n.I18n,
                  com.day.cq.replication.ReplicationStatus,
                  com.day.cq.wcm.api.Page,
                  com.day.cq.wcm.api.PageManager,
                  com.day.cq.wcm.api.Template,
                  com.day.cq.wcm.msm.api.LiveRelationshipManager,
                  org.apache.commons.lang.StringUtils,
                  org.apache.jackrabbit.api.security.user.Authorizable,
                  org.apache.jackrabbit.api.security.user.Group,
                  org.apache.jackrabbit.api.security.user.User,
                  org.apache.jackrabbit.api.security.user.UserManager,
                  org.apache.jackrabbit.util.Text,
                  org.apache.sling.api.resource.ResourceResolver,
                  org.apache.sling.api.resource.ValueMap,
                  org.apache.sling.api.SlingHttpServletRequest,
                  javax.jcr.RepositoryException,
                  javax.jcr.Session,
                  javax.jcr.security.AccessControlManager,
                  javax.jcr.security.Privilege,
                  java.util.ArrayList,
                  java.util.Calendar,
                  java.util.Collection,
                  java.util.HashMap,
                  java.util.List,
                  java.util.Map,
                  com.adobe.cq.ui.admin.siteadmin.components.ui.UIHelper" %>
<%

LiveRelationshipManager liveRelationshipManager = resourceResolver.adaptTo(LiveRelationshipManager.class);
ReplicationStatus replicationStatus = resource.adaptTo(ReplicationStatus.class);
Authorizable currentUser = resourceResolver.adaptTo(Authorizable.class);
UserManager userManager = resource.adaptTo(UserManager.class);
WorkflowStatus workflowStatus = resource.adaptTo(WorkflowStatus.class);
List<WorkItem> workItems = getWorkItems(currentUser, workflowStatus, userManager);

AccessControlManager acm = null;
try {
    acm = resourceResolver.adaptTo(Session.class).getAccessControlManager();
} catch (RepositoryException e) {
    log.warn("Unable to get access manager", e);
}

AsyncBarricadeStatusService asyncBarricadeStatusService = sling.getService(AsyncBarricadeStatusService.class);
boolean isBarricadingFeatureEnabled = asyncBarricadeStatusService != null && asyncBarricadeStatusService.isBarricadingFeatureEnabled();
AsyncBarricadeUIDetails barricadeDetails = null;
boolean isBarricadeInfoPresent = false;
boolean isBlockingBarricade = false;
if (isBarricadingFeatureEnabled){
    barricadeDetails = asyncBarricadeStatusService.getBarricadeDetails(resource.getPath(), true, false);
    isBarricadeInfoPresent = barricadeDetails.isBarricadeInfoPresent();
    isBlockingBarricade = barricadeDetails.isBlockingBarricade();
}
Page cqPage = resource.adaptTo(Page.class);

boolean isInLaunch = LaunchUtils.isLaunchBasedPath(resource.getPath()) && cqPage != null;

String title;
String actionRels = StringUtils.join(getActionRels(slingRequest, resource, cqPage, acm, isInLaunch), " ");

Tag tag = cmp.consumeTag();
AttrBuilder attrs = tag.getAttrs();

boolean isLaunchCopy = LaunchUtils.isLaunchResourcePath(resource.getPath());
boolean isLiveCopy = liveRelationshipManager.hasLiveRelationship(resource);
boolean isNew = false;
boolean isFolder = false;
String thumbnailUrl = "";

if (cqPage != null) {
    title = cqPage.getTitle();
    if (StringUtils.isEmpty(title)) {
        title = cqPage.getName();
    }

    thumbnailUrl = getThumbnailUrl(cqPage, 800, 480);

    if (thumbnailUrl.startsWith("/")) {
        thumbnailUrl = request.getContextPath() + thumbnailUrl;
    }

    isNew = isNew(cqPage);
} else {
    ValueMap vm = resource.getValueMap();
    title = vm.get("jcr:content/jcr:title", vm.get("jcr:title", resource.getName()));
    isFolder = true;
    attrs.add("variant", "inverted");
}

Calendar publishedDate = null;
Boolean isDeactivated = false;

if (replicationStatus != null) {
    publishedDate = replicationStatus.getLastPublished();
    isDeactivated = replicationStatus.isDeactivated();
}

attrs.addClass("foundation-collection-navigator");

attrs.add("data-timeline", true);
attrs.add("data-cq-page-livecopy", isLiveCopy);

String href = null;
if (hasPermission(acm, resource, Privilege.JCR_WRITE)) {
    if (cqPage != null) {
        href = "/libs/wcm/core/content/sites/properties.html?item=" + Text.escape(cqPage.getPath());
    } else if (!resource.isResourceType("nt:folder")) {
        // for nt:folder there are no properties to edit
        href = "/libs/wcm/core/content/sites/folderproperties.html" + Text.escapePath(resource.getPath());
    }
}

%><coral-card <%= attrs %>><%
    if (cqPage != null) {
        %><coral-card-asset>
            <img src="<%= xssAPI.getValidHref(thumbnailUrl) %>" role="presentation" alt="<%= i18n.get("Thumbnail") %>">
        </coral-card-asset><%
        if (isNew || workItems.size() > 0 || isBarricadeInfoPresent) {
            %><coral-card-info><%
                if (isNew) {
                    %><coral-tag color="blue" class="u-coral-pullRight"><%= xssAPI.encodeForHTML(i18n.get("New")) %></coral-tag><%
                }

                String variant = "info";
                if (isBlockingBarricade){
                    variant = "warning";
                }

                if (isBarricadeInfoPresent) {%>
                    <coral-alert variant="<%= variant %>">
                        <coral-alert-header><%= xssAPI.encodeForHTML(i18n.getVar(barricadeDetails.getJobStatus())) %></coral-alert-header>
                        <coral-alert-content><%= xssAPI.encodeForHTML(i18n.getVar(barricadeDetails.getOperationName())) %></coral-alert-content>
                    </coral-alert><%
                }

                if (workItems.size() > 0) {
                    Map<String, Integer> workflowCountByTitle = getWorkflowCountByTitle(workItems, i18n);

                    for (Map.Entry<String, Integer> entry : workflowCountByTitle.entrySet()) {
                        %><coral-alert variant="info" size="S">
                            <coral-alert-content>
                            <% if (entry.getValue() > 1) {
                                %><coral-tag class="u-coral-pullRight" size="M" color="blue"><%= xssAPI.encodeForHTML(Integer.toString(entry.getValue())) %></coral-tag><%
                            }%><%= xssAPI.encodeForHTML(entry.getKey()) %>
                            </coral-alert-content>
                        </coral-alert><%
                    }
                }
            %></coral-card-info><%
        }
    }

    %><coral-card-content><%
        String context = isLaunchCopy ? i18n.get("Launch Copy") : isLiveCopy ? i18n.get("Live Copy") : isFolder ? i18n.get("Folder") : null;
        if (context != null) {
            %><coral-card-context><%= xssAPI.encodeForHTML(context) %></coral-card-context><%
        }
        %><coral-card-title class="foundation-collection-item-title"><%= xssAPI.encodeForHTML(title) %></coral-card-title><%

        if (cqPage != null) {
            if (cqPage.isHideInNav() || cqPage.isLocked()) {
            %><coral-card-propertylist><%
                if (cqPage.isHideInNav()) {
            %><coral-card-property icon="viewOff" title="<%= xssAPI.encodeForHTMLAttr(i18n.get("Hidden in navigation")) %>"></coral-card-property><%
                }
                if (cqPage.isLocked()) {
            %><coral-card-property icon="lockOn" title="<%= xssAPI.encodeForHTMLAttr(i18n.get("Locked")) %>"></coral-card-property><%
                }
            %></coral-card-propertylist><%
            }

            %><coral-card-propertylist><%
                if (cqPage.getLastModified() != null) {
            %><coral-card-property icon="edit" title="<%= xssAPI.encodeForHTMLAttr(i18n.get("Modified")) %>">
                <foundation-time value="<%= xssAPI.encodeForHTMLAttr(cqPage.getLastModified().toInstant().toString()) %>"></foundation-time>
</coral-card-property><%
                }

                if (!isDeactivated && publishedDate != null) {
            %><coral-card-property icon="globe" title="<%= xssAPI.encodeForHTMLAttr(i18n.get("Published")) %>"><foundation-time value="<%= xssAPI.encodeForHTMLAttr(publishedDate.toInstant().toString()) %>"></foundation-time></coral-card-property><%
                } else {
            %><coral-card-property icon="globeRemove"><%= xssAPI.encodeForHTML(i18n.get("Not published")) %></coral-card-property><%
                }
            %></coral-card-propertylist><%
        }
    %></coral-card-content>
    <meta class="foundation-collection-quickactions" data-foundation-collection-quickactions-rel="<%= xssAPI.encodeForHTMLAttr(actionRels) %>">
    <link rel="properties" href="<%= xssAPI.getValidHref(request.getContextPath() + href) %>"></link>
</coral-card>
<coral-quickactions target="_prev" alignmy="left top" alignat="left top">
    <coral-quickactions-item icon="check" class="foundation-collection-item-activator"><%= xssAPI.encodeForHTML(i18n.get("Select")) %></coral-quickactions-item><%

    if (cqPage != null && hasPermission(acm, resource, Privilege.JCR_READ)) {
        %><coral-quickactions-item icon="edit" class="foundation-collection-action" data-foundation-collection-action='{"action": "cq.wcm.open", "data": {"cookiePath":"<%= request.getContextPath() %>/","href":"<%= request.getContextPath() %>/bin/wcmcommand?cmd=open&_charset_=utf-8&path={item}"}}'
        ><%= xssAPI.encodeForHTML(i18n.get("Edit")) %></coral-quickactions-item><%
    }

    if (href != null) {
        %><coral-quickactions-item icon="infoCircle" type="anchor" href="<%= xssAPI.getValidHref(request.getContextPath() + href) %>"
            ><%= xssAPI.encodeForHTML(i18n.get("Properties")) %></coral-quickactions-item><%
    }

    if (hasPermission(acm, resource, "crx:replicate")) {
        %><coral-quickactions-item icon="globe" class="foundation-collection-action"
            data-foundation-collection-action='{"action": "cq.wcm.quickpublish", "data": {"referenceSrc": "<%=
            request.getContextPath() %>/libs/wcm/core/content/reference.json?_charset_=utf-8{&path*}"}}'
            ><%= xssAPI.encodeForHTML(i18n.get("Quick Publish")) %></coral-quickactions-item><%
    }

    %><coral-quickactions-item icon="copy" class="foundation-collection-action" data-foundation-collection-action='{"action": "cq.wcm.copy"}'
        ><%= xssAPI.encodeForHTML(i18n.get("Copy")) %></coral-quickactions-item><%

    if (hasPermission(acm, resource, Privilege.JCR_REMOVE_NODE)) {
        String parentPath = resource.getParent().getPath();
        String moveHref = "/libs/wcm/core/content/sites/movepagewizard.html" + Text.escapePath(parentPath) + "?item=" + Text.escape(resource.getPath()) + "&_charset_=utf-8";

        %><coral-quickactions-item icon="move" type="anchor"
            href="<%= xssAPI.getValidHref(request.getContextPath() + moveHref) %>"><%= xssAPI.encodeForHTML(i18n.get("Move")) %></coral-quickactions-item><%
    }
%></coral-quickactions><%!
private boolean isNew(Page page) {
    Calendar created = page.getProperties().get("jcr:created", Calendar.class);
    Calendar lastModified = page.getLastModified();

    Calendar twentyFourHoursAgo = Calendar.getInstance();
    twentyFourHoursAgo.add(Calendar.DATE, -1);

    if (created == null || (lastModified != null && lastModified.before(created))) {
        created = lastModified;
    }

    return created != null && twentyFourHoursAgo.before(created);
}

private String getThumbnailUrl(Page page, int width, int height) {
    String ck = "";

    ValueMap metadata = page.getProperties("image/file/jcr:content");
    if (metadata != null) {
        Calendar cal = metadata.get("jcr:lastModified", Calendar.class);
        if (cal != null) {
            ck = "" + (cal.getTimeInMillis() / 1000);
        }
    }

    return Text.escapePath(page.getPath()) + ".thumb." + width + "." + height + ".png?ck=" + ck;
}

private Map<String, Integer> getWorkflowCountByTitle(List<WorkItem> workItems, I18n i18n) {
    Map<String, Integer> workflowTitles = new HashMap<String, Integer>();

    for (WorkItem item : workItems) {
        String workflowTitle = i18n.getVar(item.getNode().getTitle());

        if(!workflowTitles.containsKey(workflowTitle)) {
            workflowTitles.put(workflowTitle, 1);
        }
        else {
            workflowTitles.put(workflowTitle, workflowTitles.get(workflowTitle) + 1);
        }
    }

    return workflowTitles;
}

private List<WorkItem> getWorkItems(Authorizable user, WorkflowStatus workflowStatus, UserManager userManager)
    throws RepositoryException {
    List<WorkItem> workItems = new ArrayList<WorkItem>();

    if (workflowStatus != null && workflowStatus.isInRunningWorkflow(true)) {
        List<Workflow> workflows = workflowStatus.getWorkflows(true);
        for (Workflow workflow : workflows) {
            for (WorkItem item : workflow.getWorkItems()) {
                boolean isAssigned = false;
                String assigneeId = item.getCurrentAssignee();
                Authorizable assignee = assigneeId != null ? userManager.getAuthorizable(assigneeId) : null;

                if (assignee != null) {
                    if (((User) user).isAdmin()) {
                        isAssigned = true;
                    } else if (assignee.isGroup()) {
                        Group group = (Group) assignee;
                        isAssigned = group.isMember(user);
                    } else {
                        isAssigned = assignee.getID().equals(user.getID());
                    }
                }
                if (isAssigned) {
                    workItems.add(item);
                }
            }
        }
    }

    return workItems;
}

private List<String> getActionRels(SlingHttpServletRequest slingRequest, Resource resource, Page page, AccessControlManager acm, boolean isInLaunch) {
    List<String> actionRels = new ArrayList<String>();

    if (page != null && hasPermission(acm, resource, Privilege.JCR_LOCK_MANAGEMENT)) {
        if (!page.isLocked()) {
            actionRels.add("cq-siteadmin-admin-actions-lockpage-activator");
        } else if (page.canUnlock()) {
            actionRels.add("cq-siteadmin-admin-actions-unlockpage-activator");
        }
    }

    actionRels.add("cq-siteadmin-admin-actions-copy-activator");

    boolean canDeleteLockedPage = (page != null && page.isLocked() && page.canUnlock()) || (page != null && !page.isLocked()) || page == null;

    if (page != null) {
        actionRels.add("cq-siteadmin-admin-actions-edit-activator");
        if (hasPermission(acm, resource, Privilege.JCR_WRITE)) {
            actionRels.add("cq-siteadmin-admin-actions-properties-activator");
        }
    }

    boolean showCreate = false;
    boolean showRestore = false;

    if (!resource.getPath().equals("/content") && hasPermission(acm, "/content/launches", Privilege.JCR_ADD_CHILD_NODES)) {
        actionRels.add("cq-siteadmin-admin-createlaunch");
        showCreate = true;
    }

    boolean canAddChildNodes = hasPermission(acm, resource, Privilege.JCR_ADD_CHILD_NODES);


    if (canAddChildNodes) {
        if (page != null && UIHelper.resourceHasAllowedTemplates(resource, slingRequest)) {
            actionRels.add("cq-siteadmin-admin-createpage");
        }
        if (page == null) {
            actionRels.add("cq-siteadmin-admin-createfolder");
        }
        showCreate = true;
    }


    if (isInLaunch ) {

       if (hasPermission(acm, resource, Privilege.JCR_REMOVE_NODE) && canDeleteLockedPage) {
           actionRels.add("cq-siteadmin-admin-actions-delete-activator");
       }

       if (showCreate) {
           actionRels.add("cq-siteadmin-admin-actions-create-activator");
       }

       actionRels.add("cq-siteadmin-admin-actions-promote-activator");

        return actionRels;

    }

    if (page != null) {
        if (hasPermission(acm, resource, Privilege.JCR_VERSION_MANAGEMENT)) {
            actionRels.add("cq-siteadmin-admin-actions-restore-activator");
            actionRels.add("cq-siteadmin-admin-restoreversion");
            actionRels.add("cq-siteadmin-admin-restoretree");
        }
    } else {
        // for nt:folder there are no properties to edit
        if (!resource.isResourceType("nt:folder") && hasPermission(acm, resource, Privilege.JCR_WRITE)) {
            actionRels.add("cq-siteadmin-admin-actions-folderproperties-activator");
        }
    }

    if (hasPermission(acm, resource, Privilege.JCR_REMOVE_NODE) && canDeleteLockedPage) {
        actionRels.add("cq-siteadmin-admin-actions-move-activator");
        actionRels.add("cq-siteadmin-admin-actions-delete-activator");
    }

    if (hasPermission(acm, resource, "crx:replicate")) {
        actionRels.add("cq-siteadmin-admin-actions-quickpublish-activator");
    }
    if (hasPermission(acm, "/etc/workflow/models", Privilege.JCR_READ)) {
        actionRels.add("cq-siteadmin-admin-actions-publish-activator");
    }


    if (page != null  && (!page.isLocked() || page.canUnlock())) {
        actionRels.add("cq-siteadmin-admin-createworkflow");
        if (hasPermission(acm, resource, Privilege.JCR_WRITE)) {
            actionRels.add("cq-siteadmin-admin-createversion");
        }
        showCreate = true;
    }

    if (canAddChildNodes) {
        actionRels.add("cq-siteadmin-admin-createlivecopy");
        actionRels.add("cq-siteadmin-admin-createsite");
        actionRels.add("cq-siteadmin-admin-createsitefromsitetemplate");
        actionRels.add("cq-siteadmin-admin-createcatalog");
        showCreate = true;
    }


    if (showCreate) {
        actionRels.add("cq-siteadmin-admin-actions-create-activator");
        actionRels.add("cq-siteadmin-admin-createlanguagecopy");
    }

    if(page!=null){
        ValueMap pageProperties = page.getProperties();
        if(pageProperties !=null && pageProperties.containsKey("cq:lastTranslationDone")){
            //this is translation page
            actionRels.add("cq-siteadmin-admin-actions-translation-update-memory");
        }
    }
    return actionRels;
}


private boolean hasPermission(AccessControlManager acm, String path, String privilege) {
    if (acm != null) {
        try {
            Privilege p = acm.privilegeFromName(privilege);
            return acm.hasPrivileges(path, new Privilege[]{p});
        } catch (RepositoryException ignore) {
        }
    }
    return false;
}

private boolean hasPermission(AccessControlManager acm, Resource resource, String privilege) {
    return hasPermission(acm, resource.getPath(), privilege);
}
%>
