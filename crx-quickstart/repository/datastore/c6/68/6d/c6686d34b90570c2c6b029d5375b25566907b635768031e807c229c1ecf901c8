/*
 * ADOBE CONFIDENTIAL
 *
 * Copyright 2015 Adobe Systems Incorporated
 * All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
 */
(function ($, ns, channel, window, undefined) {
    "use strict";

    var DRAG_ORIGIN_SELECTOR                    = '.cq-draggable';
    var DROP_TARGET_SELECTOR                    = '.js-cq-droptarget--enabled';
    var DROP_TARGET_COMPONENT_SELECTOR          = '.cq-Overlay.cq-droptarget';
    var DROP_TARGET_ASSET_SELECTOR              = '.cq-Overlay-subdroptarget.cq-droptarget';
    var DROP_TARGET_ENABLED_CSSCLASS            = 'js-cq-droptarget--enabled';
    var DROP_TARGET_INPUTWIDGET_SELECTOR        = '.cq-FileUpload';
    var DROP_TARGET_DROPAREA_WIDGET_SELECTOR    = '.js-cq-DropArea';
    var DROP_TARGET_AUTOCOMPLETE_WIDGET_SELECTOR = '.foundation-autocomplete-droppable';
    var DROP_TARGET_RTE_WIDGET_SELECTOR         = '.cq-RichText-editable';
    var DROP_TARGET_RTE_INLINE_SELECTOR         = '.is-edited';
    var INSERT_AFTER_MINHEIGHT                  = 50;

    function enableGeneral(ctx) {
        ctx._interactionHandler.general = new ns.ui.Interaction({
            dragOrigin:     DRAG_ORIGIN_SELECTOR,
            dropTarget:     DROP_TARGET_SELECTOR,
            start:          ctx.general.onStart,
            move:           ctx.general.onMove,
            end:            ctx.general.onEnd,
            enter:          ctx.general.onEnter,
            over:           ctx.general.onOver,
            leave:          ctx.general.onLeave,
            drop:           ctx.general.onDrop
        });
    }

    function enableFileWidget(ctx) {
        ctx._interactionHandler.filewidget = new ns.ui.Interaction({
            dragOrigin:     DRAG_ORIGIN_SELECTOR,
            dropTarget:     DROP_TARGET_INPUTWIDGET_SELECTOR,
            enter:          ctx.inputwidget.onEnter,
            over:           ctx.inputwidget.onOver,
            leave:          ctx.inputwidget.onLeave,
            drop:           ctx.inputwidget.onDrop,
            start:          ctx.inputwidget.onStart,
            end:            ctx.inputwidget.onEnd
        });
    }

    function enableDropAreaWidget(ctx) {
        ctx._interactionHandler.dropareawidget = new ns.ui.Interaction({
            dragOrigin:     DRAG_ORIGIN_SELECTOR,
            dropTarget:     DROP_TARGET_DROPAREA_WIDGET_SELECTOR,
            enter:          ctx.dropareawidget.onEnter,
            over:           ctx.dropareawidget.onOver,
            leave:          ctx.dropareawidget.onLeave,
            drop:           ctx.dropareawidget.onDrop,
            start:          ctx.dropareawidget.onStart,
            end:            ctx.dropareawidget.onEnd
        });
    }

    function enableAutocompleteWidget(ctx) {
        ctx._interactionHandler.autocomplete = new ns.ui.Interaction({
            dragOrigin:     DRAG_ORIGIN_SELECTOR,
            dropTarget:     DROP_TARGET_AUTOCOMPLETE_WIDGET_SELECTOR,
            enter:          ctx.autocomplete.onEnter,
            over:           ctx.autocomplete.onOver,
            leave:          ctx.autocomplete.onLeave,
            drop:           ctx.autocomplete.onDrop,
            start:          ctx.autocomplete.onStart,
            end:            ctx.autocomplete.onEnd
        });
    }

    function enableRTEWidget(ctx) {
        ctx._interactionHandler.rtewidget = new ns.ui.Interaction({
            dragOrigin:     DRAG_ORIGIN_SELECTOR,
            dropTarget:     DROP_TARGET_RTE_WIDGET_SELECTOR,
            enter:          ctx.rtewidget.onEnter,
            over:           ctx.rtewidget.onOver,
            leave:          ctx.rtewidget.onLeave,
            drop:           ctx.rtewidget.onDrop,
            start:          ctx.rtewidget.onStart,
            end:            ctx.rtewidget.onEnd
        });
    }

    function enableRTEInline(ctx) {
        ctx._interactionHandler.rteinline = new ns.ui.RTEInteraction({
            dragOrigin:     DRAG_ORIGIN_SELECTOR,
            dropTarget:     DROP_TARGET_RTE_INLINE_SELECTOR,
            contextSwitch:  ctx.rteinline.onContextSwitch,
            start:          ctx.rteinline.onStart,
            move:           ctx.rteinline.onMove,
            end:            ctx.rteinline.onEnd,
            enter:          ctx.rteinline.onEnter,
            over:           ctx.rteinline.onOver,
            leave:          ctx.rteinline.onLeave,
            drop:           ctx.rteinline.onDrop
        });
    }

    function enableFile(ctx) {
        if (ctx.file.available) {
            channel
                .on('dragenter',    DROP_TARGET_COMPONENT_SELECTOR, ctx.file.onEnter)
                .on('dragleave',    DROP_TARGET_COMPONENT_SELECTOR, ctx.file.onLeave)
                .on('dragover',     DROP_TARGET_COMPONENT_SELECTOR, ctx.file.onOver)
                .on('drop',         DROP_TARGET_COMPONENT_SELECTOR, ctx.file.onDrop);
        }
    }

    function disableGeneral(ctx) {
        ctx._interactionHandler.general && ctx._interactionHandler.general.destroy();
    }

    function disableAutocomplete(ctx) {
        ctx._interactionHandler.autocomplete && ctx._interactionHandler.autocomplete.destroy();
    }

    function disableRTEWidget(ctx) {
        ctx._interactionHandler.rtewidget && ctx._interactionHandler.rtewidget.destroy();
    }

    function disableRTEInline(ctx) {
        ctx._interactionHandler.rteinline && ctx._interactionHandler.rteinline.destroy();
    }

    function disableFileWidget(ctx) {
        ctx._interactionHandler.filewidget && ctx._interactionHandler.filewidget.destroy();
    }

    function disableFile(ctx) {
        channel
            .off('dragenter',   DROP_TARGET_COMPONENT_SELECTOR, ctx.file.onEnter)
            .off('dragleave',   DROP_TARGET_COMPONENT_SELECTOR, ctx.file.onLeave)
            .off('dragover',    DROP_TARGET_COMPONENT_SELECTOR, ctx.file.onOver)
            .off('drop',        DROP_TARGET_COMPONENT_SELECTOR, ctx.file.onDrop);
    }

    function disableDropAreaWidget(ctx) {
        ctx._interactionHandler.dropareawidget && ctx._interactionHandler.dropareawidget.destroy();
    }

    /**
     * Represents a drag and drop operation where the drag origin entity type is determined by the getTypeName method, and the drop target is an Overlay in the Editor
     * @typedef {{}} Granite.author.ui.dropController~DropController
     * @memberOf Granite.author.ui.dropController
     *
     * @property {function} getTypeName - Returns the type name of the entity that will be dragged (the drag origin)
     * @property {function} handleDragStart - Handles the drag start operation
     * @property {function} handleDragEnd - Handles the drag end operation
     * @property {function} handleDragEnter - Handles the drag enter operation
     * @property {function} handleDragLeave - Handles the drag leave operation
     * @property {function} handleDrag - Handles the drag operation
     * @property {function} handleDragOver - Handles the drag over operation
     * @property {function} handleDrop - Handles the drop operation
     * @property {function} isInsertAllowed - Indicates if the drop is allowed on the current hovered Editable
     *
     */

    /**
     * The dropController is the central point where the different drag and drop interactions are managed.
     *
     * It contains the different "sub controllers"; and each of them is basically managing a different kind of drag and drop interaction. The main one is the "general" one which handles d&d over {@link Granite.author.ui.Overlay}s
     *
     * @namespace
     * @alias Granite.author.ui.dropController
     * @type {{}}
     */
    ns.ui.dropController = {

        /**
         * Registry of all the available interaction handlers
         *
         * Each [interaction handler]{@link Granite.author.ui.Interaction} is acting over callbacks of a certain dropController widget
         *
         * @private
         * @ignore
         */
        _interactionHandler: {},

        /**
         * Registry storage for the Drop Controllers (for d&d interactions on Overlays)
         */
        registry: {},

        /**
         * Registers a Drop Controller
         * The registered drop controller handlers will be called by the [general]{@link Granite.author.ui.dropController.general} dropController depending on the <code>data-type</code> attribute of the dragged entity.
         *
         * This could be used to allow d&d on new asset types for instance.
         *
         * @see Granite.author.ui.dropController.general
         *
         * @param {String} name The name of the Drop Controller
         * @param {Granite.author.ui.dropController~DropController} controller The Drop Controller object
         */
        register: function (name, controller) {
            this.registry[name] = controller;
            controller.name = name;
        },

        /**
         * Unregister a Drop Controller by the given name
         *
         * @see Granite.author.ui.dropController.register
         *
         * @param {String} name The name of the Drop Controller to unregister
         */
        deregister: function (name) {
            this.registry[name] = null;
        },

        /**
         * Returns the Drop Controller by the given name
         *
         * @param {String} name The name of the Drop Controller to return
         * @returns {{}}
         */
        get: function (name) {
            return this.registry[name];
        },

        /**
         * Enables all d&d capabilities (by default, the dropController should be enabled for all Layers)
         *
         * @param {object} [config]                     - The optional config object to specify which parts to enable; if omitted, all parts are enabled
         * @param {boolean} [config.general]            - Enable general d&d capabilities on Overlays
         * @param {boolean} [config.filewidget]         - Enable d&d on FileUpload widget
         * @param {boolean} [config.dropareawidget]     - Enable d&d on DropArea widget
         * @param {boolean} [config.file]               - Enable d&d from file system
         */
        enable: function (config) {
            // If no parameter specified, activate them all
            if (!config) {
                enableGeneral(this);
                enableFileWidget(this);
                enableDropAreaWidget(this);
                enableFile(this);
                enableRTEWidget(this);
                enableRTEInline(this);
                enableAutocompleteWidget(this);
            } else {
                if (config.general) {
                    enableGeneral(this);
                }
                if (config.filewidget) {
                    enableFileWidget(this);
                }
                if (config.file) {
                    enableFile(this);
                }
                if (config.dropareawidget) {
                    enableDropAreaWidget(this);
                }
                if (config.rtewidget) {
                    enableRTEWidget(this);
                }
                if (config.rteinline) {
                    enableRTEInline(this);
                }
                if(config.autocomplete) {
                    enableAutocompleteWidget(this);
                }
            }
        },

        /**
         * Disable different d&d capabilities (by default, the dropController should be enabled for all Layers)
         *
         * @param {object} [config]                     - The optional config object to specify which parts to enable; if omitted, all parts are disabled
         * @param {boolean} [config.general]            - Disable general d&d capabilities on Overlays
         * @param {boolean} [config.filewidget]         - Disable d&d on FileUpload widget
         * @param {boolean} [config.dropareawidget]     - Disable d&d on DropArea widget
         * @param {boolean} [config.file]               - Disable d&d from file system
         */
        disable: function (config) {
            // If no parameter specified, deactivate them all
            if (!config) {
                disableGeneral(this);
                disableFileWidget(this);
                disableFile(this);
                disableDropAreaWidget(this);
                disableRTEWidget(this);
                disableRTEInline(this);
                disableAutocomplete(this);
            } else {
                if (config.general) {
                    disableGeneral(this);
                }
                if (config.filewidget) {
                    disableFileWidget(this);
                }
                if (config.file) {
                    disableFile(this);
                }
                if (config.dropareawidget) {
                    disableDropAreaWidget(this);
                }
                if (config.rtewidget) {
                    disableRTEWidget(this);
                }
                if (config.rteinline) {
                    disableRTEInline(this);
                }
                if (config.autocomplete) {
                    disableAutocomplete(this);
                }
            }
        },

        /**
         * NB: By default, the dropController is always enabled; if you want to disable entirely or part of it for a given layer,
         * call disable() during the Layer setUp(), and then reenable it in tearDown()
         *
         * @deprecated - Use enable instead
         * @ignore
         */
        activate: function () {
            Granite.author.util.deprecated('Use Granite.author.ui.dropController.enable instead');
        },

        /**
         * NB: By default, the dropController is always enabled; if you want to disable entirely or part of it for a given layer,
         * call disable() during the Layer setUp(), and then reenable it in tearDown()
         *
         * @deprecated - Act as a noop, use disable instead
         * @ignore
         */
        deactivate: function () {
            Granite.author.util.deprecated('Use Granite.author.ui.dropController.disable instead');
        },

        /**
         * Returns the insert behaviour for the given HTML Element at the given y-axis of the mouse
         *
         * @param {HTMLElement} element     - Target html element
         * @param {number} clientY          - Coordinate on the y-axis of the mouse
         * @returns {string} "before" or "after"
         */
        getInsertBehavior: function (element, clientY) {
            var targetHeight = element.clientHeight,
                shouldInsertAfter = false;

            if (targetHeight > INSERT_AFTER_MINHEIGHT) { // min height to insert after
                var rect = element.getBoundingClientRect(); // @todo throttle this massively

                if ((rect.top + targetHeight / 2) < clientY) {
                    return 'after';
                }
            }

            return 'before';
        },

        /**
         * Highlights all the DOM Elements associated as a drop zone for the given type of asset/component as enabling the drop action
         *
         * @param {string} type - Type such as <code>asset</code> or <code>component</code>
         */
        enableDropzone: function (type) {
            if (type === 'component') {
                $(DROP_TARGET_COMPONENT_SELECTOR).addClass(DROP_TARGET_ENABLED_CSSCLASS);
            } else if (type === 'asset') {
                $(DROP_TARGET_ASSET_SELECTOR).addClass(DROP_TARGET_ENABLED_CSSCLASS);
            }
        },

        /**
         * Removes the highlighting style from all the DOM Elements associated as a drop zone for the given type of asset/component
         *
         * @param {string} type - Type such as <code>asset</code> or <code>component</code>
         */
        disableDropzone: function (type) {
            if (type === 'component') {
                $(DROP_TARGET_COMPONENT_SELECTOR).removeClass(DROP_TARGET_ENABLED_CSSCLASS);
            } else if (type === 'asset') {
                $(DROP_TARGET_ASSET_SELECTOR).removeClass(DROP_TARGET_ENABLED_CSSCLASS);
            } else {
                $(DROP_TARGET_SELECTOR).removeClass(DROP_TARGET_ENABLED_CSSCLASS);
            }
        },

        /**
         * Returns the [Editable]{@link Granite.author.Editable} associated with the given event target DOM element
         *
         * @param event
         * @returns {Granite.author.Editable}
         */
        getEventTargetEditable: function (event) {
            return ns.editables.find({
                path: $(event.target).attr('data-path')
            })[0];
        }
    };

    /**
     * API: Use {@link Granite.author.ui.dropController} instead
     *
     * @type {{}}
     * @deprecated
     */
    Object.defineProperty(ns,'dropController',{

        get: function () {
            Granite.author.util.deprecated('Use Granite.author.ui.dropController instead');
            return ns.ui.dropController;
        },
        set: function (value) {
            Granite.author.util.deprecated('Use Granite.author.ui.dropController instead');
            ns.ui.dropController = value;
        }
    });

}(jQuery, Granite.author, jQuery(document), this));
