/*
 * ADOBE CONFIDENTIAL
 *
 * Copyright 2013 Adobe Systems Incorporated
 * All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
 */
;(function ($, ns) {
    "use strict";

    /**
     * Root object for references manipulation
     * @type {*}
     */
    ns.References = (function () {

        var self = {};

        var isReady = false;


        var EVENT_READY = "granite-references-ready";

        var Paginator = $(window).adaptTo("foundation-util-paginator");

        /**
         * References namespace
         * @type {string}
         */
        self.NAMESPACE = "references";

        /**
         * References namespace for items list
         * @type {string}
         */
        self.NAMESPACE_LIST = "reference-list";

        /**
         * References namespace for items detail
         * @type {string}
         */
        self.NAMESPACE_DETAIL = "detail";


        self.SELECTOR_DETAIL = ".detail";


        self.SELECTOR_DETAIL_TOOLBARS = ".detail-toolbars";


        self.SELECTOR_DETAIL_LIST = ".detail-list";


        /**
         * Event when references changes
         * @type {string}
         */
        self.EVENT_CHANGE = "granite-references-change";

        /**
         * Event when resizing
         * @type {string}
         */
        self.EVENT_RESIZE = "granite-references-resize";

        /**
         * Event when selecting all details
         * @type {string}
         */
        self.EVENT_SELECTALL = "granite-references-selectall";

        /**
         * Text to display when selection is empty
         * @type {string}
         */
        self.SELECTION_TEXT_EMPTY = Granite.I18n.get("Select an item to display its references.");

        /**
         * Text to display when selection is multiple
         * @type {string}
         */
        self.SELECTION_TEXT_MULTIPLE = Granite.I18n.get("List of references is not available for multiple selection.");

        /**
         * Text to display when references are not available for the selected item type
         * @type {string}
         */
        self.REFERENCES_UNAVAILABLE = Granite.I18n.get("List of references is not available for the selected item type.");


        /**
         * Initializes the DOM elements of References. Returns true if the elements are available and false otherwise.
         * @returns {boolean}
         */
        self.init = function() {

            // already initialized
            if (self.$root && self.$root.length > 0) return true;

            /**
             * References root DOM element
             * @type {jQuery}
             */

            self.$root = $("." + self.NAMESPACE);

            if (self.$root.length > 0) {
                self._init();
                return true;
            } else {
                return false;
            }
        };

        self._init = function() {

            /**
             * References message
             * @type {jQuery}
             */
            self.$message = self.$root.find(".message");

            /**
             * References wait indicator
             * @type {jQuery}
             */
            self.$spinner = self.$root.find(".refSpinner");

            /**
             * References list
             * @type {jQuery}
             */
            self.$list = self.$root.find("." + self.NAMESPACE_LIST);

            /**
             * References detail
             * @type {jQuery}
             */
            self.$detail = self.$root.find("." + self.NAMESPACE_DETAIL);

            /**
             * References detail header
             * @type {jQuery}
             */
            self.$detailHeader = self.$detail.find(".detail-header");

            /**
             * References detail body for the list of references
             * @type {jQuery}
             */
            self.$detailList = self.$detail.find(".detail-list");

            /**
             * References detail toolbars container
             * @type {jQuery}
             */
            self.$detailToolbars = self.$detail.find(".detail-toolbars");

            /**
             * The counter used for the toolbar animation (expand/collapse)
             * @type {number}
             */
            self.formerToolbarHeightCounter = 0;

            /**
             * The former height of the toolbar in order to determine when the animation (expand/collapse) is finished
             * @type {number}
             */
            self.formerToolbarHeight = 0;

            /**
             * References handlers
             * @type {Object}
             */
            self.handlers = {};

            /**
             * Triggers the general references change event
             * @param options Optional event extra parameters
             */
            self.triggerChange = function (options) {
                self.$root.trigger(self.EVENT_CHANGE + "." + self.NAMESPACE, options);
            };

            /**
             * Triggers the general references resize event
             * @param options Optional event extra parameters
             */
            self.triggerResize = function (options) {
                self.$root.trigger(self.EVENT_RESIZE, options);
            };

            /**
             * Hides wait indicator when loading references is completed
             */
            self.hideSpinner = function () {
                self.$spinner.hide();
            };

            /**
             * Shows wait indicator while loading references
             */
            self.showSpinner = function () {
                self.$message.hide();
                self.$spinner.show();
            };

            /**
             * Shows a panel
             * @param panel {String} Name of the panel to show
             */
            self.showPanel = function (panel) {
                self.$message.toggle(self.$message.hasClass(panel));
                self.$list.toggle(self.$list.hasClass(panel));
                self.$spinner.toggle(self.$spinner.hasClass(panel));
                self.$detail
                    .toggle(self.$detail.hasClass(panel))
                    .find(".actions").hide()
                ;
                if (panel !== "detail") {
                    self.$root.data("type", "");
                    self.$root.find(".granite-references-item--back").hide();
                } else {
                    self.$root.find(".granite-references-item--back").show();
                }
            };

            /**
             * Displays the given HTML message
             * @param message Message to display
             */
            self.displayMessage = function (message) {
                // Show message
                self.hideSpinner();
                self.$message.html(message);
                self._resetContainers();
            };

            /**
             * Reset all containers and set the counters to zero.
             * @private
             */
            self._resetContainers = function () {

                var $containers = self.$list.find("section");
                $containers.each(function () {
                    var $section = $(this);

                    // Empty list of references
                    $section.find(".detail-references").val("");

                    // Reset header's counter
                    var $header = $section.find("> .info a");
                    var text = $header.text();
                    if (text.length > 0 && text.charAt(text.length - 1) === ")") {
                        text = text.substr(0, text.lastIndexOf(" "));
                    }
                    $header.text(text + " (0)");

                    // hide next button
                    $section.find("coral-icon").attr("hidden", true);

                });

                self.showPanel("message");
            };

            self.clearPaginator = function (container) {
                var previousPaginator = container.paginator;
                if (previousPaginator) {
                    previousPaginator.destroy();
                }
            };

            self.setPaginator = function (container) {
                var pageLimit = parseInt(container.data("limit")) || 100;
                var paginator = new Paginator({
                    el: container[0],
                    limit: pageLimit,
                    wait: function() {
                        self.showSpinner()
                        return {
                            clear: function () {
                                self.hideSpinner();
                            }
                        }
                    },
                    resolveURL: function (paginator) {
                        var baseURL = Granite.HTTP.externalize(self.$root.data("componentPath") + ".provider.html?");
                        var searchParams = new URLSearchParams();
                        searchParams.append("item", self.getReferencePaths()[0]);
                        searchParams.append("acceptType", container.find("section:eq(0)").data("type"));
                        searchParams.append("offset", paginator.offset);
                        return baseURL + searchParams;
                    },
                    processResponse: function (paginator, html) {
                        self.showSpinner();
                        var deferred = $.Deferred();
                        var processed = Granite.UI.Foundation.Utils.processHtml(html, undefined, function() {
                            var sections = $("<div>" + processed + "</div>").find("section");
                            var refs = self.$detailList.html();
                            var increment = 0;
                            sections.each((idx, val) => {
                                if (val.dataset.hasmore != "") {
                                    $(val).find(".actions").hide();
                                    refs += val.outerHTML;
                                    increment++;
                                }
                            });
                            self.$detailList.html(refs);
                            self.updateDetailListAccessibility();
                            self.hideSpinner();
                            deferred.resolve({
                                length: increment,
                                hasNext: sections.length >= paginator.limit
                            });
                        });
                        return deferred.promise();
                    }
                });
                container.paginator = paginator;
                paginator.start(pageLimit);
            }

            /**
             * Appends the provided reference to its corresponding container
             * @param reference HTML string of the reference
             */
            self.appendReference = function (reference) {
                var $reference = $(reference);
                if ($reference.data("type")) {
                    var hasMoreReferences = $reference.data("hasmore") === "";

                    // Find the corresponding container
                    var $container = self.$list.find("section." + $reference.data("type"));

                    // Append reference
                    var $refs = $($container.find(".detail-references"));
                    var val = $refs.val() + reference.outerHTML;
                    $refs.val(val);

                    // Refresh references count
                    var $header = $container.find("> .info a");
                    var count = val.match(/<section/g);
                    var text = $header.text();
                    if (text.length > 0 && text.charAt(text.length - 1) === ")") {
                        text = text.substr(0, text.lastIndexOf(" "));
                    }

                    var countLength = hasMoreReferences ? count.length - 1 : count.length;
                    var countText = countLength;
                    if (hasMoreReferences) {
                        countText+= "+";
                    }
                    $header.text(text + " (" + countText + ")");
                    // Show/hide next button based on references count
                    if (countLength) {
                        $container.find("coral-icon").removeAttr("hidden");
                    } else {
                        $container.find("coral-icon").attr("hidden", true);
                    }

                }
            };

            /**
             * Sets the toolbars to the provided value for reference type
             * @param toolbars HTML string representing the toolbars
             * @param type Reference type to add the toolbars for
             */
            self.setToolbars = function (toolbars, type) {
                if (toolbars && type) {
                    var $container = self.$list.find("section." + type); // Find the corresponding container

                    // Set the toolbars
                    var $toolbars = $($container.find(".detail-toolbars"));

                    if (toolbars && typeof(toolbars) === 'string') {
                        $toolbars.val(toolbars); // Set the toolbars
                    } else {
                        $toolbars.val(""); // No toolbars, reset
                    }
                }
            };


            /**
             * Reads and sets the reference paths as selected in the given collection
             */
            self.setReferencePaths = function(collection) {

                if (typeof collection === "undefined") {
                    collection = $(self.$root.data("target"));
                }

                var items = collection.find(".foundation-selections-item");

                if (items.length === 0) {
                    if (collection.is(".foundation-layout-list")) {
                        // list layout and no selection: load content path
                        self.triggerChange();
                    } else {
                        // card layout and no selection: empty references list
                        self.triggerChange({
                            paths: []
                        });
                    }

                } else {
                    // list or card layout and selection: add selected paths
                    var paths = [];
                    items.each(function() {
                        paths.push($(this).data("foundation-collection-item-id"));
                    });

                    var formerPaths;
                    if (self.$root.data("paths")) {
                        formerPaths = self.getReferencePaths();
                    } else {
                        formerPaths = [];
                    }

                    self.triggerChange({
                        paths: paths,
                        // avoid refresh if mutli selection now and before
                        avoidRefresh: paths.length > 1 && formerPaths.length > 1
                    });
                }
            };

            /**
             * Gets the current reference paths
             * @returns {Array} Current reference paths
             */
            self.getReferencePaths = function () {
                return self.$root.data("paths") ? self.$root.data("paths").split("|") : [];
            };

            /**
             * Gets the current reference path
             * @returns {string} Current reference path
             */
            self.getReferencePath = function () {
                var paths = self.getReferencePaths();
                return paths.length > 0 ? paths[0] : undefined;
            };

            /**
             * Tests paths for validity; displaying messages if invalid
             * @returns {Boolean | undefined} True if paths are valid, undefined otherwise
             */
            self.checkHasSingleValidReferencePath = function (paths) {
                if (paths.length === 0 || (paths.length === 1 && paths[0] === "")) {
                    // selection mode (card layout) without selection
                    self.displayMessage(self.SELECTION_TEXT_EMPTY);
                } else if (paths.length > 1) {
                    // multi selection
                    self.displayMessage(self.SELECTION_TEXT_MULTIPLE);
                } else if ($(".foundation-selections-item").data("references") == false) {
                    self.displayMessage(self.REFERENCES_UNAVAILABLE);
                } else {
                    return true; // Valid
                }
            };

            /**
             * Refresh the current detail
             */
            self.refreshDetail = function () {
                var type = self.$root.data("type");
                self.requestReferences(function () {
                    self.loadDetail(type);
                });
            };

            /**
             * Refresh the selected detail section
             */
            self.refreshDetailSection = function (type) {
                var paths = self.getReferencePaths();

                if (self.checkHasSingleValidReferencePath(paths)) {
                    // get references for that path
                    $.ajax({
                        url: Granite.HTTP.externalize(self.$root.data("componentPath") + ".provider.html"),
                        data: {
                            item: paths[0]
                        },
                        cache: false
                    }).done(function (result) {
                        self._resetContainers();
                        var $selected = self.$detailList.find("section.active");
                        var path = $selected.data("path");
                        self.$detailList.empty();
                        $(result).each(function () {
                            if ($(this).data("type") === type) {
                                self.$detailList.append($(this));
                                if ($(this).data("path") === path) {
                                    $selected = $(this);
                                }
                            }
                        });
                        self.showPanel("detail");
                        self.triggerResize({detail: true});
                        $selected.trigger("click");
                    }).fail(function () {
                        self.displayMessage("An error occurred while refreshing list of references.");
                    });
                }
            };

            /**
             * Listen to change events of the references
             */
            self.$root.on(self.EVENT_CHANGE + "." + self.NAMESPACE, function (e, options) {
                var paths = [];
                options = options || {};

                if (options.paths) {
                    paths = options.paths;
                } else if (options && options.refresh) {
                    // refresh recent paths (e.g. after creating a comment in bulk properties)
                }

                if (paths.length === 1) {
                    self.$root.data("paths", paths[0]);
                } else if (paths.length === 0) {
                    self.$root.data("paths", "");
                } else {
                    var p = "";
                    var pipe = "";
                    for (var i in paths) {
                        p += pipe + paths[i];
                        pipe = "|";
                    }
                    self.$root.data("paths", p);
                }

                if (!self.$root.is(":visible") || options.avoidRefresh) {
                    // refreshing chocked because references rail view is not visible or by options
                    return;
                }

                // full refresh of the references (hide first)
                self.$root
                    .hide()
                    .fadeIn("fast")
                    .trigger(self.EVENT_CHANGE + "." + self.NAMESPACE + "-" + self.NAMESPACE_LIST)
                ;
            });

            /**
             * Listen to change events of the references list
             */
            self.$root.on(self.EVENT_CHANGE + "." + self.NAMESPACE + "-" + self.NAMESPACE_LIST, function () {
                self.requestReferences(function () {
                    self.requestToolbars(function () {
                        self.showPanel("reference-list");
                        $("ul.reference-list li:not([aria-hidden]) section.granite-references-item").each(function(index, sectionElement) {
                            var titleText = $(sectionElement).find("a.granite-references-title").text();
                            var isZeroReferences = titleText && titleText.endsWith("(0)");

                            var sectionElementLabelId = $(sectionElement).parent().children()[0].id;
                            $(sectionElement).parent().attr("aria-labelledby", sectionElementLabelId);

                            // role on section element in either of the cases, has to be "button"
                            if(isZeroReferences) {
                                $(sectionElement).css("cursor", "auto");
                                $(sectionElement).attr("aria-disabled", "true");
                                $(sectionElement).removeAttr("tabindex");
                                $(sectionElement).removeAttr("aria-haspopup");
                            } else {
                                $(sectionElement).css("cursor", "pointer");
                                $(sectionElement).removeAttr("aria-disabled");
                                $(sectionElement).attr("tabindex", "0");
                                $(sectionElement).attr("aria-haspopup", "dialog");
                            }

                            if(titleText) {
                                $(sectionElement).attr("aria-label", titleText);
                            }
                        });

                        $("ul.reference-list li:not([aria-hidden]) section.granite-references-item[tabindex]").first().focus();
                        self.triggerResize({list: true, scrollToTop: true});
                    });
                });
            });

            /**
             * Request the references
             * @param callback The method to call after the references have been requested and appended to
             *                 the hidden textarea
             */
            self.requestReferences = function (callback) {

                self.showSpinner();

                var paths = self.getReferencePaths();

                if (self.checkHasSingleValidReferencePath(paths)) {
                    // get references for that path
                    $.ajax({
                        url: Granite.HTTP.externalize(self.$root.data("componentPath") + ".provider.html"),
                        data: {
                            item: paths[0]
                        },
                        cache: false
                    }).done(function (result) {
                            self._resetContainers();
                            self.$list.find("section .detail-references").val("");
                            $(result).each(function () {
                                self.appendReference(this);
                            });
                            self.hideSpinner();
                            if (typeof callback != "undefined") {
                                callback();
                            }
                        })
                        .fail(function () {
                            self.displayMessage("An error occurred while refreshing list of references.");
                        })
                    ;
                }
            };

            /**
             * Request the toolbars
             * @param callback The method to call after the toolbars have been requested and set for
             *                 the hidden textarea
             */
            self.requestToolbars = function (callback) {
                self.showSpinner();

                var paths = self.getReferencePaths();

                if (self.checkHasSingleValidReferencePath(paths)) {
                    $.ajax({
                        url: Granite.HTTP.externalize(self.$root.data("componentPath") + ".html" + paths[0]),
                        cache: false
                    }).done(function (result) {
                        self.$list.find("section .detail-toolbars").val(""); // Clear the existing toolbar textareas

                        $(result).find(".granite-references-item[data-type]").each(function () {
                            var type = $(this).data('type');
                            var toolbars = $(this).find('.detail-toolbars').val().trim();
                            if (toolbars) {
                                self.setToolbars(toolbars, type);
                            }
                        });
                        self.hideSpinner();
                        if (typeof callback != "undefined") {
                            callback();
                        }
                    }).fail(function () {
                        self.displayMessage("An error occurred while refreshing list of references.");
                    });
                }
            };

            /**
             * Listen to tap/click on references types
             */
            self.$list.on("click", "section", function () {
                self.loadDetail($(this));
            });

            /**
             * Treat references menubar as a single tab stop.
             */
            self.$list.on("focus", "section.granite-references-item[tabindex]:not([aria-disabled])", function (e) {
                self.$list.find(e.handleObj.selector).not(e.currentTarget).attr("tabindex", "-1");
                e.currentTarget.tabIndex = 0;
            });

            /**
             * Handles keydown events for keyboard navigating and activating items
             * @param e The jQuery keyboard event.
             */
            self.listKeydownEventHandler = function (e) {
                var keyCode = e.keyCode;

                // On Enter or Space trigger click event on the event target
                if (keyCode === 13 || keyCode === 32) {
                    e.preventDefault();
                    e.currentTarget.click();
                // Ignore keys not used for menu navigation
                } else if (keyCode < 33 || keyCode > 40) {
                    return;
                }

                var $focusables = $(e.delegateTarget).find(e.handleObj.selector);
                var length = $focusables.length;
                var index = $focusables.index(e.currentTarget);

                e.preventDefault();
                e.stopPropagation();

                switch (keyCode) {
                    case 40: // ArrowDown
                    case 33: // PageDown
                        if (index < length - 1) {
                            $focusables[index + 1].focus();
                        }
                        break;
                    case 38: // ArrowUp
                    case 34: // PageUp
                        if (index > 0) {
                            $focusables[index - 1].focus();
                        }
                        break;
                    case 35: // End
                        $focusables[length - 1].focus();
                        break;
                    case 36: // Home
                        $focusables[0].focus();
                        break;
                    case 37: // ArrowLeft
                        // Within the detail list, ArrowLeft either closes the current detail,
                        if (e.currentTarget.getAttribute("aria-expanded") === "true") {
                            e.currentTarget.click();
                        //  or triggers the back button to return to the references menubar.
                        } else if (e.currentTarget.getAttribute("aria-expanded") === "false") {
                            self.$root.find(".granite-references-item--back").click();
                        }
                        break;
                    case 39: // ArrowRight
                        e.currentTarget.click();
                        break;
                }
            };

            /**
             * Handles keydown events for keyboard navigating and activating menubar items 
             * @param e The jQuery keyboard event.
             */
            self.$list.on("keydown", "section.granite-references-item[tabindex]:not([aria-disabled])", self.listKeydownEventHandler);

            /**
             * Load the detail of the given type or section
             * @param type The name of the section or the section of the references list itself
             */
            self.loadDetail = function (type) {
                var $section;
                if (typeof type === "string") {
                    $section = self.$list.find("section." + type);
                } else {
                    $section = type;
                }

                // Get references to add
                var refs = $section.find(".detail-references").val();
                var isEmpty = refs.trim() === "";
                if (!isEmpty || $section.data("showemptydetail") === true) {
                    // set type to currently displayed detail
                    self.$root.data("type", $section.data("type"));

                    // Replace detail header
                    var title = $section.find("> .info a").text();
                    title = title == null ? "" : title.match(/.*[^ (\d)+]/)[0]; // remove counter
                    if ($section.data("multiselect") === true && !isEmpty) {
                        // enable multiselect: add checkboxes to title and all items in list
                        self.$detailHeader
                            .addClass("granite-references-detail-item--hasCheckbox")
                            .html('<coral-checkbox>' + title + '</coral-checkbox>');
                        // Listen to change event of the checkbox in the detail title
                        self.$detailHeader.find("coral-checkbox").on("change", function () {

                            var checked = this.checked;

                            // first call: add a checkbox to each item
                            if (self.$detailList.find("section coral-checkbox").length === 0) {
                                $(self.$detailList.find("section"))
                                    .addClass("granite-references-detail-item--hasCheckbox")
                                    .prepend("<coral-checkbox></coral-checkbox>");
                            }

                            // deactivate active selection and hide actions
                            $(self.$detailList.find("section.active"))
                                .removeClass("active")
                                .find(".actions").hide();

                            // toggle checkboxes
                            self.$detailList.find("section")
                                .toggleClass("granite-references-detail-item--hasCheckbox", checked)
                                .find("coral-checkbox").each(function () {
                                $(this).toggle(checked);
                                Coral.commons.ready(this, function (cb) {
                                    cb.indeterminate = false;
                                    cb.checked = checked;
                                });
                            });

                            self.$detailList.data("multiselect", checked);
                            self.$root.trigger(self.EVENT_SELECTALL, {checked: checked});
                        });
                    } else {
                        self.$detailHeader.removeClass("granite-references-detail-item--hasCheckbox");
                        self.$detailHeader.text(title);
                    }

                    // Replace detail content with corresponding data stored in a hidden element
                    self.$detailList.html(refs);

                    self.updateDetailListAccessibility();

                    self.$detailToolbars.html($section.find(".detail-toolbars").val());
                    self.clearPaginator(self.$detailList);
                    var hasMore = self.$detailList.find("section[data-hasmore]");
                    if (hasMore.length > 0) {
                        hasMore.remove();
                        self.setPaginator(self.$detailList);
                    }

                    // Show and resize detail panel and initialize widgets
                    self.showPanel("detail");
                    self.$detail.trigger("foundation-contentloaded.data-api");
                    window.setTimeout(function() {
                        self.triggerResize({detail: true, scrollToTop: true});
                    }, 1);

                    $(self.$detailToolbars.find(".detail-toolbar coral-accordion")).on("coral-accordion:change", function (e, o) {
                        // change indicates the beginning of the expanding/collapsing animation, see also resize event
                        var interval = window.setInterval(function () {
                            self.triggerResize({
                                detail: true,
                                interval: interval
                            });
                        }, 10);
                    });

                    // set focus on back button or first reference
                    setTimeout(function() {
                        // first focus the back button
                        self.$root.find(".granite-references-item--back button").focus();
                        // if reference items exist focus the first reference
                        self.$detailList.find(".granite-references-item > .info[role=button][tabindex=0]").first().focus();
                    }, 50);
                }
            };

            /**
             * Updates the detail list and items for accessibility
             */
            self.updateDetailListAccessibility = function() {
                // the detail list should have role="list" and be labelled by the detail header
                if (!self.$detailHeader.prop("id")) {
                    self.$detailHeader.prop("id", Coral.commons.getUID());
                }

                self.$detailList.attr({
                    "role": "list",
                    "aria-labelledby": self.$detailHeader.prop("id")
                });

                // update each section element for accessibility
                var sections = self.$detailList.find("section");
                sections.each((idx, section) => {
                    var $section = $(section);
                    var $info = $section.find('div.info');
                    var $actions = $section.find('div.actions');
                    if (!$actions.prop("id")) {
                        $actions.prop("id", Coral.commons.getUID());
                    }

                    // each section element should have role="listitem"
                    $section.attr({
                        "role": "listitem",
                        "aria-posinset": idx + 1,
                        "aria-setsize": sections.length
                    });

                    // each div.info should have role="button", tabindex="0", aria-expanded, and aria-controls
                    $info.attr({
                        "role": "button",
                        "tabindex": "0",
                        "aria-expanded": "false",
                        "aria-controls": $actions.prop("id")
                    });
                });
            };

            /**
             * Sets the state of the main checkbox (in the title):
             * - checked if all checkboxes in detail list are checked
             * - unchecked if all checkboxes are unchecked
             * - indeterminate if some checkboxes are checked
             */
            self.updateMainCheckbox = function () {
                var hasChecked = false;
                var hasUnchecked = false;
                self.$detailList.find("coral-checkbox").each(function () {
                    if (this.checked) {
                        hasChecked = true;
                    } else {
                        hasUnchecked = true;
                    }
                    if (hasChecked && hasUnchecked) {
                        return false;
                    }
                });
                var titleCheckbox = self.$detailHeader.find("coral-checkbox").get(0);
                if (hasChecked && hasUnchecked) {
                    titleCheckbox.checked = false;
                    titleCheckbox.indeterminate = true;
                } else {
                    titleCheckbox.checked = hasChecked;
                    titleCheckbox.indeterminate = false;
                }
            };

            /**
             * Listen to tap/click on back button in detail panel
             */
            self.$root.on("click", ".granite-references-item--back", function () {
                // Show references list panel
                self.showPanel("reference-list");
                self.$detailList.removeData("multiselect");

                // Restore focus to the last granite-references-item that had focus before opening detail panel
                self.$list.find("section.granite-references-item[tabindex=0]:not([aria-disabled])").focus();
            });


            /**
             * Listen to click on detail list items to activate or deactivate an item. If the list is in multiselect mode
             * the item's checkbox is checked or unchecked accordingly instead.
             */
            self.$detailList.on("click", "section", function (e) {
                var $section = $(this);

                var $actions = $section.find(".actions");
                if ($actions.length && !$actions.is(e.target) && !$.contains($actions[0], e.target)) {
                    if (self.$detailList.data("multiselect") === true) {
                        // multiselect mode: check/uncheck checkbox
                        var checkbox = $section.find("coral-checkbox").get(0);
                        var $nativeCheckbox = $section.find("coral-checkbox input");
                        if (checkbox) {
                            checkbox.checked = $nativeCheckbox.is(e.target) ? $nativeCheckbox.prop("checked") : !checkbox.checked;
                            self.updateMainCheckbox();
                        }
                    } else {
                        // normal mode: toggle active

                        // Toggle section active class
                        $section.toggleClass("active");

                        // set aria-expanded
                        if ($section.hasClass("active")) {
                            $section.find(".info").attr("aria-expanded", "true");
                        } else {
                            $section.find(".info").attr("aria-expanded", "false");
                        }

                        // Toggle actions status
                        $actions.toggle();

                        // Hide actions of siblings
                        $section.siblings("section")
                            .removeClass("active")
                            .find(".actions").hide()
                        ;

                        e.preventDefault();
                    }
                }

            });

            /**
             * Handles keydown events for keyboard navigating and activating detail list items 
             * @param e The jQuery keyboard event.
             */
            self.$detailList.on("keydown", "section.granite-references-item > .info[tabindex]", self.listKeydownEventHandler); 

            /**
             * Listen to resize events of the references
             */
            self.$root.on(self.EVENT_RESIZE, function (e, options) {
                options = options || {};
                if (!options.detail && !options.list) {
                    options.detail = true;
                    options.list = true;
                }

                if (options.list === true) {
                    // resize list
                    self.$list.height($(window).height() - self.$list.offset().top);
                    if (options.scrollToTop === true) self.$list.scrollTop(0);
                }

                if (options.detail === true) {
                    // resize detail
                    var $toolbar = self.$detailToolbars.find(".detail-toolbar.active");

                    var tHeight = 0;
                    if ($toolbar) {
                        if (!options.interval && $toolbar.find("coral-accordion-item[selected]").length === 0) {
                            // workaround fix; the accordion item is rendered expanded initially even if the item is not selected
                            $toolbar.find("coral-accordion-item coral-accordion-item-content").hide();
                            tHeight = $toolbar.outerHeight();
                            $toolbar.find("coral-accordion-item coral-accordion-item-content").show();
                        } else {
                            tHeight = $toolbar.outerHeight();
                        }
                    }

                    /**
                     * The interval is required to follow the animation of expanding/collapsing the toolbar (which is
                     * an Coral accordion) and to determine when the animation is finished. Since not all interval steps
                     * result necessarily in a different height the former and current height have to match several times.
                     */
                    if (options.interval && tHeight === self.formerToolbarHeight) {
                        if (self.formerToolbarHeightCounter === 3) {
                            window.clearInterval(options.interval);
                            self.formerToolbarHeightCounter = 0;
                        } else {
                            self.formerToolbarHeightCounter++;
                        }
                    } else {
                        self.formerToolbarHeight = tHeight;
                        self.formerToolbarHeightCounter = 0;

                        self.$detailList.height($(window).height() - self.$detailList.offset().top - tHeight);
                        if (options.scrollToTop === true) self.$detailList.scrollTop(0);
                    }
                }
            });

            isReady = true;
            self.setReferencePaths();
            $(document).trigger(EVENT_READY + self.NAMESPACE);
        };

        /**
         * Execute the given handler if or as soon as References is initialized.
         * @param handler
         */
        self.ready = function(handler) {
            if (isReady) {
                handler();
            } else {
                $(document).on(EVENT_READY + self.NAMESPACE, handler);
            }
        };

        // backward compatibility pre lazy loading
        self.init();


        return self;

    }());

}(jQuery, Granite));
