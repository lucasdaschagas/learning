(function (s7ve, $, Coral) {
	'use strict';

	s7ve.UI.ColorPicker = new Class({

		toString: 'ColorPicker',

		hue: 0,

		saturation: 100,

		luminance: 50,

		opacity: 1,

		red: 255,

		green: 0,

		blue: 0,

		hex: '#ff0000',

		size: 200,

		construct: function (options) {
			//if the user specifies options, then parse them and update class properties
			this.parseOptions(options);
			//set the inital color to the defaults or user given defaults
			var color = [this.red, this.green, this.blue];
			this.updateRGBModel(color[0], color[1], color[2]);
			this.updateHSLModel(this._rgbTohsl(color[0], color[1], color[2]));
			this.updateHexModel(this._rgbToHex(color[0], color[1], color[2]));

			//Main container
			this._container = $('<div>', {
				'class': 'color-picker'
			});
			//.css('width', this.size + 50); //The 50px is just a small buffer for the luminance slider

			//The coral element
			this.$element = this._container;

			//Container that the canvas is actually in. Do not modify the style properties
			this._canvasContainer = $('<div>', {
				'class': 'color-picker-canvas-container',
				'width': this.size + 'px',
				'height': this.size + 'px'
			});

			//Container for all of the text inputs
			this._inputContainer = $('<div>', {
				'class': 'color-picker-input-container '
			});

			//The actual canvas where the color wheel is drawn
			this._canvas = $('<canvas>', {
				'class': 'color-picker-canvas'
			}).attr({
				'width': this.size + 'px',
				'height': this.size + 'px'
			});

			this._context = this._canvas[0].getContext('2d');

			$(this._canvasContainer).append($(this._canvas));
			$(this._container).append($(this._canvasContainer));

			this.createLumianceSlider();
			$(this._container).append($(this._inputContainer));

			//Render the color picker
			this.drawToContext();
			this.createPreview();
			this.createInputs();
			this.createColorMapPointer();

			//attach mouse events to the canvas
			$(this._canvas).on('mousedown', this._onMouseDown.bind(this));
		},

		/**
		 *	Sets properties on this class from user
		 */
		parseOptions: function (options) {
			for (var option in options) {
				this[option] = options[option];
			}
		},

		/**************************************************************************************/
		/***************************** UI creation functions **********************************/
		/**************************************************************************************/


		/**
		 * Renders the color wheel on the canvas
		 */
		createWheel: function () {

			//The center of the circle relative to the position of the container on the screen
			//This also happens to be the size of the radius
			var center = this.size / 2;

			for (var i = 0; i < 360; i += 1) {
				//Render the canvas by creating a lot of arcs
				var startAngle = (i - 2) * Math.PI / 180;
				var endAngle = i * Math.PI / 180;
				this._context.beginPath();
				//Move to the center of the canvas
				this._context.moveTo(center, center);
				//create arcs from the center to the edge of the canvas with the radius size/2
				this._context.arc(center, center, this.size / 2, startAngle, endAngle, false);
				//Finish the arc
				this._context.closePath();
				//create a radial gradient using hsl color space. the luminace is the only thing
				//that the user can dynamically change. the saturation increases as the gradient
				//spreads outward. The hue is determined by a number from 0 - 360
				var gradient = this._context.createRadialGradient(center, center, 0, center, center, center);
				//The color stop is at 40% so that we can put the preview div in the center without
				//blocking any other colors
				gradient.addColorStop(0, "hsla(" + i + ", 0%," + this.luminance + "%," + this.opacity + ")");
				gradient.addColorStop(0.4, "hsla(" + i + ", 0%," + this.luminance + "%," + this.opacity + ")");
				gradient.addColorStop(1, "hsla(" + i + ", 100%," + this.luminance + "%," + this.opacity + ")");
				//actually render the color
				this._context.fillStyle = gradient;
				this._context.fill();
			}
		},

		/**
		 * Creation function for the preview div seen at the center of the canvas
		 */
		createPreview: function () {
			//this is going to be the size of the preview relative to the canvas size
			var size = this.size / 3;

			this._preview = $('<div>', {
				'class': 'color-picker-preview'
			})
				.css({
					width: size,
					height: size,
					background: this.getCurrentcolor('rgb'),
					top: this.size / 2 - size / 2 + 'px',
					left: this.size / 2 - size / 2 + 'px'
				});

			$(this._canvasContainer).append($(this._preview));
		},

		/**
		 * Creates the inputs used to specify colors
		 */
		createInputs: function () {

			//RGB inputs
			this._inputR = new Coral.Textfield().set({
				value: this.red
			});
			this._inputG = new Coral.Textfield().set({
				value: this.green
			});
			this._inputB = new Coral.Textfield().set({
				value: this.blue
			});

			var rgbContainer = $("<div class='color-picker-rgb-input-container'>")
			$(rgbContainer).append("<label class='color-picker-label' id='vse-color-picker-red-label'> Red </label>");
			$(rgbContainer).append($(this._inputR));
			$(rgbContainer).append("<label class='color-picker-label' id='vse-color-picker-green-label'> Green </label>");
			$(rgbContainer).append($(this._inputG));
			$(rgbContainer).append("<label class='color-picker-label' id='vse-color-picker-blue-label'> Blue </label>");
			$(rgbContainer).append($(this._inputB));

			$(this._inputContainer).append($(rgbContainer));

			$(this._inputR).add($(this._inputG)).add($(this._inputB)).on('change', function (e) {
				e.stopPropagation();
				var r = parseInt($(this._inputR).val());
				var g = parseInt($(this._inputG).val());
				var b = parseInt($(this._inputB).val());

				//Reurn if we got a non numerical input
				if (isNaN(r) || isNaN(g) || isNaN(b)) return;

				this.updateRGBModel(r, g, b);
				this.updateHSLModel(this._rgbTohsl(r, g, b));
				this.updateHexModel(this._rgbToHex(r, g, b));
				this.updatePreview();
				this.updatePointer();
				this.updateSlider();
				this.updateHslInputs();
				this.updateHexInput();
				this._dispatchChangeEvt();
			}.bind(this));

			//HSL inputs
			this._inputH = new Coral.Textfield().set({
				value: this.hue
			});
			this._inputS = new Coral.Textfield().set({
				value: this.saturation
			});
			this._inputL = new Coral.Textfield().set({
				value: this.luminance
			});

			var hslContainer = $("<div class= 'color-picker-hsl-input-container'>");
			$(hslContainer).append("<label class='color-picker-label' id='vse-color-picker-hue-label'> Hue </label>");
			$(hslContainer).append($(this._inputH));
			$(hslContainer).append("<label class='color-picker-label' id='vse-color-picker-saturation-label'> Saturation </label>");
			$(hslContainer).append($(this._inputS));
			$(hslContainer).append("<label class='color-picker-label' id='vse-color-picker-luminance-label'> Luminance </label>");
			$(hslContainer).append($(this._inputL));

			$(this._inputContainer).append($(hslContainer));

			$(this._inputH).add($(this._inputS)).add($(this._inputL)).on('change', function (e) {
				e.stopPropagation();
				var h = parseInt($(this._inputH).val())
				var s = parseInt($(this._inputS).val())
				var l = parseInt($(this._inputL).val())

				if (isNaN(h) || isNaN(s) || isNaN(l)) return;

				var color = this._hslToRgb(h, s, l);
				this.updateRGBModel(color[0], color[1], color[2]);
				this.updateHSLModel([h, s / 100, l / 100]);
				this.updateHexModel(this._rgbToHex(color[0], color[1], color[2]));
				this.updatePreview();
				this.updatePointer();
				this.updateSlider();
				this.updateHexInput();
				this.updateRgbInputs();
				this._dispatchChangeEvt();
			}.bind(this));


			//Hex input
			var hexContainer = $("<div class= 'color-picker-hex-input-container'>");

			this._inputHex = new Coral.Textfield().set({
				value: this.hex
			});

			$(hexContainer).append("<label class='color-picker-label' id='vse-color-picker-hex-label'> Hex </label>");
			$(hexContainer).append($(this._inputHex));
			$(this._inputContainer).append($(hexContainer));

			$(this._inputHex).on('change', function (e) {
				e.stopPropagation();
				var color = this._hexToRgb($(this._inputHex).val());
				if (!color) return;
				this.updateRGBModel(color[0], color[1], color[2]);
				this.updateHSLModel(this._rgbTohsl(color[0], color[1], color[2]));
				this.updateHexModel($(this._inputHex).val());
				this.updatePreview();
				this.updatePointer();
				this.updateSlider();
				this.updateHslInputs();
				this.updateRgbInputs();
				this._dispatchChangeEvt();
			}.bind(this));

			//Opacity input
			var opacityContainer = $("<div class= 'color-picker-opacity-input-container'>");

			this._inputOpacity = new Coral.Textfield().set({
				value: this.opacity
			});

			$(opacityContainer).append("<label class='color-picker-label' id='vse-color-picker-opacity-label'> Opacity </label>");
			$(opacityContainer).append($(this._inputOpacity));

			$(this._inputContainer).append($(opacityContainer));

			$(this._inputOpacity).on('change', function (e) {
				e.stopPropagation();
				var opacity = parseFloat(this._inputOpacity.value);
				if (isNaN(opacity)) return;
				this.updateOpacityModel(opacity);
				this.updatePreview();
				this.drawToContext();
				this._dispatchChangeEvt();
			}.bind(this));
		},

		/**
		 * Create the pointer for the color map
		 */
		createColorMapPointer: function () {
			//define it's current position based on color'
			this._pointer = $('<div>', {
				"class": 'color-picker-pointer'
			});

			$(this._canvasContainer).append($(this._pointer));

			$(this._pointer).on('mousedown', this._onMouseDown.bind(this));

			this.updatePointer();
		},

		/**
		 * Create the luminace slider
		 */
		createLumianceSlider: function () {
			this._lumSlider = new Coral.Slider().set({
				orientation: 'vertical',
				tooltips: true,
				filled: true,
				min: 0,
				max: 100,
				value: 50,
				step: 1,
				slide: false
			});

			$(this._container).append(this._lumSlider);

			this._lumSlider.on("change", function (e) {
				e.preventDefault();
				e.stopPropagation();
				this.luminance = parseInt(this._lumSlider.value);
				$(this._inputL).val(this.luminance);

				var color = this._hslToRgb(this.hue, this.saturation, this.luminance);
				this.updateRGBModel(color[0], color[1], color[2]);
				this.updateHexModel(this._rgbToHex(color[0], color[1], color[2]));
				this.updateRgbInputs();
				this.updateHexInput();
				this.updatePreview();
				this.drawToContext();
				this._dispatchChangeEvt();
			}.bind(this));

		},

		/**
		 * Refreshes the actual canvas
		 */
		drawToContext: function () {
			this._context.clearRect(0, 0, this._canvas[0].width, this._canvas[0].height);
			this.createWheel();
		},

		/**************************************************************************************/
		/********************************* Updating Functions *********************************/
		/**************************************************************************************/

		/**
		 * Sets color with hex or rgb value. returns false if invalid color
		 */
		setColor: function (value) {
			var rgbReg = /^rgba?\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,?\s*(\d*(\.\d+)?)?\s*\)$/i;
			var hexReg = /\#([a-f\d]{6})|\#([a-f\d]{3})/i;
			if (value.match(hexReg)) { // HEX color

				if (this.hex == value) return;
				var color = this._hexToRgb(value);
				this.updateRGBModel(color[0], color[1], color[2]);
				this.updateHSLModel(this._rgbTohsl(color[0], color[1], color[2]));
				this.updateHexModel(this._rgbToHex(color[0], color[1], color[2]));
			} else if (value.match(/^rgba?\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,?\s*(\d*(\.\d+)?)?\s*\)$/i)) {
				var color = rgbReg.exec(value),
					r = parseInt(color[1]),
					g = parseInt(color[2]),
					b = parseInt(color[3]),
					a = color[4] ? parseFloat(color[4]) : this.opacity;

				//check if they are the same
				if (this.red == r && this.green == g && this.blue == b && this.opacity == a) return;
				this.updateRGBModel(r, g, b);
				this.updateHSLModel(this._rgbTohsl(r, g, b));
				this.updateHexModel(this._rgbToHex(r, g, b));
				this.updateOpacityModel(a);
			} else {
				return;
			}
			this.updatePreview();
			this.updatePointer();
			this.updateSlider();
			this.updateHslInputs();
			this.updateRgbInputs();
			this.updateHexInput();
			this.updateOpacityInput();

			this._dispatchChangeEvt();
		},
        
        /**
         * Sets "labelledBy" attribute for all 8 text inputs of ColorPicker
         */
        setLabelledByIds: function (labelledByIds) {
            $(this._inputR).attr("labelledBy", labelledByIds + " vse-color-picker-red-label");
            $(this._inputG).attr("labelledBy", labelledByIds + " vse-color-picker-green-label");
            $(this._inputB).attr("labelledBy", labelledByIds + " vse-color-picker-blue-label");
            $(this._inputH).attr("labelledBy", labelledByIds + " vse-color-picker-hue-label");
            $(this._inputS).attr("labelledBy", labelledByIds + " vse-color-picker-saturation-label");
            $(this._inputL).attr("labelledBy", labelledByIds + " vse-color-picker-luminance-label");
            $(this._inputHex).attr("labelledBy", labelledByIds + " vse-color-picker-hex-label");
            $(this._inputOpacity).attr("labelledBy", labelledByIds + " vse-color-picker-opacity-label");
            $(this._lumSlider).attr("labelledBy", labelledByIds + " vse-color-picker-luminance-label");
        },
        
		/**
		 * Updated the pointer function
		 */
		updatePointer: function () {
			//Determine the angle given the hue
			var angle = this.hue * (2 * Math.PI) / 360;

			//Offset is due to the preview which is set to a fixed 40% of the circle
			var offset = (this.size / 2) * 40 / 100;
			var gradientSize = (this.size / 2) - offset;

			//This is the adjusted saturation value relative to the size of the where
			var sat = (this.saturation * gradientSize) / 100;

			var left = Math.cos(angle) * (offset + sat) + this.size / 2;
			var top = Math.sin(angle) * (offset + sat) + this.size / 2;

			$(this._pointer).css('left', left);
			$(this._pointer).css('top', top);
		},

		/**
		 * Update the background color of the preview div
		 */
		updatePreview: function () {
			$(this._preview).css('background', this.getCurrentcolor('rgb'));
		},

		/**
		 * Updates the value of the slider
		 */
		updateSlider: function () {
			this._lumSlider.set('value', this.luminance);
			this.drawToContext();
		},

		/**
		 * Update the RGB inputs
		 */
		updateRgbInputs: function () {
			$(this._inputR).val(this.red);
			$(this._inputG).val(this.green);
			$(this._inputB).val(this.blue);
		},

		/**
		 * Update the HSL inputs
		 */
		updateHslInputs: function () {
			$(this._inputH).val(this.hue);
			$(this._inputS).val(this.saturation);
			$(this._inputL).val(this.luminance);
		},

		/**
		 * Update the hex input
		 */
		updateHexInput: function () {
			$(this._inputHex).val(this.hex);
		},

		updateOpacityInput: function () {
			$(this._inputOpacity).val(this.opacity);
		},

		/**
		 * Update the RGB model
		 */
		updateRGBModel: function (r, g, b) {
			this.red = r;
			this.green = g;
			this.blue = b;
		},

		/**
		 * Update the hsl model
		 */
		updateHSLModel: function (hsl) {
			//var hsl = this._rgbTohsl(color[0], color[1], color[2]);
			this.hue = Math.ceil(parseFloat(hsl[0].toFixed(2)));
			this.saturation = Math.ceil(parseFloat((hsl[1] * 100).toFixed(2)));
			this.luminance = Math.ceil(parseFloat((hsl[2] * 100).toFixed(2)));
		},

		/**
		 * Update the hex model
		 */
		updateHexModel: function (hex) {
			//this.hex = this._rgbToHex(this.red, this.green, this.blue);
			this.hex = hex;
		},

		/**
		 * Update the opacity model
		 */
		updateOpacityModel: function (opacity) {
			//this.hex = this._rgbToHex(this.red, this.green, this.blue);
			this.opacity = opacity;
		},

		/**
		 * Returns the current color in a given output format
		 */
		getCurrentcolor : function (format) {
			if(format == 'rgb') {
				return "rgba(" + this.red + "," + this.green + "," + this.blue + "," + this.opacity + ")";
			} else if (format == 'hsl') {
				return "hsla(" + this.hue + "," + this.saturation + "," + this.luminance + "," + this.opacity + ")";
			} else if (format == 'hex') {
				return this.hex;
			} else {
				throw new Error('Invalid color format : ' + format);
			}
		},

		/**************************************************************************************/
		/********************************* Utility Functions *********************************/
		/**************************************************************************************/

		/**
		 * Finds the point on the circle closest to a given mouse position
		 * Formula :
		 */
		_closestCirclePoint: function (e, obj) {
			var containerPos = this._canvas.offset();

			//Center of the circle
			var xc = this.size / 2 + containerPos.left,
				yc = this.size / 2 + containerPos.top;

			//Point of the mouse
			var xp = e.pageX,
				yp = e.pageY;

			//Difference of te mouse points and the center
			var dx = xp - xc,
				dy = yp - yc;

			//We subtract from the radius because if
			var radius = (obj.offsetWidth / 2) - .3;

			//Gets the closest point on the circle
			//Formula is basically: C⃗ = A⃗ +r ((B⃗ −A⃗ )/(||B⃗ − A⃗ ||))
			var px = xc + radius * (dx / (Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2)))),
				py = yc + radius * (dy / (Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2))));

			return {
				x: px,
				y: py
			};
		},

		/**
		 * Distance of the mouse from the center of the circle
		 */
		_mouseDistance: function (e) {
			var containerPos = this._canvas.offset();
			var xc = this.size / 2 + containerPos.left,
				yc = this.size / 2 + containerPos.top;

			var xp = e.pageX,
				yp = e.pageY;

			return Math.pow((xp - xc), 2) + Math.pow((yp - yc), 2);
		},

		/**
		 * Checks if the mouse is inside a given circle
		 */
		_isInside: function (e, obj) {
			var radius = obj.offsetWidth / 2;
			var d = this._mouseDistance(e);
			return d < Math.pow(radius, 2);
		},

		/**
		 * Returns the rgb value given a point on the canvas
		 */
		_getColor: function (pageX, pageY) {
			//TODO: Clean up
			var pos = this._canvas.offset()
			var x = pageX - pos.left;
			var y = pageY - pos.top;
			//var coord = "x=" + x + ", y=" + y;
			var p = this._context.getImageData(x, y, 1, 1).data;
			//console.log(p);
			return p;
		},

		//not really sure if i need this yet... maybe.
		_dispatchChangeEvt: function () {
			var e = {
				red: this.red,
				green: this.green,
				blue: this.blue,
				hex: this.hex
			};
			this.$element.trigger('colorchanged', e);
		},

		/**
		 * Converts RGB to HSL color space
		 */
		_rgbTohsl: function (rChannel, gChannel, bChannel) {
			if (rChannel > 255 || gChannel > 255 || bChannel > 255) {
				throw new Error('Invalid RGB values');
			}
			var r = rChannel / 255;
			var g = gChannel / 255;
			var b = bChannel / 255;

			var max = Math.max(Math.max(r, g), b);
			var min = Math.min(Math.min(r, g), b);

			var delta = max - min;

			var h = 0,
				s = 0,
				l = (max + min) / 2;

			if (delta == 0) {
				h = s = 0;
			} else {
				s = l > 0.5 ? delta / (2 - max - min) : delta / (max + min);
				//TODO - could just use a case statement to clean this up
				switch (max) {
					case r :
						h = 60 * (((g - b) / delta) + (g < b ? 6 : 0));
						break;
					case g :
						h = 60 * ((b - r) / delta + 2);
						break;
					case b :
						h = 60 * ((r - g) / delta + 4);
						break;
				}
			}

			return [h, s, l];
		},

		/**
		 * Converts RGB to Hex
		 */
		_rgbToHex: function (rChannel, gChannel, bChannel) {
			if (rChannel > 255 || gChannel > 255 || bChannel > 255) {
				throw new Error('Invalid RGB values');
			}
			return "#" + ((1 << 24) + (rChannel << 16) + (gChannel << 8) + bChannel).toString(16).slice(1);

		},

		/**
		 * Converts HSL to RGB color space
		 */
		_hslToRgb: function (hue, saturation, luminance) {
			var h = hue,
				s = saturation / 100,
				l = luminance / 100;

			var chroma = (1 - Math.abs(2 * l - 1)) * s;

			var hh = h / 60;

			var x = chroma * (1 - Math.abs(hh % 2 - 1));

			var lightness = l - chroma / 2;

			var rr, gg, bb;
			if (hh < 1) {
				rr = chroma;
				gg = x;
				bb = 0;
			} else if (hh < 2) {
				rr = x;
				gg = chroma;
				bb = 0;
			} else if (hh < 3) {
				rr = 0;
				gg = chroma;
				bb = x;
			} else if (hh < 4) {
				rr = 0;
				gg = x;
				bb = chroma;
			} else if (hh < 5) {
				rr = x;
				gg = 0;
				bb = chroma;
			} else {
				rr = chroma;
				gg = 0;
				bb = x;
			}

			var r = Math.round((rr + lightness) * 255),
				g = Math.round((gg + lightness) * 255),
				b = Math.round((bb + lightness) * 255)

			return [r, g, b];
		},

		/**
		 * Converts hex to RGB color space
		 */
		_hexToRgb: function (hexCode) {

			//short hand regex ie. #333
			var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
			//If it is in shorthand form, change it to normal form
			if (shorthandRegex.test(hexCode)) {
				hexCode = hexCode.replace(shorthandRegex, function (m, r, g, b) {
					return r + r + g + g + b + b;
				});
			}
			//Normal regex, splits it into an array that we can parse into hex
			var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hexCode);
			if (!result) throw new Error('Invalid Hex value');
			return [parseInt(result[1], 16), parseInt(result[2], 16), parseInt(result[3], 16)];
		},


		/**************************************************************************************/
		/********************************* Drag Mechanics *************************************/
		/**************************************************************************************/

		_startX: 0,
		_startY: 0,
		_currX: 0,
		_currY: 0,

		_onMouseDown: function (e) {
			e.preventDefault();
			if (e.button == 2) return;
			if (!this._isInside(e, $(this._canvas)[0])) return;

			//should reajust the pointer to center with the mouse cursie
			var pos = this._container.offset();
			$(this._pointer).css({
				left: e.pageX - pos.left - $(this._pointer).outerWidth() / 2,
				top: e.pageY - pos.top - $(this._pointer).outerHeight() / 2
			});

			//Get starting values
			this._startX = e.pageX - $(this._pointer).offset().left;
			this._startY = e.pageY - $(this._pointer).offset().top;

			var color = this._getColor(e.pageX, e.pageY);
			this.updateRGBModel(color[0], color[1], color[2]);
			this.updateHSLModel(this._rgbTohsl(color[0], color[1], color[2]));
			this.updateHexModel(this._rgbToHex(color[0], color[1], color[2]));
			this.updateHexInput();
			this.updateRgbInputs();
			this.updateHslInputs();
			this.updatePreview();

			this._dispatchChangeEvt();

			// Store references to binded handlers so that we can precisely remove them later
			this.binded_onMouseMove = this._onMouseMove.bind(this);
			this.binded_onMouseUp = this._onMouseUp.bind(this);

			//register mouse move/up events
			$(document).on('mousemove', this.binded_onMouseMove);
			$(document).on('mouseup', this.binded_onMouseUp);
		},

		_onMouseMove: function (e) {
			e.preventDefault();
			if (e.button == 2) this._onMouseUp(e);

			var pos = this._container.offset();

			var color;
			//determine if the pointer is within the bounds of the wheel and the center of the wheel
			var isInsideWheel = this._isInside(e, $(this._canvas)[0]),
				isOutsidePrev = this._isInside(e, $(this._preview)[0]);

			//Case where there the pointer is inside the wheel
			if (isInsideWheel && !isOutsidePrev) {
				this._currX = e.pageX - pos.left;
				this._currY = e.pageY - pos.top;

				$(this._pointer).css({
					left: (this._currX - this._startX) + 'px',
					top: (this._currY - this._startY) + 'px'
				});
				//get the color where the mouse is pointing
				color = this._getColor(e.pageX, e.pageY);

			} else {

				var point;
				//Check where the boundary violation happened and set the pointer accordingly
				if (!isInsideWheel) {
					point = this._closestCirclePoint(e, $(this._canvas)[0]);
				} else {
					point = this._closestCirclePoint(e, $(this._preview)[0]);
				}

				this._currX = point.x - pos.left;
				this._currY = point.y - pos.top;

				$(this._pointer).css({
					left: this._currX - $(this._pointer).outerWidth() / 2 + 'px',
					top: this._currY - $(this._pointer).outerHeight() / 2 + 'px'
				});
				color = this._getColor(point.x, point.y);
			}

			//update everything
			this.updateRGBModel(color[0], color[1], color[2]);
			this.updateHSLModel(this._rgbTohsl(color[0], color[1], color[2]));
			this.updateHexModel(this._rgbToHex(color[0], color[1], color[2]));
			this.updateHexInput();
			this.updateRgbInputs();
			this.updateHslInputs();
			this.updatePreview();

			this._dispatchChangeEvt();

		},

		_onMouseUp: function (e) {
			e.preventDefault();
			//Detach the events that we put on the document
			$(document).off('mousemove', this.binded_onMouseMove);
			$(document).off('mouseup', this.binded_onMouseUp);
		}

	});

}(this.s7ve, this.$, this.Coral));