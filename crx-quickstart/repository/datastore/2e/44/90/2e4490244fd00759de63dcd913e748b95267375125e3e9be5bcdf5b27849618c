/**
 * ADOBE CONFIDENTIAL
 *
 * Copyright 2012 Adobe Systems Incorporated
 * All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
 *
 */

/**
 * @class CQ.html5.form.FileUploadField
 * @extends CQ.Ext.form.TextField
 * The HTML5 FileUploadField lets the user select multiple files to be uploaded through HTML5.
 * @since 5.5, replaces {@link CQ.form.FileUploadField}
 * @constructor
 * Creates a new HTML5 FileUploadField.
 * @param {Object} config The config object
 */
CQ.html5.form.FileUploadField = CQ.Ext.extend(CQ.Ext.form.TextField, {

    /**
     * @cfg {Boolean} allowEnctypeSetting
     * In order to submit binaries a form must be posted with enctype "multipart/form-data".
     * If true the field sets the enctype of its parent form properly (defaults to true).
     */
    allowEnctypeSetting: true,

    /**
     * @hide
     * @method autoSize
     */
    autoSize: CQ.Ext.emptyFn,

    /**
     * @cfg {Number} buttonOffset The number of pixels of space reserved between the button and the text field
     * (defaults to 3).  Note that this only applies if {@link #buttonOnly} = false.
     */
    buttonOffset: 3,

    /**
     * @cfg {Boolean} buttonOnly True to display the file upload field as a button with no visible
     * text field (defaults to false).  If true, all inherited TextField members will still be available.
     */
    buttonOnly: false,

    /**
     * @cfg {String} buttonText The button text to display on the upload button (defaults to
     * "Browse...").  Note that if you supply a value for {@link #buttonCfg}, the buttonCfg.text
     * value will be used instead if available.
     */
    buttonText: null,

    /**
     * TODO: document
     */
    fileInputStyle: null,

    /**
     * TODO: document
     */
    file: null,

    /**
     * TODO: document
     */
    html5Upload: true,

    /**
     * @cfg {String} mimeTypes
     * MIME types allowed for uploading (each separated by a semicolon; wildcard * is
     * allowed; for example: "*.*" or "*.jpg;*.gif;*.png"
     * Also support MIME type syntax; for example (image/jpg or image/*)
     */
    mimeTypes: [],

    /**
     * @cfg {String} mimeTypesDescription
     * A String that describes the allowed MIME types
     */
    mimeTypesDescription: null,

    /**
     * TODO: document
     */
    multiple: true,

    /**
     * TODO: document
     */
    noDisplay: false,

    /**
     * TODO: document
     */
    targetEl: null,

    // private
    constructor: function(config) {
        var uploadField = this;

        if (config.mimeTypes) {
            if (!CQ.Ext.isArray(config.mimeTypes)) {
                var reg = new RegExp("[ ;]+", "g");
                config.mimeTypes = config.mimeTypes.split(reg);
            }
        }

        // Default configuration
        CQ.Util.applyDefaults(config, {
            hideLabel: true,
            name: config.name,
            fileNameParameter: ":assetname",
            allowFileNameEditing: true,
            vtype: "name",
            invalidText: CQ.Ext.form.VTypes["nameText"],
            removable: true,
            listeners: {
                change: function(uploadField, newValue, oldValue) {
                    uploadField.fireEvent("filenamechanged", uploadField, newValue, oldValue);
                }
            }
        });

        if (!CQ.html5.Util.isUploadSupported()) {
            // Disable if browser which do not support HTML5
            config.html5Upload = false;
        }

        CQ.html5.form.FileUploadField.superclass.constructor.call(this, config);
    },

    // private
    initComponent: function() {
        CQ.html5.form.FileUploadField.superclass.initComponent.call(this);

        this.addEvents(
            "filenamechanged",
            "fileremoved",
            "fileselected"
        );

        if (this.targetEl) {
            this.targetEl.relayEvents(this, ["filenamechanged", "fileremoved", "fileselected"]);
        }
    },

    setName: function(name) {
        if (name) {
            this.fileInput.dom.setAttribute('name', name);
            this.name = name;
        }
    },

    // private
    onRender: function(ct, position) {
        CQ.html5.form.FileUploadField.superclass.onRender.call(this, ct, position);

        this.wrap = this.el.wrap({
            cls: "x-form-field-wrap x-form-file-wrap cq-fileupload-wrapper"
        });
        this.el.addClass("x-form-file-text");

        if (this.fileNameParameter) {
            this.el.dom.setAttribute("name", this.fileNameParameter);
        } else {
            // removeAttribute seems not to work in IE - therefore set name = ""
            this.el.dom.setAttribute("name", "");
        }

        // Input file field
        var fileInputName = this.name || this.getId();
        var childCfg = {
            id: this.getFileInputId(),
            name: fileInputName,
            cls: "x-form-file",
            tag: "input",
            type: "file",
            size: 1
        };

        if (this.html5Upload && this.multiple) {
            childCfg["multiple"] = true;
        }

        this.fileInput = this.wrap.createChild(childCfg);

        if (!this.html5Upload) {
            var typeHintCfg = {
                name: fileInputName + "@TypeHint",
                tag: "input",
                type: "hidden",
                value: "nt:file"
            };
            this.wrap.createChild(typeHintCfg);
        }

        if (!this.buttonText) {
            this.buttonText = CQ.I18n.getMessage("Browse...");
        }
        var btnCfg = CQ.Ext.applyIf(this.buttonCfg || {}, {
            text: this.buttonText
        });

        this.button = new CQ.Ext.Button(CQ.Ext.apply(btnCfg, {
            renderTo: this.wrap,
            cls: "x-form-file-btn" + (btnCfg.iconCls ? " x-btn-icon" : "")
        }));

        if (this.buttonOnly) {
            this.el.hide();
            this.wrap.setWidth(this.button.getEl().getWidth());
            this.fileInput.addClass("x-form-file-button-only");
            this.button.addClass("x-form-file-button-only");
        }

        this.fileInput.setWidth((this.button.getEl().getComputedWidth() || 55));

        if (this.fileInputStyle) {
            for (var attr in this.fileInputStyle) {
                try {
                    this.fileInput.setStyle(attr, this.fileInputStyle[attr]);
                } catch(e) {
                    // Ignored
                }
            }
        }

        if (this.file) {
            this.setValue(this.getFileName());
            this.switchToClearButton();
        } else {
            this.fileInput.on("change", function() {
                if (this.html5Upload) {
                    var files = this.fileInput.dom.files;

                    // Check if upload is allowed
                    this.uploadAllowed = this.checkHTML5UploadAllowed(files);
                    if (!this.uploadAllowed) {
                        return false;
                    }

                    // HTML5 supports multiple file upload
                    this.fireEvent("fileselected", this, files);
                } else {
                    var file = this.fileInput.dom.value;

                    // IE: update value to only show the file name instead of the path
                    if (file.lastIndexOf("\\") != -1) {
                        file = file.substring(file.lastIndexOf("\\") + 1);
                    }
                    this.setValue(file);

                    // Switch to clear button
                    this.switchToClearButton();

                    if (this.allowEnctypeSetting) {
                        try {
                            var form = this.findParentByType("form").getForm().el.dom;
                            form.enctype = "multipart/form-data";
                            form.encoding = "multipart/form-data";
                        } catch (e) {
                        }
                    }

                    // Single selection for browsers which do not support HTML5
                    this.fireEvent("fileselected", this, file);
                }
            }, this);
            if (CQ.Ext.isIE || navigator.userAgent.match(/Trident\/7.0/)) {
                var dragdom = this.fileInput.dom;
                window.fileinputfield = this;
                if(typeof dragdom.addEventListener === "function")
                {
                    dragdom.addEventListener("drop", function(evt) {
                        var fileinputfield = window.fileinputfield;
                        if (fileinputfield.html5Upload) {
                            var files = evt.dataTransfer.files;

                            // Check if upload is allowed
                            fileinputfield.uploadAllowed = fileinputfield.checkHTML5UploadAllowed(files);
                            if (!fileinputfield.uploadAllowed) {
                                return false;
                            }

                            // HTML5 supports multiple file upload
                            fileinputfield.fireEvent("fileselected", fileinputfield, files);
                        } else {
                            var file = fileinputfield.fileInput.dom.value;

                            // IE: update value to only show the file name instead of the path
                            if (file.lastIndexOf("\\") != -1) {
                                file = file.substring(file.lastIndexOf("\\") + 1);
                            }
                            fileinputfield.setValue(file);

                            // Switch to clear button
                            fileinputfield.switchToClearButton();

                            if (fileinputfield.allowEnctypeSetting) {
                                try {
                                    var form = fileinputfield.findParentByType("form").getForm().el.dom;
                                    form.enctype = "multipart/form-data";
                                    form.encoding = "multipart/form-data";
                                } catch (e) {}
                            }

                            // Single selection for browsers which do not support HTML5
                            fileinputfield.fireEvent("fileselected", this, file);
                        }
                    }, this);

                    dragdom.addEventListener("dragenter", function(evt) {
                        evt.preventDefault();
                        evt.stopPropagation();
                        if (self.currentTarget) {
                            return self.currentTarget.notifyHTML5DragEnter(evt);
                        }
                    }, false);

                    dragdom.addEventListener("dragover", function(evt) {
                        evt.preventDefault();
                        evt.stopPropagation();
                        if (self.currentTarget) {
                            return self.currentTarget.notifyHTML5DragEnter(evt);
                        }
                    }, false);
                }
            }
        }
        if (this.noDisplay) {
            this.setVisible(false);
            this.button.setVisible(false);
        }
    },

    checkHTML5UploadAllowed: function(files) {
        var errors = [];
        for (var i = 0; i < files.length; i++) {
            // Check file type or file name
            var file = files[i];
            var j;
            for (j = 0; j < this.mimeTypes.length; j++) {
                var pattern = this.mimeTypes[j];
                if (this.checkMimeTypeAllowed(file.type, pattern) || this.checkFileExtensionAllowed(file.name, pattern)) {
                    break;
                }
            }
            if (j > 0 && j == this.mimeTypes.length) {
                errors.push(file.name);
            }
        }
        return this.displayErrors(errors);
    },

    displayErrors: function(errors) {
        if (errors.length == 0) {
            return true;
        }

        var msg = errors.length == 1 ?
                CQ.I18n.getMessage("Selected file is not accepted:") :
                CQ.I18n.getMessage("Selected files are not accepted:");
        msg += "<br/><br/>";
        for (var i = 0; i < errors.length; i++) {
            msg += CQ.shared.XSS.getXSSValue(errors[i]) + "<br/>";
        }
        if (this.mimeTypesDescription) {
            msg += "<br/>" + CQ.I18n.getMessage("Expecting: {0}", this.mimeTypesDescription);
        }
        CQ.Ext.Msg.alert(CQ.I18n.getMessage("Error"), msg);
        return false;
    },

    checkMimeTypeAllowed: function(mimeType, pattern) {
        var reg = /(.+)\/(.+)/;
        var pMatch = pattern.match(reg);
        if (pMatch) {
            // Split provided mimeType
            var mtMatch = mimeType.match(reg);
            // Check first part of provided mime type
            if (mtMatch[1].toLowerCase() === pMatch[1].toLowerCase()) {
                // Check if second part also matches
                if (pMatch[2] === "*") {
                    return true;
                }
                return mtMatch[2].toLowerCase() === pMatch[2].toLowerCase();
            }
        }
        return false;
    },

    checkFileExtensionAllowed: function(fileName, pattern) {
        var reg = /(.+)\.(.+)$/;
        var pMatch = pattern.match(reg);
        if (pMatch) {
            // Split provided file name to extract extension
            var feMatch = fileName.match(reg);
            // Check file name
            if (pMatch[1] === "*" || feMatch[1].toLowerCase() === pMatch[1].toLowerCase()) {
                // Check extension
                if (pMatch[2] === "*") {
                    return true;
                }
                return feMatch[2].toLowerCase() === pMatch[2].toLowerCase();
            }
        }
        return false;
    },

    switchToClearButton: function() {
        if (this.removable) {
            this.button.setText(CQ.I18n.getMessage("Clear"));
            this.button.on("click", this.clearFile, this);
            this.fileInput.applyStyles("z-index: -100");
        }
    },

    clearFile: function() {
        var panel = this.ownerCt;
        this.fireEvent("fileremoved", this.getValue());

        // Remove the entire field from the container and cancel upload
        panel.remove(this, true);
        panel.ownerCt.doLayout();

    },

    destroy: function() {
        // Clean destroy
        var parent = this.getEl().dom.parentNode;
        this.fileInput.remove();
        this.button.destroy();
        CQ.html5.form.FileUploadField.superclass.destroy.call(this);
        parent.parentNode.removeChild(parent);
    },

    // private
    getFileInputId: function() {
        return this.id + '-file';
    },

    initProgressBar: function() {
        this.progressBar = new CQ.Ext.ProgressBar({
            text: "&nbsp;"
        });
        this.progressText = new CQ.Static({
            cls: "cq-fileuploadfield-progress-text"
        });
        new CQ.Ext.Panel({
            renderTo: this.wrap.insertSibling({
                tag: "div",
                cls: "cq-fileupload-progress-wrapper"
            }),
            border: false,
            bodyStyle: "width: " + this.wrap.getWidth(true) + "px;",
            anchorTo: this.wrap,
            items: [
                this.progressBar,
                this.progressText
            ]
        });
        new CQ.Ext.Button({
            renderTo: this.progressBar.wrap,
            text: CQ.I18n.getMessage("Cancel")
        });
        this.wrap.remove();
    },

    // private
    getFileName: function() {
        if (this.file) {
            return this.file.name ? this.file.name : this.file;
        }
        return null;
    },

    // private
    handleUploadProgress: function(file, completed, total) {
        if (!this.progressBar) {
            this.initProgressBar();
        }
        var percent = Math.round(100 * completed / total);
        var message = CQ.I18n.getMessage("{0} of {1}", [CQ.Util.formatFileSize(completed), CQ.Util.formatFileSize(total)], "file upload progress");
        this.progressBar.updateProgress(percent / 100, CQ.shared.XSS.getXSSValue(file.name).replace("\\\\\\\\", "\\"));
        this.progressText.updateText(message);
    },

    // private
    handleUploadComplete: function() {
        if (!this.progressBar) {
            this.initProgressBar();
        }
        this.progressBar.updateProgress(1);
        this.progressText.updateText(CQ.I18n.getMessage("Complete", null, "adjective"));
    },

    // private
    onResize : function(w, h) {
        CQ.html5.form.FileUploadField.superclass.onResize.call(this, w, h);

        this.wrap.setWidth(w);

        if (!this.buttonOnly) {
            var w = this.wrap.getWidth() - this.button.getEl().getWidth() - this.buttonOffset;
            this.el.setWidth(w);
        }
    },

    // private
    preFocus : CQ.Ext.emptyFn,

    // private
    getResizeEl : function() {
        return this.wrap;
    },

    // private
    getPositionEl : function() {
        return this.wrap;
    },

    // private
    alignErrorIcon : function() {
        this.errorIcon.alignTo(this.wrap, 'tl-tr', [2, 0]);
    },

    setDisabled: function(disabled) {
        CQ.html5.form.FileUploadField.superclass.setDisabled.call(this, disabled);
//        this.fileInput.setDisabled(disabled);
        this.button.setDisabled(disabled);
    }

});

CQ.Ext.reg('html5fileuploadfield', CQ.html5.form.FileUploadField);
