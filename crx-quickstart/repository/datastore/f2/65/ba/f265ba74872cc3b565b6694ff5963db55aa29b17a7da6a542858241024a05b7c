/*!************************************************************************
 *
 * ADOBE CONFIDENTIAL
 * ___________________
 *
 *  Copyright 2015 Adobe Systems Incorporated
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
 **************************************************************************/

(function (ModifierInfo, Granite) {
	"use strict";

	/**
	 * Generated JSON from SDK documentation
	 */
	ModifierInfo.modifiers = {
		"ZoomViewer": {
			swatchoverlay: {
				"syntax": "0|1",
				"description": Granite.I18n.get("Controls whether swatches overlay the main view on touch-enabled devices. When set to <code>1</code>, swatches will show on top of main view, and the user will have an ability to show/hide them with single tap. When set to <code>0</code>, swatches will render below the main view, exactly as it is on desktop systems; the user will not be able to show or hide them with single tap."),
				"default": "1"
			},
			indicatormode: {
				"syntax": "",
				"description": Granite.I18n.get("Controls whether dot indicator renders number of items in the ser or number of scrollable pages. When set to 'pages', the viewer will render as many dot as number of scrollable pages. Otherwise, if set to 'items', it will render as many dots as number of elements in the set."),
				"default": "page"
			}
		},		
		"MixedMedia": {
			zoommode: {
				"syntax": "",
				"description": Granite.I18n.get("Specifies which zoom mode to use with the mixed media viewer. Setting <code>auto</code> will allow the viewer to choose between <code>inline</code> or <code>continuous</code> depending on the whether the runtime environment is desktop or mobile."),
				"default": "continuous"
			},
			indicatormode: {
				"syntax": "",
				"description": Granite.I18n.get("Controls whether dot indicator renders number of items in the ser or number of scrollable pages. When set to 'pages', the viewer will render as many dot as number of scrollable pages. Otherwise, if set to 'items', it will render as many dots as number of elements in the set."),
				"default": "page"
			},			
			swatchoverlay: {
				"syntax": "0|1",
				"description": Granite.I18n.get("Controls whether swatches overlay the main view on touch-enabled devices. When set to <code>1</code>, swatches will show on top of main view, and the user will have an ability to show/hide them with single tap. When set to <code>0</code>, swatches will render below the main view, exactly as it is on desktop systems; the user will not be able to show or hide them with single tap."),
				"default": "1"
			}
		},
		"s7sdk.common.Container": {
			stagesize: {
				"syntax": "width,height",
				"description": Granite.I18n.get("Size of the <code>Container</code> component. When this modifier is specified the component operates in standard mode. This mode means that it does not handle its resizing in response to a change in window size. If this modifier is not used and the width and height are not specified in the CSS, it is assumed that the component is in pop-up mode. In such case, it resizes itself to fit the screen."),
				"default": ""
			},
			aspect: {
				"syntax": "ratio",
				"description": Granite.I18n.get("Configures the aspect ratio of the component. <i>ratio</i> is defined as the width-to-height relation. If  <i>ratio</i> is greater than <code>0</code>, the component uses the specified ratio by calculating the explicit height value based on effective runtime width. If <i>ratio</i> is <code>0</code> or not set, the component does not fix its ratio. Instead, it uses the size set by the web page layout and CSS."),
				"default": "0"
			}
		},
		"s7sdk.common.ControlBar": {
			transition: {
				"syntax": "none|fade[,delaytohide[, duration]",
				"description": Granite.I18n.get("Specifies the effect type that is used to show or hide the <code>ControlBar</code> and its content. Set <code>none</code> for instant show or hide. Set <code>fade</code> to provide a gradual fade in and fade out effect. Not supported on Internet Explorer 7 and 8. Set <i>delaytohide</i> to specify the time in seconds between the last mouse or touch event as registered by the component and the time control bar hides. If this argument is set to -1 the component never triggers its auto-hide effect and it is always visible on the screen. Set <i>duration</i> to set the number of seconds duration of the fade in and fade out animation."),
				"default": "fade,2,0.5"
			}
		},
		"s7sdk.common.Download": {
			contenturl: {
				"syntax": "contentRootPath",
				"description": Granite.I18n.get("The content root path. If no domain is specified, the domain from which the page is served is applied instead. Standard URI path resolution applies."),
				"default": "/is/content/"
			}
		},
		"s7sdk.image.FlyoutZoomView": {
			serverurl: {
				"syntax": "isRootPath",
				"description": Granite.I18n.get("The Image Serving root path. If no domain is specified, the domain from which the page is served is applied instead. Standard URI path resolution applies."),
				"default": "/is/image/"
			},
			asset: {
				"syntax": "image",
				"description": Granite.I18n.get("The Image Serving catalog/image ID of the image to display."),
				"default": ""
			},
			iscommand: {
				"syntax": "value",
				"description": Granite.I18n.get("The Image Serving command string that is applied to the image when requesting image data. If specified in the URL, all occurrences of &apos;&amp;&apos; and &apos;=&apos; must be HTTP-encoded as <code>%26</code> and <code>%3D</code>, respectively."),
				"default": ""
			},
			zoomfactor: {
				"syntax": "[primaryFactor][,[secondaryFactor][,upscale]]",
				"description": Granite.I18n.get("Specifies the image magnification for the flyout view, relative to the main view. The value must be an integer or floating point value 1.0 or larger. You can specify an optional secondary factor that is accessible by clicking the main view when the highlight is active. Clicking a second time reverts to the primary zoom factor. A value of -1 disables the secondary zoom factor. Use <i>upscale</i> to control how the component works with images smaller than the main view, or the flyout window, or both. When <i>upscale</i> is set to <code>1</code> the component upscales the main image so that it fits into the main view. It also upscales the zoom image so that it completely fills the configured flyout window area. If <i>upscale</i> is set to <code>0</code> small images display at their original resolution. They are also centered in the main view area and inside the flyout window. You can configure the extra white space that appears around the image. Use <code>background</code> or a similar CSS property of the <code>s7flyoutzoomview</code> and <code>s7flyoutzoom</code> CSS classes in the main view and flyout window, respectively."),
				"default": "3,-1,1"
			},
			frametransition: {
				"syntax": "none|fade[,duration]",
				"description": Granite.I18n.get("Specifies the type and duration of the effect applied to the main view on asset change. Set <code>none</code> for no transition. That is, the main view change occurs instantly. Use <code>fade</code> to activate a cross-fade transition where the old image fades out and the new image fades in. Fade animation duration is controlled  by <i>duration</i> as set in seconds. The default is 0.3 seconds."),
				"default": "none,0.3"
			},
			flyouttransition: {
				"syntax": "[none|slide|fade][,showtime[,showdelay[,hidetime[,hidedelay]]]]",
				"description": Granite.I18n.get("Specifies the type of effect that is applied when the flyout view is displayed or hidden. Set <code>showtime</code> to specify the number of seconds that the show animation takes to complete. Set <code>showdelay</code> to specify the delay in seconds between user action which initiates the show animation and the beginning of the show animation itself. Set <code>hidetime</code> to specify the number of seconds that the hide animation takes to complete. Set <code>hidedelay</code> to specify the delay in seconds between user action which initiates the hide animation and the beginning of hide animation itself."),
				"default": "fade,1,0,1,0"
			},
			transition: {
				"syntax": "[none|slide|fade][,duration]",
				"description": Granite.I18n.get("Specifies the type of effect that is applied when the flyout view is shown or hidden. Use <code>duration</code> to specify the number of seconds that the animation takes to complete. (<b><i>Deprecated</i></b>: now use <code>flyouttransition</code> to specify the transition parameters)."),
				"default": "fade, 1"
			},
			preloadtiles: {
				"syntax": "0|1[,0|1]",
				"description": Granite.I18n.get("Set the first option to <code>1</code> to enable preloading of the zoomed image. Or, set to <code>0</code> to load the zoom image incrementally, as needed.  The second option controls whether to reload the zoomed image during component resize, when a new width breakpoint is achieved as set in the <code>imagereload</code> modifier. <i><b>Caution</b></i> If you enable this option, it results in substantially higher bandwidth usage because the zoomed image is loaded in its entirety, even if no zoom action is taken by the user."),
				"default": "0"
			},
			imagereload: {
				"syntax": "0|1[,breakpoint,width[;width]]",
				"description": Granite.I18n.get("Configures how the component fetches new images for the main and flyout view during resize. When set to <code>0</code>, the component does not load new images during resize, and image resolution in the flyout view does not change. Setting to <code>1,breakpoint,<i>width</i>[;<i>width</i>]</code> lets you specify one or more width breakpoints for the image loaded into the main view. The component always uses the best fit size for the initial load. After resize, it ensures that the image in the main view is always downloaded using the width equal to the closest bigger breakpoint, and downscaled on the client."),
				"default": "0"
			},
			tip: {
				"syntax": "duration[,count][,fade]",
				"description": Granite.I18n.get("Specifies the display behavior for the tip text. Use <code>duration</code> to specify the number of seconds that the text is displayed before it hides. When <code>duration</code> is set to -1, the message always displays, even if the user activates the flyout. Use <i>count</i> to specify the number of times the text is displayed when new images are viewed in the set. A value of -1 means that the text always displays when viewing any image in the set. Use <i>fade</i> to specify the duration of a fade animation that occurs when the text appears or disappears. A value of 0 indicates no fade transition."),
				"default": "3,1,0.3"
			},
			overlay: {
				"syntax": "0|1",
				"description": Granite.I18n.get("Controls the main view highlight appearance when the flyout is active. When set to <code>0</code>, the area currently visible in the flyout window is highlighted using styles provided by either <code>.s7highlight</code> or <code>.s7cursor</code> CSS class names, depending on the value of <code>highlightmode</code> modifier.  When set to <code>1</code>, the component enters &quot;inverse&quot; mode. That is, the currently viewed area is either fully transparent (<code>highlightmode</code> is set to <code>highlight</code>) or styled with <code>.s7cursor</code> CSS class name (<code>highlightmode</code> is set to  <code>cursor</code>), but the surrounding area is filled using styles provided by <code>.s7overlay</code> CSS class name."),
				"default": "0"
			},
			fmt: {
				"syntax": "jpg|jpeg|png|png-alpha|gif|gif-alpha",
				"description": Granite.I18n.get("Specifies the image format used by the component for loading images from Image Server. It is any value supported by Image Server and the client browser. If the image_format ends with &quot;-alpha&quot;, the component renders images as transparent. For all other image format values the component treats images as opaque. You cannot use transparent images with <code>fade</code> type of <code>flyouttransition</code> in Internet Explorer 7 and 8 due to web browser limitations. In this case, the component does not play fade animation. Instead, it preserves the rest of the timing settings provided with <code>flyouttransition</code>."),
				"default": "jpeg"
			},
			highlightmode: {
				"syntax": "highlight|cursor[,showtime[,onimage|free]]",
				"description": Granite.I18n.get("Specifies the type of navigation frame to use. When set to <code>cursor</code>, the component uses a fixed-size reference cursor. It is possible to have different cursor art for desktop systems and touch devices using <code>.s7cursor</code> CSS class and <code>input=mouse|touch</code> attribute selector. On desktop systems, an anchor point is set in the middle of the cursor area. On touch devices, an anchor is located in the bottom center of the cursor. When set to <code>highlight</code>, the component uses a variable-size navigation frame. The size and shape of the frame depends on the zoom factor and the size of the flyout view. Use <i>showtime</i> to set the time in seconds that it takes highlight or cursor to fade in after activated by the user. Fade in is applied only on touch devices. On desktop systems it is ignored by the component. Fade in applies to the following user interface elements: highlight frame, fixed cursor, overlay (in case <code>overlay</code>  modifier is set to <code>1</code>). Flyout view animation begins only after a highlight or cursor fade in animation completes. There is no fade out animation when a user deactivates the flyout. Corresponding user interface elements such as cursor, highlight, and overlay, hide instantly. <i>onimage</i> and <i>free</i> options control navigation frame positioning. When set to <i>onimage</i> the navigation frame can only be positioned inside the actual image area in the main view. Otherwise, if it is set to <i>free</i>, a user can move the navigation frame anywhere in the logical main view area, even outside the image content."),
				"default": "highlight,0.1,onimage"
			}
		},
		"s7sdk.image.ImageMapEffect": {
			serverurl: {
				"syntax": "isRootPath",
				"description": Granite.I18n.get("The Image Serving root path. If no domain is specified, the domain from which the page is served is applied."),
				"default": "/is/image/"
			},
			rollover: {
				"syntax": "0|1",
				"description": Granite.I18n.get("Specifies when to run the <code>RolloverKeyEvent.ROLLOVER_ACTIVATED</code> event. If set to 1, the event is run when the mouse enters the image map area--in case image map has non-empty <code>rollover_key</code> attribute. If set to 0, <code>RolloverKeyEvent.ROLLOVER_ACTIVATED</code> is run when the image map is clicked==if the image map has non-empty <code>rollover_key</code> and empty <code>href</code> attributes--in this case <code>RolloverKeyEvent.ROLLOVER_DEACTIVATED</code> is not run at all. <code>rollover</code> is automatically set to &quot;0&quot; on touch devices."),
				"default": "1"
			},
			maptips: {
				"syntax": "0|1",
				"description": Granite.I18n.get("Specifies whether or not tool tips are enabled for individual map area elements."),
				"default": "0"
			},
			mode: {
				"syntax": "icon|region|auto|none",
				"description": Granite.I18n.get("Specifies the appearance of the image map. When set to <code>icon</code> map icons are statically shown on desktop and touch devices. <code>region</code> renders image map regions. On desktop systems, they are shown on rollover and on touch devices they are always visible. When set to <code>auto</code> on desktop systems, image map regions are shown on rollover and on touch devices map icons are always visible. <code>none</code> disables image maps."),
				"default": "icon"
			}
		},
		"s7sdk.image.NavigationView": {
			serverurl: {
				"syntax": "isRootPath",
				"description": Granite.I18n.get("The Image Serving root path. If no domain is specified, the domain from which the page is served is applied instead. Standard URI path resolution applies."),
				"default": "/is/image/"
			},
			asset: {
				"syntax": "image",
				"description": Granite.I18n.get("The Image Serving catalog/image ID of the image to display."),
				"default": ""
			},
			iscommand: {
				"syntax": "value",
				"description": Granite.I18n.get("The Image Serving command string that is applied to the image when requesting image data. If specified in the URL, all occurrences of &apos;&amp;&apos; and &apos;=&apos; must be HTTP-encoded as <code>%26</code> and <code>%3D</code>, respectively."),
				"default": ""
			},
			resizable: {
				"syntax": "0|1",
				"description": Granite.I18n.get("Turn auto-resize logic on and off. When on, the component automatically adjusts its size to match the size of the source image."),
				"default": "0"
			},
			fmt: {
				"syntax": "jpg|jpeg|png|png-alpha|gif|gif-alpha",
				"description": Granite.I18n.get("Specifies the image format used by the component for loading images from Image Server. The image format is any value supported by Image Server and the client browser. If the image format ends with &quot;-alpha&quot;, the component renders images as transparent. For all other image format values the component treats images as opaque."),
				"default": "jpeg"
			}
		},
		"s7sdk.image.ZoomTargets": {
			serverurl: {
				"syntax": "isRootPath",
				"description": Granite.I18n.get("The Image Serving root path. If no domain is specified, the domain from which the page is served is applied instead. Standard URI path resolution applies."),
				"default": "/is/image/"
			},
			asset: {
				"syntax": "imageSet",
				"description": Granite.I18n.get("The Image Serving catalog or asset ID of a named image set whose definition comes from the server by means of the <code>req=imageset</code> command."),
				"default": "\"\""
			},
			iscommand: {
				"syntax": "value",
				"description": Granite.I18n.get("The Image Serving command string that is applied to all swatches and images. If specified in the URL, all occurrences of &apos;&amp;&apos; and &apos;=&apos; must be HTTP-encoded as <code>%26</code> and <code>%3D</code>, respectively."),
				"default": "\"\""
			},
			tmbsize: {
				"syntax": "width, height",
				"description": Granite.I18n.get("Specifies the size of the individual target thumbnails in pixels. If the cell size of the target exceeds the size requirement of the component, the targets do not display. (<i><b>Deprecated:</b></i> now use CSS to specify thumb dimensions.) "),
				"default": "75,75"
			},
			tmblayout: {
				"syntax": "cols, rows",
				"description": Granite.I18n.get("Specifies columns, or rows, or both to limit the number of cells per row and column, respectively. Set rows, or columns, or both to 0 to let the component choose how many cells per row and column to display. If both rows and columns are larger than 0, the component ignores any swatches that exceed the total number of cells that are available. The swatches are also ignored if they cannot fit into the component&apos;s area and the resizable modifier is set to false."),
				"default": "0,2"
			},
			textpos: {
				"syntax": "bottom|top|left|right|none|tooltip",
				"description": Granite.I18n.get("Specifies where the label is drawn relative to the target&apos;s thumbnail image. That is, the label is centered at the specified location relative to the thumbnail. When <code>tooltip</code> is specified, no label is drawn."),
				"default": "tooltip"
			},
			fmt: {
				"syntax": "jpg|jpeg|png|png-alpha|gif|gif-alpha",
				"description": Granite.I18n.get("Specifies the image format used by the component for loading images from Image Server. The image format is any value supported by Image Server and the client browser. If the image_format ends with &quot;-alpha&quot;, the component renders images as transparent. For all other image format values the component treats images as opaque."),
				"default": "jpeg"
			},
			resizable: {
				"syntax": "0|1",
				"description": Granite.I18n.get("If set to 0, only the thumbnails that can fit into the component&apos;s area are shown. If set to 1, the component dynamically resizes to fit the content."),
				"default": "0"
			},
			pagemode: {
				"syntax": "0|1",
				"description": Granite.I18n.get("When toggled, the scroll buttons automatically cause the thumbnails to jump a full page length. Extra whitespace is shown on the last page if the thumbnails do not fit. The last page has the same number of cells as any previous page. The scrollstep is ignored and mouse scrolling settles only on full pages."),
				"default": "0"
			},
			enablescrollbuttons: {
				"syntax": "0|1",
				"description": Granite.I18n.get("Displays or hides the scroll buttons. When the scroll buttons are hidden, the user can use their mouse or use touch gestures to scroll. Scroll buttons do not appear if there is no need to scroll regardless of the setting."),
				"default": "1"
			},
			scrollstep: {
				"syntax": "hStep, vStep",
				"description": Granite.I18n.get("Specifies the number of thumbnails to scroll for each tap of the corresponding scroll button."),
				"default": "3,3"
			},
			enabledragging: {
				"syntax": "0|1[,overdragvalue]",
				"description": Granite.I18n.get("Enables or disables the ability for a user to scroll the swatches using a mouse or using touch gestures. The <code>overdragvalue</code> is in the 0 - 1 range and it is a percent value for the movement in the wrong direction of the actual speed. If set to 1, it moves with the mouse. If set to 0 it does not let you move in the wrong direction at all."),
				"default": "1,0.5"
			},
			buttonsnapmode: {
				"syntax": "snapin|snapout|overlay",
				"description": Granite.I18n.get("One of three button modes that are specified by setting the desired string. Use <code>snapin</code> to cause the buttons to align next to the thumbnails. Use <code>snapout</code> to cause the buttons to align next to the component border. Use <code>overlay</code> to cause the buttons to render on top of the thumbnails."),
				"default": "snapout"
			},
			partialswatches: {
				"syntax": "0|1",
				"description": Granite.I18n.get("Specifies whether the component allows scrolling to stop when any of the thumbnails are partially visible (scrolling not aligned). The recommended value is false or 0."),
				"default": "0"
			},
			orientation: {
				"syntax": "0|1",
				"description": Granite.I18n.get("Defines the layout of swatch cells. A row-major layout is used when the orientation is set to 0; a column-major layout is used when the orientation is set to 1."),
				"default": "0"
			}
		},
		"s7sdk.image.ZoomView": {
			serverurl: {
				"syntax": "isRootPath",
				"description": Granite.I18n.get("The Image Serving root path. If no domain is specified, the domain from which the page is served is applied instead. Standard URI path resolution applies."),
				"default": "/is/image/"
			},
			asset: {
				"syntax": "image",
				"description": Granite.I18n.get("The Image Serving catalog/image ID of the image to display."),
				"default": ""
			},
			iscommand: {
				"syntax": "value",
				"description": Granite.I18n.get("The Image Serving command string that is applied to the image when requesting image data. If specified in the URL, all occurrences of &apos;&amp;&apos; and &apos;=&apos; must be HTTP-encoded as <code>%26</code> and <code>%3D</code>, respectively."),
				"default": ""
			},
			zoomstep: {
				"syntax": "step[,limit]",
				"description": Granite.I18n.get("Configures how many zoom in and zoom out actions are required to increase or decrease the resolution by a factor of two. The resolution change for each zoom action is 2<sup>1</sup> per step. Set to 0 to zoom to full resolution with a single zoom action. Use <code>limit</code> to specify the maximum zoom resolution, relative to the full resolution image. The default is 1.0, which does not allow zooming beyond full resolution."),
				"default": "1,1"
			},
			transition: {
				"syntax": "[time][,easing]",
				"description": Granite.I18n.get("<i>Time</i> specifies the time in seconds that the animation takes for a single zoom step action. Use <i>easing</i> to create an illusion of acceleration or deceleration which makes the transition appear more natural. You can set <i>easing</i> to one of the following: 0 (auto), 1 (linear), 2 (quadratic), 3 (cubic), 4 (quartic), 5 (quintic). Auto mode always uses linear transition when elastic zoom is disabled (default). Otherwise, it fits one of the other <i>easing</i> functions based on the transition time. That is, the shorter the transition time the higher the easing function is used to quicken the acceleration or deceleration effect."),
				"default": "0.5,0"
			},
			frametransition: {
				"syntax": "none|fade|slide[,duration[,spacing]]",
				"description": Granite.I18n.get("Specifies the type and duration of the effect that is applied on frame change. Use <code>none</code> for no transition; that is, frame change occurs instantly. Use <code>fade</code> for a cross-fade transition between old and new frames, with transition duration in seconds controlled by <i>duration</i>. Use <code>slide</code> to activate the transition where the old frame slides out of the view and the new frame slides in. Slide animation duration is controlled in seconds by the <i>duration</i> element. The spacing between adjacent frames is controlled with <i>spacing</i>. The spacing has the range between <code>0</code> and <code>1</code> and is relative to the component&apos;s width."),
				"default": "none"
			},
			rgn: {
				"syntax": "x,y,w,h",
				"description": Granite.I18n.get("The initial region of interest in pixel coordinates. If not specified, the entire image is fitted within the initial viewport unless you adjusted the <code>reset</code> modifier."),
				"default": ""
			},
			rgnN: {
				"syntax": "x,y,w,h",
				"description": Granite.I18n.get("The initial region of interest in normalized coordinates. If not specified, the entire image is fitted within the initial viewport unless you adjusted the <code>reset</code> modifier."),
				"default": ""
			},
			singleclick: {
				"syntax": "none|zoom|reset|zoomReset",
				"description": Granite.I18n.get("Configures the mapping of single-click or tap-to-zoom actions. Set to <code>none</code> to disable single-click or tap zoom. If set to <code>zoom</code>, then clicking the image zooms in one zoom step; CTRL+Click zooms out one zoom step. Set to <code>reset</code> to cause a click on the image to reset the zoom to the initial zoom level. For <code>zoomReset</code>, reset is applied if the current zoom factor is at or beyond the specified limit. Otherwise, zoom is applied."),
				"default": "none"
			},
			doubleclick: {
				"syntax": "none|zoom|reset|zoomReset",
				"description": Granite.I18n.get("Configures the mapping of double-click or tap-to-zoom actions. Setting to <code>none</code> disables double-click or tap reset. If set to <code>zoom</code>, clicking the image zooms in one zoom step; CTRL+Click zooms out one zoom step. Use <code>reset</code> to cause a click on the image to reset the zoom to the initial zoom level. For <code>zoomReset</code>, reset is applied if the current zoom factor is at, or beyond, the specified limit. Otherwise, <code>zoom</code> is applied."),
				"default": "zoomReset"
			},
			swipe: {
				"syntax": "0|1",
				"description": Granite.I18n.get("Configures the component response to a horizontal swipe or a flick gesture. If set to <code>1</code> the component performs an image change in response to a horizontal swipe or flick. When set to <code>0</code>, swipe or flick gestures only affect image panning."),
				"default": "1"
			},
			reset: {
				"syntax": "0|1",
				"description": Granite.I18n.get("Resets the viewport when the frame (image) changes. If set to 0, it preserves the current viewport with the best possible fit while preserving the aspect ratio of the newly set image."),
				"default": "1"
			},
			iconeffect: {
				"syntax": "0|1[,count][,fade][,autoHide]",
				"description": Granite.I18n.get("Enables the IconEffect to display above the image when the image is in a reset state and is in a high enough resolution to allow zooming. Such functionality is suggestive of available action to interact with the image. The <i>count</i> specifies the maximum number of times the icon overlay appears and reappears.  A value of -1 indicates that the overlay always reappears indefinitely. The <i>fade</i> specifies the duration of show and hide animation, in seconds. The <i>autoHide</i> sets number of seconds that IconEffect stays visible before it auto-hides. That is, the time after fade in animation is completed and before fade out animation starts); 0 disables auto-hide behavior."),
				"default": "1,1,0.3,3"
			},
			enablehd: {
				"syntax": "always|never|limit,number",
				"description": Granite.I18n.get("Enable, limit, or disable optimization for devices where devicePixelRatio is greater than 1 such as devices with a high-density display like iPhone4 and similar devices.  If activated, the component limits the size of the IS image request as if the device had a pixel ratio of one thereby reducing the bandwidth.  If using the limit setting, the component enables high pixel density only up to the specified limit."),
				"default": "limit,1500"
			},
			fmt: {
				"syntax": "jpg|jpeg|png|png-alpha|gif|gif-alpha",
				"description": Granite.I18n.get("Specifies the image format used by the component for loading images from Image Server. If the specified format ends with &quot;-alpha&quot;, the component renders images as transparent. For all other image formats, the component treats images as opaque. Note that the component has a white background by default. Therefore, to make it completely transparent set the <code>background-color</code> CSS property to <code>transparent</code>"),
				"default": "jpeg"
			}
		},
		"s7sdk.info.InfoPanelPopup": {
			infoserverurl: {
				"syntax": "infoServerTemplate",
				"description": Granite.I18n.get("Info server URL template is used to fetch key or value pairs for the variable substitution in the info panel content template. The specified template typically contains macro place holders that are replaced with the actual data before the request is sent to the server. In particular, $1$ is replaced with the rollover value that triggered the InfoPanelPopup activation. $2$ is replaced with the sequence number of the current frame in the image set. $3$ is replaced with the first path element specified in the name of the parent set of the current item and typically corresponds to the catalog ID. And $4$ is replaced with the following element in the path and corresponds to the asset ID. The actual info server request syntax is info server dependent and it differs from server to server. For example, the following is a typical info server request template http://server_domain/s7info/s7/$3$/$4$/$1$."),
				"default": ""
			},
			template: {
				"syntax": "content_template",
				"description": Granite.I18n.get("The content template that the data returned from the info server is merged into. For more information on the template, see the documentation for this class."),
				"default": ""
			},
			showhidetransition: {
				"syntax": "fade|none[,time]",
				"description": Granite.I18n.get("Specifies the type of show or hide animation in seconds of time."),
				"default": "fade,0.3"
			},
			size: {
				"syntax": "width,height",
				"description": Granite.I18n.get("Specifies the size of the info panel&apos;s container. When set, it overrides the size from CSS. (<b><i>Deprecated</i></b>)"),
				"default": ""
			}
		},
		"s7sdk.Logger": {
			loglevel: {
				"syntax": "level",
				"description": Granite.I18n.get("Sets the level of log statements to display at runtime. For example, <code>s7sdk.Logger.INFO</code>."),
				"default": "NONE"
			}
		},
		"s7sdk.ParameterManager": {
			contenturl: {
				"syntax": "context",
				"description": Granite.I18n.get("The URL path or context to use for static content path resolution, such as external CSS files or video. The context is a relative path that is resolved using standard URI rules against the application domain, or it is an absolute path."),
				"default": "is/content"
			},
			title: {
				"syntax": "title",
				"description": Granite.I18n.get("The title of the web page in which the viewer is running. If the title is not specified, the original web page title is used."),
				"default": ""
			}
		},
		"s7sdk.set.MediaSet": {
			serverurl: {
				"syntax": "isRootPath",
				"description": Granite.I18n.get("Image Serving root path. If no domain is specified, the domain from which the viewer is served is used."),
				"default": "/is/image/"
			},
			enableOrientation: {
				"syntax": "1|0",
				"description": Granite.I18n.get("Defines how the <code>req=set</code> response from Image Serving is parsed. When set to <code>0</code>, only landscape <code>MediaSetDesc</code> instance representing the set is sent with the <code>AssetEvent.NOTF_SET_PARSED</code> event. When set to <code>1</code> the <code>OrientationSetDesc</code> instance with both landscape and portrait <code>MediaSetDesc</code> objects are created."),
				"default": "0"
			},
			flattenSets: {
				"syntax": "0|1[,0|1]",
				"description": Granite.I18n.get("Set the first option to <code>1</code> to flatten the media set so that all items from the nested image and swatch sets appear directly in the media set. Use <code>0</code> to keep the media set structure unchanged. If the second option is set to <code>1</code> then swatches that are explicitly set for items in the nested image and swatch sets are ignored and image thumbnails are used instead. This option applies only when the media set is flattened."),
				"default": "0"
			},
			asset: {
				"syntax": "isCommand",
				"description": Granite.I18n.get("IS catalog/image ID with an optional IS command. For complicated asset values, use the CopyUrl function to safely generate the asset values. URL-encode template variables within asset values, including Unicode text. URL-encode the entire asset value one time further before using it in a URL."),
				"default": ""
			},
			labelkey: {
				"syntax": "key",
				"description": Granite.I18n.get("Specifies the name of the property that is stored in catalog::UserData which, in turn, defines the text string to use as an image or swatch label. If specified, it is propagated to Image Serving by appending <code>labelkey=</code><i>key</i> to the <code>req=set</code> request. If the user data property with the specified key is found, Image Serving inserts its value in the response as image and swatch labels."),
				"default": "label"
			}
		},
		"s7sdk.set.PageScrubber": {
			serverurl: {
				"syntax": "isRootPath",
				"description": Granite.I18n.get("The Image Serving root path. If no domain is specified, the domain from which the page is served is applied instead. Standard URI path resolution applies."),
				"default": "/is/image/"
			},
			asset: {
				"syntax": "imageSet",
				"description": Granite.I18n.get("The Image Serving catalog or asset ID of a named image set whose definition comes from the server by means of the <code>req=set</code> command."),
				"default": "\"\""
			},
			iscommand: {
				"syntax": "value",
				"description": Granite.I18n.get("The Image Serving command string that is applied to all thumbnail images when images are displayed in the optional bubble. If specified in the URL, all occurrences of &apos;&amp;&apos; and &apos;=&apos; must be HTTP-encoded as <code>%26</code> and <code>%3D</code>, respectively."),
				"default": "\"\""
			},
			pagethumb: {
				"syntax": "none|label|image|singlepage|doublepage",
				"description": Granite.I18n.get("The type of optional information bubble that you want. The bubble is displayed when holding and dragging the page scrubber button. The values are <code>none</code> which does not display an information bubble, <code>label</code> with displays the current page spread label, and <code>image</code> which displays the current spread thumbnail). The <code>singlepage</code> and <code>doublepage</code> options are <i><b>deprecated</b></i> and have the same effect as <code>label</code>."),
				"default": "label"
			},
			maxloadradius: {
				"syntax": "-1|0|preloadnbr",
				"description": Granite.I18n.get("Specifies the component preload behavior when <code>pagethumb</code> is set to <code>image</code>. When set to <code>-1</code>, thumbnails for all frames are loaded simultaneously when the component is initialized or the asset has changed. When set to <code>0</code>, only the thumbnail for the current position is loaded. <i>preloadnbr</i> defines how many thumbnails to the left and to the right of current position are preloaded."),
				"default": "1"
			},
			direction: {
				"syntax": "auto|left|right",
				"description": Granite.I18n.get("The direction that the button is draggable. The valid values are <code>left</code>, <code>right</code>, and <code>auto</code>. If <code>auto</code> is set, the component automatically detects if the language is set to &apos;ja&apos; or Japanese and sets the direction to <code>right</code> automatically."),
				"default": "auto"
			},
			labelkey: {
				"syntax": "key",
				"description": Granite.I18n.get("Specifies the name of the property stored in catalog::UserData which defines the text string that is used for the information bubble when <code>pagethumb</code> is set to <code>singlepage</code> or <code>doublepage</code>. If specified, it is propagated to Image Serving by appending <code>labelkey=</code><i>key</i> to the <code>req=set</code> request. If user data property with the specified key is found, Image Serving inserts its value in the response as image labels. Labels coming from the server take precedence over auto-generated labels."),
				"default": "label"
			},
			aligntotick: {
				"syntax": "true|false",
				"description": Granite.I18n.get("If set to <code>true</code> the component snaps the knob to the fixed position based on the number of spreads in the set. If set to <code>false</code>, you can position the knob anywhere on the track."),
				"default": "false"
			}
		},
		"s7sdk.set.PageView": {
			serverurl: {
				"syntax": "isRootPath",
				"description": Granite.I18n.get("The Image Serving root path. If no domain is specified, the domain from which the page is served is applied instead. Standard URI path resolution applies."),
				"default": "/is/image/"
			},
			asset: {
				"syntax": "imageSet",
				"description": Granite.I18n.get("The Image Serving catalog or asset ID of a named eCatalog set whose definition comes from the server by means of the <code>req=set</code> command."),
				"default": "\"\""
			},
			direction: {
				"syntax": "auto|left|right",
				"description": Granite.I18n.get("Specifies the way pages are displayed in the view. <code>left</code> sets a left-to-right display order and <code>right</code> reverses the order so that pages are displayed right-to-left. When <code>auto</code> is set, the component applies <code>right</code> mode when <code>locale</code> is set to &quot;ja&quot;. Otherwise, <code>left</code> is used."),
				"default": "auto"
			},
			iscommand: {
				"syntax": "value",
				"description": Granite.I18n.get("The Image Serving command string that is applied to all swatches. If specified in the URL all occurrences of &apos;&amp;&apos; and &apos;=&apos; must be HTTP-encoded as <code>%26</code> and <code>%3D</code>, respectively."),
				"default": "\"\""
			},
			zoomstep: {
				"syntax": "step[,limit]",
				"description": Granite.I18n.get("Configures how many zoom in and zoom out actions are required to increase or decrease the resolution by a factor of two. The resolution change for each zoom action is 2<sup>1</sup>/<i>step</i>. Set to 0 to zoom to full resolution with a single zoom action. <i>limit</i> specifies the maximum zoom resolution, relative to the full resolution image. The default is 1.0, which does not allow zooming beyond full resolution."),
				"default": "1.0, 1.0"
			},
			frametransition: {
				"syntax": "[none|fade|slide|turn|auto][,duration]",
				"description": Granite.I18n.get("Specifies the type and duration of the effect applied on frame change. Set <code>none</code> for no transition; frame change occurs instantly. Set <code>fade</code> to cross-fade the transition between old and new frames, with transition duration in seconds controlled by <i>duration</i>. Set <code>slide</code> to activate the transition where the old frame slides out of the view and the new frame slides in. This functionality is the only transition mode where it is possible to change between frames using a swipe or flick gesture. Slide animation duration is also controlled by <i>duration</i>. Set <code>turn</code> to enable page flip effect, when user can drag one of the four spread corners and perform interactive page flip. The accompanying <i>duration</i>, as expressed in seconds, sets how long it takes to complete full page turn animation. When <code>turn</code> is used the appearance of the component is controlled with <code>pageturnstyle</code> modifier and <code>.s7pagedivider</code> CSS class is ignored. <code>turn</code> animation is not supported on Android 2.x devices and on Motorola Xoom. Use <code>auto</code> to set the <code>turn</code> frame transition on desktop systems and <code>slide</code> sets the frame transition on touch devices."),
				"default": "slide,0.3"
			},
			pageturnstyle: {
				"syntax": "dividerWidth,dividerColor,dividerOpacity,borderOnOff,borderColor,fillColor",
				"description": Granite.I18n.get("Controls the component appearance when <code>frametransition</code> is set to <code>turn</code> (or <code>auto</code> on desktop systems). <i>dividerWidth</i> is the pixel width of the page divider shadow that separates left and right pages in the spread. It also controls the width of the running shadow displayed next to the turning page. Set <i>dividerColor</i> to control the RRGGBB color value of the shadow. Use <i>dividerOpacity</i> to set the opacity as specified from <code>0</code> to <code>1</code>). <i>borderOnOff</i> is a flag, set as <code>0</code> or <code>1</code>, that turns the border around the turning page on and off. <i>borderColor</i> sets the RRGGBB color value of the border. Used <i>fillColor</i> to set the solid fill RRGGBB color value of the component that is used during page turn animation."),
				"default": "40,909090,1,1,909090,FFFFFF"
			},
			maxloadradius: {
				"syntax": "-1|0|preloadnbr",
				"description": Granite.I18n.get("Specifies the component preload behavior. When set to <code>-1</code>, the component preloads all catalog frames when in an idle state. When set to <code>0</code>, the component loads only the frame that is currently visible. The exception is when <code>frametransition</code> is set to <code>slide</code> or <code>auto</code> on touch devices, where the component always loads the current, previous, and next frame. Use <i>preloadnbr</i> to define how many invisible frames around the currently displayed frame are preloaded in an idle state."),
				"default": "1"
			},
			transition: {
				"syntax": "[time][,easing]",
				"description": Granite.I18n.get("The <i>time</i> element specifies the time in seconds that the animation takes for a single zoom step action. Use <code>easing</code> to create an illusion of acceleration or deceleration which makes the transition appear more natural. You can set <i>easing</i> to one of the following: 0 (auto), 1 (linear), 2 (quadratic), 3 (cubic), 4 (quartic), 5 (quintic). Auto mode always uses a linear transition when elastic zoom is disabled (default). Otherwise, it fits one of the other easing functions based on the transition time. That is, the shorter the transition time, the higher the easing function is used to quicken the acceleration or deceleration effect."),
				"default": "0.5,0"
			},
			singleclick: {
				"syntax": "none|zoom|reset|zoomReset",
				"description": Granite.I18n.get("Configures the mapping of single-click or tap-to-zoom actions. Setting to <code>none</code> disables a single-click or tap zoom. If it is set to <code>zoom</code> then clicking the image zooms in one zoom step; CTRL+clicking zooms out one zoom step. <code>reset</code> causes a single click of the image to reset the zoom to the initial zoom level. For <code>zoomReset</code>, reset is applied if the current zoom factor is at or beyond the specified limit. Otherwise, zoom is applied."),
				"default": "none"
			},
			doubleclick: {
				"syntax": "none|zoom|reset|zoomReset",
				"description": Granite.I18n.get("Configures the mapping of double-click or tap-to-zoom actions. Set to <code>none</code> to disable a double-click or tap reset. If it is set to <code>zoom</code> then double-clicking the image zooms in one step; CTRL+double-clicking zooms out one step. <code>reset</code> causes a double-click of the image to reset the zoom to the initial zoom level. For <code>zoomReset</code>, reset is applied if the current zoom factor is at or beyond the specified limit. Otherwise, zoom is applied."),
				"default": "zoomReset"
			},
			iconeffect: {
				"syntax": "0|1[,count][,fade][,autoHide]",
				"description": Granite.I18n.get("Enables the <code>IconEffect</code> to display above the image when the image is in reset state. Such functionality is suggestive of available action to interact with the image. Set <i>count</i> to specify the maximum number of times the icon overlay appears and reappears.  A value of -1 indicates that the overlay reappears indefinitely. Set <i>fade</i> to specify the duration in seconds of show and hide animation. The <i>autoHide</i> sets the number of seconds that the <code>IconEffect</code> stays visible before it auto-hides. That is, the time after fade in animation is completed and before fade out animation starts. A value of 0 disables auto-hide behavior."),
				"default": "1,1,0.3,3"
			},
			enablehd: {
				"syntax": "always|never|limit,<number>",
				"description": Granite.I18n.get("Enable, limit, or disable optimization for devices where <code>devicePixelRatio</code> is greater than 1.  If using the <code>limit</code> setting, the largest value that works for all devices is the <i>value</i> of the larger of width or height for the <b>Reply Image Size Limit</b> setting in Scene7 Publishing System (see Setup > Application Setup > Publish Setup > Image Server, then look under the Request Attributes heading.)"),
				"default": "limit,1500"
			},
			fmt: {
				"syntax": "jpg|jpeg|png|png-alpha|gif|gif-alpha",
				"description": Granite.I18n.get("Specifies the image format for the component to use for loading images from Image Server. If the specified format ends with &quot;-alpha&quot;, the component renders images as transparent. For all other image formats, the component treats images as opaque. Note that the component has a white background by default. Therefore, to make it completely transparent set the <code>background-color</code> CSS property to <code>transparent</code>"),
				"default": "jpeg"
			}
		},
		"s7sdk.set.SpinView": {
			serverurl: {
				"syntax": "isRootPath",
				"description": Granite.I18n.get("The Image Serving root path. If no domain is specified, the domain from which the page is served is applied instead. Standard URI path resolution applies."),
				"default": "/is/image/"
			},
			asset: {
				"syntax": "spinSet",
				"description": Granite.I18n.get("The Image Serving catalog or asset ID of a named spin set whose definition comes from the server by means of the <code>req=set</code> command."),
				"default": ""
			},
			iscommand: {
				"syntax": "value",
				"description": Granite.I18n.get("Image Serving command string that is applied to all images in the set. If specified in the URL, all occurrences of &apos;&amp;&apos; and &apos;=&apos; must be HTTP-encoded as <code>%26</code> and <code>%3D</code>, respectively."),
				"default": ""
			},
			zoomstep: {
				"syntax": "step[,limit]",
				"description": Granite.I18n.get("Configures how many zoom-in and zoom-out actions are required to increase or decrease the resolution by a factor of two. The resolution change for each zoom action is 2<sup>1</sup>/step. Set to 0 to zoom to full resolution with a single zoom action. Set <code>limit</code> to specify the maximum zoom resolution, relative to the full resolution image. The default of 1.0 does not allow zooming beyond full resolution."),
				"default": "1.0, 1.0"
			},
			transition: {
				"syntax": "[time][,easing]",
				"description": Granite.I18n.get("Time specifies the time in seconds that the animation takes for a single zoom step action. Use <code>easing</code> to create an illusion of acceleration or deceleration which makes the transition appear more natural. You can set easing to one of the following: 0 (auto), 1 (linear), 2 (quadratic), 3 (cubic), 4 (quartic), 5 (quintic). Auto mode always uses linear transition when elastic zoom is disabled (default). Otherwise, it fits one of the other easing functions based on the transition time. That is, the shorter the transition time, the higher the easing function is used to quicken the acceleration or deceleration effect."),
				"default": "0.5,0"
			},
			singleclick: {
				"syntax": "none|zoom|reset|zoomReset",
				"description": Granite.I18n.get("Configures the mapping of single-click or tap-to-zoom actions. Set to <code>none</code> to disable single-click or tap zoom. If it is set to <code>zoom</code>, clicking the image zooms in one zoom step; CTRL+clicking zooms out one zoom step. Set <code>reset</code> to cause a single click of the image to reset the zoom to the initial zoom level. For <code>zoomReset</code>, <code>reset</code> is applied if the current zoom factor is at or beyond the specified limit. Otherwise, zoom is applied."),
				"default": "none"
			},
			doubleclick: {
				"syntax": "none|zoom|reset|zoomReset",
				"description": Granite.I18n.get("Configures the mapping of double-click or tap-to-zoom actions. Set to <code>none</code> disables double-click or tap zoom. If it is set to <code>zoom</code> then clicking the image zooms in one zoom step; CTRL+clicking zooms out one zoom step. Set <code>reset</code> causes a single click of the image to reset the zoom to the initial zoom level. For <code>zoomReset</code>, <code>reset</code> is applied if the current zoom factor is at or beyond the specified limit. Otherwise, zoom is applied."),
				"default": "zoomReset"
			},
			maxloadradius: {
				"syntax": "value",
				"description": Granite.I18n.get("Represents the maximum number of frames to preload in each direction when the SpinView is idle. A value of -1 preloads all frames in the set. The preloaded frames are always in the original resolution at which the SpinView was initially loaded."),
				"default": "6"
			},
			autospin: {
				"syntax": "0|1[,duration][,direction][,spin_number]",
				"description": Granite.I18n.get("Enables or disables the automatic spin animation. <i>duration</i> is the number of seconds per one full spin. <i>direction</i> is the spin direction which is <code>0</code> for spinning east and <code>1</code> for spinning west. <i>spin_number</i> is the number of full rotations done before autospin stops. The number is a floating point number. Set to <code>-1</code> for an infinitive auto spin."),
				"default": "0,1,1,1"
			},
			iconeffect: {
				"syntax": "0|1[,count][,fade][,autoHide]",
				"description": Granite.I18n.get("Enables the IconEffect to display above the first image in the spin set when the image is in a reset state. Such functionality suggests to the user to drag the image to spin it. Set <i>count</i> to specify the maximum number of times the icon overlay appears and reappears.  A value of -1 indicates that the overlay reappears indefinitely. Set <i>fade</i> to specify the duration in seconds of show and hide animation. Set <i>autoHide</i> to specify the number of seconds that the IconEffect stays fully visible before it auto-hides. That is, the time after fade in animation is completed and before fade out animation starts). A value of 0 disables the auto-hide behavior."),
				"default": "1,1,0.3,3"
			},
			enablehd: {
				"syntax": "always|never|limit,number",
				"description": Granite.I18n.get("Enable, limit, or disable optimization for devices where devicePixelRatio is greater than 1 such as devices with high-density display like iPhone4 and similar devices. If active, the component limits the size of the IS image request as if the device only had a pixel ratio of 1, thereby reducing the bandwidth. If you use the limit setting, the component enables high pixel density only up to the specified limit."),
				"default": "limit,1500"
			},
			fmt: {
				"syntax": "jpg|jpeg|png|png-alpha|gif|gif-alpha",
				"description": Granite.I18n.get("Specifies the image format that the component uses to load images from Image Server. If the specified format ends with &quot;-alpha&quot;, the component renders images as transparent. For all other image formats, the component treats images as opaque. Note that the component has a white background by default. Therefore, to make it completely transparent, set the <code>background-color</code> CSS property to <code>transparent</code>"),
				"default": "jpeg"
			}
		},
		"s7sdk.set.Swatches": {
			serverurl: {
				"syntax": "isRootPath",
				"description": Granite.I18n.get("The Image Serving root path. If no domain is specified, the domain from which the page is served is applied instead. Standard URI path resolution applies."),
				"default": "/is/image/"
			},
			asset: {
				"syntax": "imageSet",
				"description": Granite.I18n.get("The Image Serving catalog or asset ID of a named image set whose definition comes from the server by means of the <code>req=set</code> command."),
				"default": "\"\""
			},
			iscommand: {
				"syntax": "value",
				"description": Granite.I18n.get("The Image Serving command string that is applied to all swatches. If specified in the URL all occurrences of &apos;&amp;&apos; and &apos;=&apos; must be HTTP-encoded as <code>%26</code> and <code>%3D</code>, respectively."),
				"default": "\"\""
			},
			tmbsize: {
				"syntax": "width, height",
				"description": Granite.I18n.get("Specifies the pixel size of the individual swatch thumbnails. If the cell size of the swatches exceeds the size requirement of the component, the swatches do not display. (<i><b>Deprecated:</b></i> now use CSS to specify thumb dimensions.) "),
				"default": "75,75"
			},
			tmblayout: {
				"syntax": "cols, rows",
				"description": Granite.I18n.get("Specifies columns, or rows, or both to limit the number of cells per row and column, respectively. Set rows, or columns, or both to 0 to let the component choose how many cells per row and column to display. If both rows and columns are larger than 0, the component ignores any swatches that exceed the total number of cells that are available. The swatches are also ignored if they cannot fit into the component&apos;s area and the resizable modifier is set to false."),
				"default": "0,2"
			},
			maxloadradius: {
				"syntax": "-1|0|preloadnbr",
				"description": Granite.I18n.get("Specifies the component preload behavior. When set to <code>-1</code>, all swatches are loaded simultaneously when the component is initialized or the asset has changed. When set to <code>0</code>, only visible swatches are loaded. Set <i>preloadnbr</i> to define how many invisible rows or columns around the visible area are preloaded."),
				"default": "1	 *"
			},
			direction: {
				"syntax": "auto|left|right",
				"description": Granite.I18n.get("Specifies the way swatches fill in the view. Set <code>left</code> to set a left-to-right fill order. Set <code>right</code> to reverse the order so that the view is filled in a right-to-left, top-to-bottom direction. Set <code>auto</code> to have the component apply <code>right</code> mode when <code>locale</code> is set to &quot;ja&quot;. Otherwise, <code>left</code> is used."),
				"default": "auto"
			},
			textpos: {
				"syntax": "bottom|top|left|right|none|tooltip",
				"description": Granite.I18n.get("Specifies where the label is drawn relative to the swatch thumbnail image. That is, the label is centered at the specified location relative to the swatch thumbnail. When <code>tooltip</code> is specified, no label is drawn."),
				"default": "bottom"
			},
			fmt: {
				"syntax": "jpg|jpeg|png|png-alpha|gif|gif-alpha",
				"description": Granite.I18n.get("Specifies the image format that the component uses for loading images from Image Server. Any value supported by Image Server and the client browser is used. If the image format ends with &quot;-alpha&quot;, the component renders images as transparent. For all other image format values, the component treats images as opaque."),
				"default": "jpeg"
			},
			resizable: {
				"syntax": "0|1",
				"description": Granite.I18n.get("If set to 0, only the swatches that can fit into the component&apos;s area are shown. If set to 1, the component dynamically resizes to fit the content."),
				"default": "0"
			},
			pagemode: {
				"syntax": "0|1",
				"description": Granite.I18n.get("When toggled, the scroll buttons automatically cause the swatches to jump a full page length. Extra whitespace is shown on the last page if the swatches do not fit. The last page has the same number of cells as any previous page. The <code>scrollstep</code> is ignored and mouse scrolling settles only on full pages."),
				"default": "0"
			},
			enablescrollbuttons: {
				"syntax": "0|1",
				"description": Granite.I18n.get("Displays or hides the scroll buttons. When the scroll buttons are hidden, the user can use their mouse or use touch gestures to scroll. Scroll buttons do not appear if there is no need to scroll, regardless of the setting."),
				"default": "1"
			},
			scrollstep: {
				"syntax": "hStep, vStep",
				"description": Granite.I18n.get("Specifies the number of swatches to scroll for each tap of the corresponding scroll button."),
				"default": "3,3"
			},
			enabledragging: {
				"syntax": "0|1[,overdragvalue]",
				"description": Granite.I18n.get("Enables or disables the ability for a user to scroll the swatches using a mouse or using touch gestures. The <i>overdragvalue</i> has a range of 0 - 1 and it is a percent value for the movement in the wrong direction of the actual speed. If set to 1, it moves with the mouse. If set to 0, it does not let you move in the wrong direction at all."),
				"default": "1,0.5"
			},
			buttonsnapmode: {
				"syntax": "snapin|snapout|overlay",
				"description": Granite.I18n.get("One of three button modes that are specified by setting the desired string. Set <code>snapin</code> to have the buttons align next to the swatches. Set <code>snapout</code> to have the buttons align next to the component border. Use <code>overlay</code> to cause the buttons to render on top of the swatches."),
				"default": "snapout"
			},
			partialswatches: {
				"syntax": "0|1",
				"description": Granite.I18n.get("Specifies whether to stop component scrolling when any of the swatches are partially visible. That is, scrolling is not aligned. The recommended value is false or 0."),
				"default": "0"
			},
			orientation: {
				"syntax": "0|1",
				"description": Granite.I18n.get("Defines the layout of swatch cells. A row-major layout is used when the orientation is set to 0, and a column-major layout is used when set to 1. When in pagemode, the swatches are filled in the specified manner, page-by-page. Otherwise, page breaks are ignored."),
				"default": "0"
			},
			align: {
				"syntax": "left|center|right,top|center|bottom",
				"description": Granite.I18n.get("Specifies internal alignment--or anchoring--of the swatches container within the component area. In Swatches, the internal thumbnail container is sized so that only a whole number of swatches is shown. As a result, there is some padding between the internal container and the external component bounds. This command specifies how the internal swatches container is positioned inside the component. It does not have any effect when <code>resizable=1</code>."),
				"default": "center,center"
			},
			transition: {
				"description": Granite.I18n.get("Specifies the slide animation duration in seconds.")
			},
			scrolltransition: {
				"syntax": "value",
				"description": Granite.I18n.get("Specifies the slide animation duration in seconds by the <code>duration</code>."),
				"default": "0.3"
			}			
		},
		"s7sdk.set.TableOfContents": {
			bearing: {
				"syntax": "[fit-lateral|fit-vertical][,autoHideDelay]",
				"description": Granite.I18n.get("Controls the direction and timing of the drop-down panel appearance. When set to <code>fit-vertical</code>, the component first shifts the base panel position to the bottom of <code>TableOfContents</code> and rolls out the panel either to the right or to the left from such base location. With each attempt the component checks if the panel is clipped by an outside container, which is either an instance of the <code>Container</code> component or an element that has <code>overflow:hidden</code> set in CSS. If all attempts fail, the component tries to shift the base panel position to the top and repeat roll out attempts in a right and left direction. When set to <code>fit-lateral</code>, the component uses a similar logic but shifts the base first to the right, trying down and up roll out directions. Then, it shifts the base to the left, trying down and up roll out directions. Set <code>autoHideDelay</code> to set the delay, in seconds, for the drop-down auto-hide timer which hides the panel when the user is idle."),
				"default": "fit-vertical,2"
			},
			maxitems: {
				"syntax": "value",
				"description": Granite.I18n.get("The maximum number of items in the drop-down panel. Additionally, you can decrease the number of visible items in the drop-down. This is useful if the drop-down becomes cropped by either an instance of the <code>Container</code> component or an element that has <code>overflow:hidden</code> set in the CSS. When set to <code>0</code>, the component shows as many items as possible given the container to which it is added."),
				"default": "0"
			},
			showdefault: {
				"syntax": "0|1",
				"description": Granite.I18n.get("When set to <code>1</code> the component populates the drop-down panel with elements for all <code>MediaSetDesc</code> items, including those that do not have a defined label. When set to <code>0</code> only items with explicit labels show in the drop-down panel."),
				"default": "1"
			}
		},
		"s7sdk.set.ThumbnailGridView": {
			serverurl: {
				"syntax": "isRootPath",
				"description": Granite.I18n.get("The Image Serving root path. If no domain is specified, the domain from which the page is served is applied instead. Standard URI path resolution applies."),
				"default": "/is/image/"
			},
			asset: {
				"syntax": "imageSet",
				"description": Granite.I18n.get("The Image Serving catalog or asset ID of a named image set whose definition comes from the server by means of the <code>req=set</code> command."),
				"default": "\"\""
			},
			iscommand: {
				"syntax": "value",
				"description": Granite.I18n.get("The Image Serving command string that is applied to all thumbnails. If specified in the URL, all occurrences of &apos;&amp;&apos; and &apos;=&apos; must be HTTP-encoded as <code>%26</code> and <code>%3D</code>, respectively."),
				"default": "\"\""
			},
			maxloadradius: {
				"syntax": "-1|0|preloadnbr",
				"description": Granite.I18n.get("Specifies the component preload behavior. When set to <code>-1</code>, all thumbnails are loaded simultaneously when the component is initialized or the asset has changed. When set to <code>0</code>, only visible thumbnails are loaded. Set <i>preloadnbr</i> to define how many invisible rows and columns are preloaded around the visible area."),
				"default": "1"
			},
			direction: {
				"syntax": "auto|left|right",
				"description": Granite.I18n.get("Specifies the way thumbnails fill in the view. Set <code>left</code> so that the view is filled in a left-to-right order. Set <code>right</code> to reverse the order so that the view is filled in from a right-to-left, top-to-bottom direction. Set <code>auto</code> so the component applies <code>right</code> mode when <code>locale</code> is set to &quot;ja&quot;. Otherwise, <code>left</code> is used."),
				"default": "auto"
			},
			textpos: {
				"syntax": "bottom|top|left|right|none|tooltip",
				"description": Granite.I18n.get("Specifies where the label is drawn relative to the thumbnail image. That is, the label is centered at the specified location relative to the thumbnail. When <code>tooltip</code> is specified, no label is drawn."),
				"default": "bottom"
			},
			fmt: {
				"syntax": "jpg|jpeg|png|png-alpha|gif|gif-alpha",
				"description": Granite.I18n.get("Specifies the image format that the component uses for loading images from Image Server. Use any image format value that is supported by Image Server and the client browser. If the image format ends with &quot;-alpha&quot;, the component renders images as transparent. For all other image format values, the component treats images as opaque."),
				"default": "jpeg"
			},
			align: {
				"syntax": "left|center|right",
				"description": Granite.I18n.get("Specifies the internal horizontal alignment--or anchoring--of the thumbnails container within the component area. In <code>ThumbnailGridView</code>, the internal thumbnail container is sized so that only a whole number of thumbnails is shown. As a result, there is some padding between the internal container and the external component bounds. This modifier specifies how the internal thumbnails container is positioned horizontally inside the component."),
				"default": "center"
			},
			enabledragging: {
				"syntax": "0|1[,overdragvalue]",
				"description": Granite.I18n.get("Enables or disables the ability for a user to scroll the thumbnails using a mouse or using touch gestures. Set <i>overdragvalue</i> to set a percent value for movement in the wrong direction of the actual speed. The range is 0 - 1. If set to 1, it moves with the mouse. If set to 0 it does not let you move in the wrong direction at all."),
				"default": "1,0.5"
			},
			scrollbar: {
				"syntax": "0|1",
				"description": Granite.I18n.get("Enable the use of the scroll bar."),
				"default": "1"
			}
		},
		"s7sdk.share.EmailShare": {
			emailurl: {
				"syntax": "emailUrl",
				"description": Granite.I18n.get("Specifies the base URL for Scene7 OnDemand email service."),
				"default": "/s7/emailFriend"
			},
			serverurl: {
				"syntax": "isRootPath",
				"description": Granite.I18n.get("The Image Serving root path. If no domain is specified, the domain from which the page is served is applied instead. Standard URI path resolution applies. To render thumbnails properly in outgoing email, the modifier must use an absolute URL."),
				"default": "/is/image/"
			}
		},
		"s7sdk.share.EmbedShare": {
			embedsizes: {
				"syntax": "width,height[,selected][;width,height[,selected]]",
				"description": Granite.I18n.get("A list of embed sizes for size combobox. Set <i>width</i> and <i>height</i> to represent the embed size. Set <i>selected</i> to either <code>0</code> or <code>1</code> to mean that the item is initially pre-selected--or not--in the combo box."),
				"default": "1280,960;640,480;320,240"
			}
		},
		"s7sdk.share.Print": {
			serverurl: {
				"syntax": "isRootPath",
				"description": Granite.I18n.get("The Image Serving root path. If no domain is specified, the domain from which the page is served is applied instead. Standard URI path resolution applies."),
				"default": "/is/image/"
			},
			printquality: {
				"syntax": "size",
				"description": Granite.I18n.get("The maximum size of the image sent to print."),
				"default": "1000"
			}
		},
		"s7sdk.share.SocialShare": {
			bearing: {
				"syntax": "up|down|left|right|fit-vertical|fit-lateral",
				"description": Granite.I18n.get("Specifies the direction of slide animation for the buttons container. Set to <code>up</code>, <code>down</code>, <code>left</code>, or <code>right</code> to have the panel roll out in the specified direction without an additional bounds check. This functionality can result in panel clipping by an outside container. Set to <code>fit-vertical</code> to have the component first shift the base panel position to the bottom of <code>SocialShare</code> and try to roll out the panel bottom, right, or left, from such base location. With each attempt, the component checks if the panel is clipped by an outside container that is either an instance of the <code>Container</code> component or an element that has <code>overflow:hidden</code> set in the CSS. If all attempts fail, the component tries to shift the base panel position to the top and repeat roll out attempts in a top, right, and left direction. When set to <code>fit-lateral</code>, the component uses a similar logic. The component shifts the base first to the right, trying right, down, and up roll out directions. Then, the component shifts the base to the left, trying left, down, and up roll out directions."),
				"default": "left"
			}
		},
		"s7sdk.TrackingManager": {
			disabletracking: {
				"syntax": "event1[,event2[,...]]",
				"description": Granite.I18n.get("Events not to track."),
				"default": ""
			},
			enabletracking: {
				"syntax": "event1[,event2[,...]]",
				"description": Granite.I18n.get("Events to track."),
				"default": "LOAD,SWAP,SWATCH,PAGE,PLAY,PAUSE,STOP,MILESTONE,HREF,ITEM,TARG,ZOOM,SPIN,PAN"
			}
		},
		"s7sdk.video.VideoPlayer": {
			serverurl: {
				"syntax": "isRootPath",
				"description": Granite.I18n.get("The Image Serving root path. If no domain is specified, the domain from which the page is served is applied instead. Standard URI path resolution applies."),
				"default": "/is/image/"
			},
			videoserverurl: {
				"syntax": "videoRootPath",
				"description": Granite.I18n.get("The video server root path. If no domain is specified, the domain from which the page is served is applied instead. Standard URI path resolution applies."),
				"default": "/is/content/"
			},
			contenturl: {
				"syntax": "contentRootPath",
				"description": Granite.I18n.get("The content root path. If no domain is specified, the domain from which the page is served is applied instead. Standard URI path resolution applies."),
				"default": "/is/content/"
			},
			asset: {
				"syntax": "value",
				"description": Granite.I18n.get("The asset ID of the single video or Adaptive Video Set."),
				"default": "\"\""
			},
			autoplay: {
				"syntax": "0|1",
				"description": Granite.I18n.get("Indicates whether the component starts playing the video when the load operation is successfully completed. Some systems, such as certain mobile devices, may not support autoplay."),
				"default": "1"
			},
			iconeffect: {
				"syntax": "0|1[,count][,fade][,autoHide]",
				"description": Granite.I18n.get("Enables the IconEffect to display on top of the video when the video is in a paused state. Set <i>count</i> to specify the maximum number of times the icon overlay appears and reappears.  A value of <code>-1</code> indicates that the overlay reappears indefinitely. Set <i>fade</i> to specify the duration in seconds of show or hide animation. Set <i>autoHide</i> to specify the number of seconds that the <code>IconEffect</code> stays fully visible before it auto-hides. That is, the time after fade in animation is completed and before fade out animation starts. A setting of <code>0</code> disables auto-hide behavior. On some devices or when controls are enabled using <code>playback</code> modifier, native controls are used. In such cases, the <code>iconeffect</code> modifier is ignored."),
				"default": "1,1,0.3,3"
			},
			posterimage: {
				"syntax": "none | [image_id]",
				"description": Granite.I18n.get("The image to display on the first frame before the video starts playing; resolved against <code>serverurl</code>. If specified in the URL the ? and all occurrences of &amp; and = must be HTTP-encoded as <code>%3F>/code>, <code>%26</code>, and <code>%3D</code>, respectively. If the <i>image_id</i> value is omitted, the component attempts to use the default poster image for that asset instead. When the video is specified as a path, the default poster images catalog ID is derived from the video path as the <i>catalog_id/image_id</i> pair where <i>catalog_id</i> corresponds to the first token in the path and <i>image_id</i> is the name of the video with the extension removed. If the image with that ID does not exist, the poster image is not shown. To prevent displaying of the default poster image, specify <code>none</code> as the poster image value."),
				"default": "\"\""
			},
			singleclick: {
				"syntax": "none|playPause",
				"description": Granite.I18n.get("Configures the mapping of single-click or tap-to-toggle play/pause. Set to <code>none</code> to disable single-click or tap-to-play/tap-to-pause. If set to <code>playPause</code>, clicking the video toggles between playing and pausing the video. On some devices, or when controls are enabled using the <code>playback</code> modifier, native controls are used. In such case, <code>singleclick</code> behavior is disabled."),
				"default": "playPause"
			},
			playback: {
				"syntax": "auto|native [,0|1]",
				"description": Granite.I18n.get("Sets the type of playback used by the component. When <code>auto</code> is set, on most desktop browsers except Safari and in some smartphones such as BlackBerry 10, the component uses Flash video playback if Adobe Flash Player is installed. Otherwise, HTML5 playback is used. On the Safari browser, native playback is always used, even if Adobe Flash Player is available. If <code>native</code> is specified, the component only relies on HTML5 playback as natively supported by browsers. The second argument tells whether or not to use native video controls during inline video playback--applies only when <code>native</code> is used. Some platforms, including iPhone and Android 3.0 or earlier, always use native video controls, which is why the value of this modifier is ignored. Finally, the full screen playback that is initiated using a native full screen button always uses native controls. For more information on the playback selection in <code>auto</code> and <code>native</code> modes, see the HTML5 Viewers SDK User Guide."),
				"default": "auto,0"
			},
			caption: {
				"syntax": "file[,0|1]",
				"description": Granite.I18n.get("<code>file</code> is a URL or path to WebVTT caption content. The WebVTT file must be served by Image Serving. WebVTT cue positioning is supported, but region and overlapping cues are not supported. The second parameter is the default caption state (enabled is true)."),
				"default": "\"\",0"
			},
			navigation: {
				"syntax": "file",
				"description": Granite.I18n.get("<code>file</code> is a URL or path to WebVTT navigation content. The WebVTT file must be served by Image Serving."),
				"default": "\"\""
			},
			progressivebitrate: {
				"syntax": "value",
				"description": Granite.I18n.get("Specifies--in kbits per second or kbps--the desired video bit rate to play from the Adaptive Video Set in case the current system does not support adaptive video playback. The component picks up the video stream with the closest possible--but not exceeding--bit rate to the specified <i>value</i>. If all video streams in the Adaptive Video Set have higher quality than the specified <i>value</i>, the logic chooses the bit rate with the lowest quality."),
				"default": "700"
			},
			smoothing: {
				"syntax": "0|1",
				"description": Granite.I18n.get("Specifies whether the video is smoothed (interpolated) when it is scaled. For smoothing to work, the runtime must be in high-quality mode, which is the default. The default value is false--no smoothing. Set this property to <code>1</code> to take advantage of mipmapping image optimization. Only for FlashVideoProxy."),
				"default": "0"
			},
			initialbitrate: {
				"syntax": "value",
				"description": Granite.I18n.get("Sets the bit rate of the video that the video player starts to look for in the Adaptive Video Set. If the value does not exist in the Adaptive Video Set, the video player starts with the video that has the next lowest bit rate. If set to <code>0</code>, the video player starts from the lowest possible bit rate. Applicable only for Flash-enabled desktop systems when the <code>playback</code> modifier is set to <code>auto</code>."),
				"default": "0"
			},
			loop: {
				"syntax": "0|1",
				"description": Granite.I18n.get("Indicates whether the media plays again after playback is complete."),
				"default": "0"
			},
			waiticon: {
				"description": Granite.I18n.get("Enables or disables the buffering animation display.")
			},
            preload: {
				"description": Granite.I18n.get("Indicates whether the component begins loading video content before the playback starts. If set to '1' the video begins to download right after the asset is set, otherwise preload starts only after the playback is initiated by the end user or an API call. When video preload is disabled certain features may not work until the playback starts, specifically seek operation will not update the video frame; if poster image is disabled the component will show empty area instead of the 1st video frame. Finally, disabling video preload may be ignored on certain versions of Internet Explorer 11 and Edge browsers.")
            },
            mutevolume: {
				"description": Granite.I18n.get("Sets muted mode for video playback on initial load. If set to '1' the volume is muted, otherwise video plays with sound. On certain devices muting video playback on load will also allow to auto play the video.")
            }			
		},
		"s7sdk.video.VideoScrubber": {
			showchaptertitle: {
				"syntax": "0|1",
				"description": Granite.I18n.get("Enables or disables the title bar of the chapter label. The chapter start time is not displayed when the title bar is disabled."),
				"default": "1"
			},
			showchaptertime: {
				"syntax": "0|1",
				"description": Granite.I18n.get("Enables or disables the chapter time in the title bar of the chapter label."),
				"default": "1"
			},
			chaptertimepattern: {
				"syntax": "[h:]m|mm:s|ss",
				"description": Granite.I18n.get("Sets the pattern for the time that is displayed in the title bar of the chapter label. Setting <code>h</code> represents hours, <code>m</code> represents minutes, and <code>s</code> represents seconds. The number of letters used for each time unit determines the number of digits to display for the unit. If the number cannot fit into the given digits, the equivalent value is displayed in the subsequent unit. For example, if the current movie time is 67 minutes and 5 seconds, the time pattern of <code>m:ss</code> displays as 67:05. The same time appears as 1:07:5 when the given time pattern is <code>h:mm:s</code>."),
				"default": "m:ss"
			},
			showtime: {
				"syntax": "0|1",
				"description": Granite.I18n.get("Enables or disables the time played bubble when adjusting the knob position."),
				"default": "1"
			},
			timepattern: {
				"syntax": "[h:]m|mm:s|ss",
				"description": Granite.I18n.get("Sets the pattern for the time to display in the time bubble. Setting <code>h</code> represents hours, <code>m</code> represents minutes, and <code>s</code> represents seconds. The number of letters used for each time unit determines the number of digits to display for the unit. If the number cannot fit into the given digits, the equivalent value is displayed in the subsequent unit. For example, if the current movie time is 67 minutes and 5 seconds, the time pattern <code>m:ss</code> displays as 67:05. The same time appears as 1:07:5 when the given time pattern is <code>h:mm:s</code>."),
				"default": "m:ss"
			}
		},
		"s7sdk.video.VideoTime": {
			showduration: {
				"syntax": "0|1",
				"description": Granite.I18n.get("If set to <code>1</code>, both the played time and the total time--or duration-- is displayed. To show only the currently played time, set to <code>0</code>."),
				"default": "1"
			},
			timepattern: {
				"syntax": "[h:]m|mm:s|ss",
				"description": Granite.I18n.get("Sets the pattern for the time to displays in the timecode area. Setting <code>h</code> represents hours, <code>m</code> represents minutes, and <code>s</code> represents seconds. The number of letters used for each time unit determines the number of digits to display for the unit. If the number cannot fit into the given digits, the equivalent value is displayed in the subsequent unit. For example, if the current movie time is 67 minutes and 5 seconds, the time pattern <code>m:ss</code> displays as 67:05. The same time appears as 1:07:5 when the given time pattern is <code>h:mm:s</code>."),
				"default": "m:ss"
			}
		},
		"s7sdk.set.CarouselView": {
			iscommand: {
				"syntax": "value",
				"description": Granite.I18n.get("The Image Serving command string that is applied to the image when requesting image data. If specified in the URL, all occurrences of &apos;&amp;&apos; and &apos;=&apos; must be HTTP-encoded as <code>%26</code> and <code>%3D</code>, respectively."),
				"default": ""
			},
			frametransition: {
				"syntax": "none|fade|slide[,duration[,spacing]]",
				"description": Granite.I18n.get("Specifies the type and duration of the effect that is applied on frame change. Use <code>none</code> for no transition; that is, frame change occurs instantly. Use <code>fade</code> for a cross-fade transition between old and new frames, with transition duration in seconds controlled by <i>duration</i>. Use <code>slide</code> to activate the transition where the old frame slides out of the view and the new frame slides in. Slide animation duration is controlled in seconds by the <i>duration</i> element. The spacing between adjacent frames is controlled with <i>spacing</i>. The spacing has the range between <code>0</code> and <code>1</code> and is relative to the component&apos;s width."),
				"default": "none"
			},
			maxloadradius: {
				"syntax": "-1|0|preloadnbr",
				"description": Granite.I18n.get("Specifies the component preload behavior. When set to <code>-1</code>, the component preloads all image set frames when in an idle state. When set to <code>0</code>, the component loads only the frame that is currently visible. Use <i>preloadnbr</i> to define how many invisible frames around the currently displayed frame are preloaded in an idle state."),
				"default": "1"
			},
			enablehd: {
				"syntax": "always|never|limit,<number>",
				"description": Granite.I18n.get("Enable, limit, or disable optimization for devices where <code>devicePixelRatio</code> is greater than 1.  If using the <code>limit</code> setting, the largest value that works for all devices is the <i>value</i> of the larger of width or height for the <b>Reply Image Size Limit</b> setting in Scene7 Publishing System (see Setup > Application Setup > Publish Setup > Image Server, then look under the Request Attributes heading.)"),
				"default": "limit,1500"
			},
			fmt: {
				"syntax": "jpg|jpeg|png|png-alpha|gif|gif-alpha",
				"description": Granite.I18n.get("Specifies the image format used by the component for loading images from Image Server. If the specified format ends with &quot;-alpha&quot;, the component renders images as transparent. For all other image formats, the component treats images as opaque. Note that the component has a white background by default. Therefore, to make it completely transparent set the <code>background-color</code> CSS property to <code>transparent</code>"),
				"default": "jpeg"
			},
			autoplay: {
				"syntax": "0|1",
				"description": Granite.I18n.get("Specifies on/off, duration to display each banner in the carousel and direction of auto-loop. Set <code>0</code> for auto-loop off. Set <code>1</code> to auto-loop on with transition duration in seconds controlled by <i>duration</i>. The direction of auto-loop is controlled with <i>direction</i>. The direction has the range between <code>1</code> right-to-left and <code>0</code> left-to-right."),
				"default": "1"
			}
		},
		"s7sdk.set.SetIndicator": {
			mode: {
				"syntax": "numeric|dotted",
				"description": Granite.I18n.get("Configures the rendering style of the set indicator. When set to <code>dotted</code> the component should render identical indicators for all pages. When set to <code>numeric</code> it will put a 1-based page number inside each indicator element."),
				"default": "dotted"
			},
			autohide: {
				"syntax": "0|1[,<i>limit</i>]",
				"description": Granite.I18n.get("Configures auto-hide behavior depending on number of pages and run-time component size. <code>0</code> turns the auto-hide off. <code>1</code> enables the auto-hide. The component will hide its dots if at least one of the following conditions will turn true: (a) the row with dots will become wider than the run-time component width or (b) number of pages set for this component exceeds the limit configured by <code>limit</code> parameter. Setting <code>limit</code> to <code>-1</code> disables the second auto-hide condition."),
				"default": "0,1"
			}
		},
		"s7sdk.set.Swatches2": {
			iscommand: {
				"syntax": "value",
				"description": Granite.I18n.get("The Image Serving command string that is applied to the image when requesting image data. If specified in the URL, all occurrences of &apos;&amp;&apos; and &apos;=&apos; must be HTTP-encoded as <code>%26</code> and <code>%3D</code>, respectively."),
				"default": ""
			},
			scrolltransition: {
				"syntax": "value",
				"description": Granite.I18n.get("Specifies the duration of scroll animation in seconds."),
				"default": "0.3"
			},
			autoscroll: {
				"syntax": "0|1",
				"description": Granite.I18n.get("Enables or disables autoscroll in the component."),
				"default": "1"
			},
			scrollbar: {
				"syntax": "0|1",
				"description": Granite.I18n.get("Enables or disables native browser scroll bars."),
				"default": "0"
			},
			maxloadradius: {
				"syntax": "-1|0|preloadnbr",
				"description": Granite.I18n.get("Specifies the component preload behavior when <code>pagethumb</code> is set to <code>image</code>. When set to <code>-1</code>, thumbnails for all frames are loaded simultaneously when the component is initialized or the asset has changed. When set to <code>0</code>, only the thumbnail for the current position is loaded. <i>preloadnbr</i> defines how many invisible rows or columns around the visible area are preloaded."),
				"default": "1"
			},
			enablescrollbuttons: {
				"syntax": "0|1",
				"description": Granite.I18n.get("Displays or hides the scroll buttons."),
				"default": "1"
			},
			partialswatches: {
				"syntax": "0|1",
				"description": Granite.I18n.get("Enables or disables display of partially visible swatches in the component."),
				"default": "1"
			},
			fmt: {
				"syntax": "jpg|jpeg|png|png-alpha|gif|gif-alpha",
				"description": Granite.I18n.get("Specifies the image format used by the component for loading images from Image Server. It is any value supported by Image Server and the client browser. If the image_format ends with &quot;-alpha&quot;, the component renders images as transparent. For all other image format values the component treats images as opaque. You cannot use transparent images with <code>fade</code> type of <code>flyouttransition</code> in Internet Explorer 7 and 8 due to web browser limitations. In this case, the component does not play fade animation. Instead, it preserves the rest of the timing settings provided with <code>flyouttransition</code>."),
				"default": "jpeg"
			}			
		},
		"s7sdk.video.Video360Player": {
			serverurl: {
				"syntax": "isRootPath",
				"description": Granite.I18n.get("The Image Serving root path. If no domain is specified, the domain from which the page is served is applied instead. Standard URI path resolution applies."),
				"default": "/is/image/"
			},
			videoserverurl: {
				"syntax": "videoRootPath",
				"description": Granite.I18n.get("The video server root path. If no domain is specified, the domain from which the page is served is applied instead. Standard URI path resolution applies."),
				"default": "/is/content/"
			},
			contenturl: {
				"syntax": "contentRootPath",
				"description": Granite.I18n.get("The content root path. If no domain is specified, the domain from which the page is served is applied instead. Standard URI path resolution applies."),
				"default": "/is/content/"
			},
			asset: {
				"syntax": "value",
				"description": Granite.I18n.get("The asset ID of the single video or Adaptive Video Set."),
				"default": "\"\""
			},
			autoplay: {
				"syntax": "0|1",
				"description": Granite.I18n.get("Indicates whether the component starts playing the video when the load operation is successfully completed. Some systems, such as certain mobile devices, may not support autoplay."),
				"default": "1"
			},
			iconeffect: {
				"syntax": "0|1[,count][,fade][,autoHide]",
				"description": Granite.I18n.get("Enables the IconEffect to display on top of the video when the video is in a paused state. Set <i>count</i> to specify the maximum number of times the icon overlay appears and reappears.  A value of <code>-1</code> indicates that the overlay reappears indefinitely. Set <i>fade</i> to specify the duration in seconds of show or hide animation. Set <i>autoHide</i> to specify the number of seconds that the <code>IconEffect</code> stays fully visible before it auto-hides. That is, the time after fade in animation is completed and before fade out animation starts. A setting of <code>0</code> disables auto-hide behavior. On some devices or when controls are enabled using <code>playback</code> modifier, native controls are used. In such cases, the <code>iconeffect</code> modifier is ignored."),
				"default": "1,1,0.3,3"
			},
			posterimage: {
				"syntax": "none | [IS_modifiers]",
				"description": Granite.I18n.get("The image to display on the first frame before the video starts playing; resolved against <code>serverurl</code>. If specified in the URL the ? and all occurrences of & and = must be HTTP-encoded as <code>%3F</code>, <code>%26</code>, and <code>%3D</code>, respectively. This modifier works for the video content hosted on Scene7 or Dynamic Media. To prevent displaying of the default poster image, specify <code>none</code> as the poster image value."),
				"default": "\"\""
			},
			singleclick: {
				"syntax": "none|playPause",
				"description": Granite.I18n.get("Configures the mapping of single-click or tap-to-toggle play/pause. Set to <code>none</code> to disable single-click or tap-to-play/tap-to-pause. If set to <code>playPause</code>, clicking the video toggles between playing and pausing the video. On some devices, or when controls are enabled using the <code>playback</code> modifier, native controls are used. In such case, <code>singleclick</code> behavior is disabled."),
				"default": "playPause"
			},
			playback: {
				"syntax": "auto|progressive [,0|1]",
				"description": Granite.I18n.get("Sets the type of playback used by the component. When <code>auto</code> is set, on most desktop browsers the component uses HLS video playback. Otherwise, HTML5 playback is used. If <code>progressive</code> is specified, the component only relies on HTML5 playback as natively supported by browsers. For more information on the playback selection in <code>progressive</code> and <code>auto</code> modes, see the HTML5 Viewers SDK User Guide."),
				"default": "auto,0"
			},
			progressivebitrate: {
				"syntax": "value",
				"description": Granite.I18n.get("Specifies--in kbits per second or kbps--the desired video bit rate to play from the Adaptive Video Set in case the current system does not support adaptive video playback. The component picks up the video stream with the closest possible--but not exceeding--bit rate to the specified <i>value</i>. If all video streams in the Adaptive Video Set have higher quality than the specified <i>value</i>, the logic chooses the bit rate with the lowest quality."),
				"default": "700"
			},
			initialbitrate: {
				"syntax": "value",
				"description": Granite.I18n.get("Sets the bit rate of the video that the video player starts to look for in the Adaptive Video Set. If the value does not exist in the Adaptive Video Set, the video player starts with the video that has the next lowest bit rate. If set to <code>0</code>, the video player starts from the lowest possible bit rate."),
				"default": "0"
			},
			loop: {
				"syntax": "0|1",
				"description": Granite.I18n.get("Indicates whether the media plays again after playback is complete."),
				"default": "0"
			},
			waiticon: {
				"description": Granite.I18n.get("Enables or disables the buffering animation display.")
			},
            preload: {
				"description": Granite.I18n.get("Indicates whether the component begins loading video content before the playback starts. If set to '1' the video begins to download right after the asset is set, otherwise preload starts only after the playback is initiated by the end user or an API call. When video preload is disabled certain features may not work until the playback starts, specifically seek operation will not update the video frame; if poster image is disabled the component will show empty area instead of the 1st video frame. Finally, disabling video preload may be ignored on certain versions of Internet Explorer 11 and Edge browsers.")
            },
            mutevolume: {
				"description": Granite.I18n.get("Sets muted mode for video playback on initial load. If set to '1' the volume is muted, otherwise video plays with sound. On certain devices muting video playback on load will also allow to auto play the video.")
            },
			vrrender: {
				"description": Granite.I18n.get("Specifies if virtual reality rendering mode is enabled.")
			}
		},
		"s7sdk.video.SmartCropVideoPlayer": {
			serverurl: {
				"syntax": "isRootPath",
				"description": Granite.I18n.get("The Image Serving root path. If no domain is specified, the domain from which the page is served is applied instead. Standard URI path resolution applies."),
				"default": "/is/image/"
			},
			videoserverurl: {
				"syntax": "videoRootPath",
				"description": Granite.I18n.get("The video server root path. If no domain is specified, the domain from which the page is served is applied instead. Standard URI path resolution applies."),
				"default": "/is/content/"
			},
			contenturl: {
				"syntax": "contentRootPath",
				"description": Granite.I18n.get("The content root path. If no domain is specified, the domain from which the page is served is applied instead. Standard URI path resolution applies."),
				"default": "/is/content/"
			},
			asset: {
				"syntax": "value",
				"description": Granite.I18n.get("The asset ID of the single video or Adaptive Video Set."),
				"default": "\"\""
			},
			autoplay: {
				"syntax": "0|1",
				"description": Granite.I18n.get("Indicates whether the component starts playing the video when the load operation is successfully completed. Some systems, such as certain mobile devices, may not support autoplay."),
				"default": "1"
			},
			iconeffect: {
				"syntax": "0|1[,count][,fade][,autoHide]",
				"description": Granite.I18n.get("Enables the IconEffect to display on top of the video when the video is in a paused state. Set <i>count</i> to specify the maximum number of times the icon overlay appears and reappears.  A value of <code>-1</code> indicates that the overlay reappears indefinitely. Set <i>fade</i> to specify the duration in seconds of show or hide animation. Set <i>autoHide</i> to specify the number of seconds that the <code>IconEffect</code> stays fully visible before it auto-hides. That is, the time after fade in animation is completed and before fade out animation starts. A setting of <code>0</code> disables auto-hide behavior. On some devices or when controls are enabled using <code>playback</code> modifier, native controls are used. In such cases, the <code>iconeffect</code> modifier is ignored."),
				"default": "1,1,0.3,3"
			},
			posterimage: {
				"syntax": "none | [IS_modifiers]",
				"description": Granite.I18n.get("The image to display on the first frame before the video starts playing; resolved against <code>serverurl</code>. If specified in the URL the ? and all occurrences of & and = must be HTTP-encoded as <code>%3F</code>, <code>%26</code>, and <code>%3D</code>, respectively. This modifier works for the video content hosted on Scene7 or Dynamic Media. To prevent displaying of the default poster image, specify <code>none</code> as the poster image value."),
				"default": "\"\""
			},
			singleclick: {
				"syntax": "none|playPause",
				"description": Granite.I18n.get("Configures the mapping of single-click or tap-to-toggle play/pause. Set to <code>none</code> to disable single-click or tap-to-play/tap-to-pause. If set to <code>playPause</code>, clicking the video toggles between playing and pausing the video. On some devices, or when controls are enabled using the <code>playback</code> modifier, native controls are used. In such case, <code>singleclick</code> behavior is disabled."),
				"default": "playPause"
			},
			playback: {
				"syntax": "auto|progressive [,0|1]",
				"description": Granite.I18n.get("Sets the type of playback used by the component. When <code>auto</code> is set, on most desktop browsers the component uses HLS video playback. Otherwise, HTML5 playback is used. If <code>progressive</code> is specified, the component only relies on HTML5 playback as natively supported by browsers. For more information on the playback selection in <code>progressive</code> and <code>auto</code> modes, see the HTML5 Viewers SDK User Guide."),
				"default": "auto,0"
			},
			progressivebitrate: {
				"syntax": "value",
				"description": Granite.I18n.get("Specifies--in kbits per second or kbps--the desired video bit rate to play from the Adaptive Video Set in case the current system does not support adaptive video playback. The component picks up the video stream with the closest possible--but not exceeding--bit rate to the specified <i>value</i>. If all video streams in the Adaptive Video Set have higher quality than the specified <i>value</i>, the logic chooses the bit rate with the lowest quality."),
				"default": "700"
			},
			initialbitrate: {
				"syntax": "value",
				"description": Granite.I18n.get("Sets the bit rate of the video that the video player starts to look for in the Adaptive Video Set. If the value does not exist in the Adaptive Video Set, the video player starts with the video that has the next lowest bit rate. If set to <code>0</code>, the video player starts from the lowest possible bit rate."),
				"default": "0"
			},
			loop: {
				"syntax": "0|1",
				"description": Granite.I18n.get("Indicates whether the media plays again after playback is complete."),
				"default": "0"
			},
			waiticon: {
				"description": Granite.I18n.get("Enables or disables the buffering animation display.")
			},
            preload: {
				"description": Granite.I18n.get("Indicates whether the component begins loading video content before the playback starts. If set to '1' the video begins to download right after the asset is set, otherwise preload starts only after the playback is initiated by the end user or an API call. When video preload is disabled certain features may not work until the playback starts, specifically seek operation will not update the video frame; if poster image is disabled the component will show empty area instead of the 1st video frame. Finally, disabling video preload may be ignored on certain versions of Internet Explorer 11 and Edge browsers.")
            },
            mutevolume: {
				"description": Granite.I18n.get("Sets muted mode for video playback on initial load. If set to '1' the volume is muted, otherwise video plays with sound. On certain devices muting video playback on load will also allow to auto play the video.")
            }
		},
		"s7sdk.image.DimensionalView": {
			chromeless: {
				"syntax": "0|1",
				"description": Granite.I18n.get("Controls visisbility of the camera thumbnails and helper UI. When set to 1 the component hides camera thumbnails and all the UI buttons, and only the model is rendered on the screen, otherwise the UI is visible."),
				"default": "0"
			},
			cameratitles: {
				"syntax": "0|1",
				"description": Granite.I18n.get("Controls visibility of camera thumbnail titles. When set to 1 the title text will show below camera thumbnails, otherwise it is hidden."),
				"default": "0"
			}
		}        
	};

}(window.s7ve.ModifierEditor.ModifierInfo = {}, window.Granite));
