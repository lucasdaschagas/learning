/*
 * Copyright 1997-2008 Day Management AG
 * Barfuesserplatz 6, 4001 Basel, Switzerland
 * All Rights Reserved.
 *
 * This software is the confidential and proprietary information of
 * Day Management AG, ("Confidential Information"). You shall not
 * disclose such Confidential Information and shall use it only in
 * accordance with the terms of the license agreement you entered into
 * with Day.
 */


/**
 * The component list holds the list of allowed components for a page and
 * is also used by the container widgets to get their respective components.
 * @class CQ.wcm.ComponentList
 *
 * @constructor
 * @param {String} path page path
 * @param {Object} components all component descriptors from page info
 * (defaults to {@link CQ.wcm.ComponentList#ComponentList.MAX_GROUPS MAX_GROUPS}).
 */
CQ.wcm.ComponentList = CQ.Ext.extend(CQ.Ext.util.Observable, {

    /**
     * Page path
     * @type String
     */
    path: null,

    /**
     * all components (from page info)
     * @type Object
     */
    allComponents: null,

    /**
     * all allowed components. Set of resource types.
     * @type Object
     */
    allowedComponents: {},

    /**
     * internal string to detect changes in the component list
     * @type String
     */
    allowedString: "",

    /**
     * map of allowed components per cell.
     * (key: cellSearchPath, value: Set of resource types)
     * @type Object
     */
    allowedByCell: {},


    constructor: function(path, components) {
        this.path = path;
        this.allComponents = components;
        this.allowedByCell = {};

        this.addEvents(
            /**
             * @event updatecomponents
             * Fires after the list of components was updated.
             * @param {CQ.wcm.ComponentList} cl this component list
             */
            'updatecomponents'
        );
    },

    /**
     * update the list for the given cell
     * @param {CQ.wcm.Cell} cell the cell
     * @param {Array} allowed array of component resource types or groups.
     */
    update: function(cell, allowed) {
        var sp = cell.getSearchExpression();
        // console.log("update", this, sp, allowed);
        var hash = this.allowedString;
        if (allowed) {
            allowed = CQ.Ext.isArray(allowed) ? allowed : [allowed];
            var rts = {};
            var num = 0;
            for (var i = 0; i < allowed.length; i++) {
                var rt = allowed[i];
                var prefix = rt.substring(0, 6);
                if (prefix == "group:") {
                    var grp = rt.substring(6);
                    // explode groups
                    // console.log("exploding group " + grp);
                    for (rt in this.allComponents) {
                        if (this.allComponents[rt].group == grp 
                                // allow group wildcard but hide groups starting with . (dot)
                                || (grp == "*" && this.allComponents[rt].group && !this.allComponents[rt].group.match(/^\..*/))) {
                            rts[rt] = true;
                            num++;
                            // console.log("...adding " + rt);
                        }
                    }
                } else {
                    if (prefix == "/libs/" || prefix == "/apps/") {
                        rt = rt.substring(6);
                    }
                    rts[rt] = true;
                    num++;
                    // console.log("...adding " + rt);
                }
            }
            this.allowedByCell[sp] = rts;
            if (num > 0) {
                this.refresh();
            }
        } else {
            var exists = !!this.allowedByCell[sp];
            delete this.allowedByCell[sp];
            if (exists) {
                this.refresh();
            }
        }
        // check if list has modified
        if (hash != this.allowedString) {
            this.fireEvent('updatecomponents', this);
        }
    },

    /**
     * refreshes the set of all allowed components
     * @private
     */
    refresh: function() {
        var ac = {};
        var hash = "";
        for (var sp in this.allowedByCell) {
            var rts = this.allowedByCell[sp];
            if (rts) {
                for (var rt in rts) {
                    ac[rt] = true;
                    hash += rt + ",";
                }
            }
        }
        this.allowedComponents = ac;
        this.allowedString = hash;
    },

    /**
     * Returns all available components
     * @return {Object} object of component descriptors
     */
    getAllComponents: function() {
        return this.allComponents;
    },

    /**
     * Returns the component descriptor for the given resource type
     * @param {String} resourceType the resource type
     * @return {Object} a component descriptor
     */
    getComponent: function(resourceType) {
        return this.allComponents[resourceType];
    },

    /**
     * Returns all allowed components. If cell is null, all allowed
     * components are returned.
     * @param {CQ.wcm.Cell} cell the cell or null
     * @return {Object} object of component descriptors
     */
    getAllowedComponents: function(cell) {
        var allowed;
        if (cell) {
            allowed = this.allowedByCell[cell.getSearchExpression()];
            if (!allowed) {
                return {};
            }
        } else {
            allowed = this.allowedComponents;
        }

        var comps = {};
        for (var rt in allowed) {
            comps[rt] = this.allComponents[rt];
        }
        return comps;
    },

    /**
     * Checks if the component specified by the given resource type is allowed
     * for the given cell. if no cell is specified, all allowed components are
     * checked.
     * @param {String} resourceType resource type
     * @param {CQ.wcm.Cell} cell optional cell
     * @return {Boolean} true if allowed.
     */
    isAllowed: function(resourceType, cell) {
        return !!this.getAllowedComponents(cell)[resourceType];
    }

});

// static methods, used in all windows

/**
 * Record for component store
 * @type CQ.Ext.data.Record
 * @private
 * @static
 */
CQ.wcm.ComponentList.RECORD = CQ.Ext.data.Record.create([
    { name: "path" },
    { name: "title" },
    { name: "description" },
    { name: "thumbnail" },
    { name: "icon" },
    { name: "virtual" },
    { name: "config" },
    { name: "dialog" }
]);

/**
 * Template for component view
 * @type CQ.Ext.XTemplate
 * @private
 * @static
 */
CQ.wcm.ComponentList.TEMPLATE = new CQ.Ext.XTemplate(
    '<tpl for=".">',
        '<table cellspacing="0" class="x-btn x-btn-noicon {[CQ.DOM.encodeClass(values.title, "cq-cmpt")]}" title="{description}"><tbody>',
        '<tr><td class="x-btn-tl"><i>&#160;</i></td><td class="x-btn-tc"></td><td class="x-btn-tr"><i>&#160;</i></td></tr>',
        '<tr><td class="x-btn-ml"><i>&#160;</i></td><td class="x-btn-mc"><em unselectable="on">',
            '<button class="x-btn-text {[CQ.DOM.encodeClass(values.path)]}" type="button"',
            '<tpl if="icon">',
                ' style="background:transparent url({icon}) 0 3px no-repeat;padding:3px 0pt 2px 18px"',
            '</tpl>',
            '>{title}</button>',
        '</em></td><td class="x-btn-mr"><i>&#160;</i></td></tr>',
        '<tr><td class="x-btn-bl"><i>&#160;</i></td><td class="x-btn-bc"></td><td class="x-btn-br"><i>&#160;</i></td></tr>',
        '</tbody></table>',
    '</tpl>'
);

/**
 * Loads the component list of the given content path to the given panel.
 * If <code>editing</code> is defined this function is called by a
 * an insert component. A click listener will be added to each component
 * which calls the <code>selectInsertComponent</code> method of the
 * editing.
 * If <code>editing</code> is undefined this function is called by the
 * Sidekick and DD is added.
 * @param {CQ.wcm.ComponentList} cl the component list
 * @param {CQ.Ext.Panel} panel  The panel where to render the list to
 * @param {CQ.wcm.EditBase} editing  (optional) The editing
 * @param {Boolean} ignoreIsContainer (optional) True to ignore the editable.isContainer
 *        property (and always take the parent editing as permission target)
 */
CQ.wcm.ComponentList.loadPanel = function(cl, panel, editing, ignoreIsContainer) {
    var cell = editing
            ? (editing.isContainer && !ignoreIsContainer
                    ? editing.getCell() : editing.getParent().getCell())
            : null;

    cl.panel = panel;

    //todo: #18440 - empty paragraph selection if only one type of component is selected in design mode
    //                if (!isSidekick) {
    //                    var count = 0;
    //                    var cmp = null;
    //                    for (var elem in components) {
    //                        cmp = components[elem];
    //                        count++;
    //                        if (count == 2) break;
    //                    }
    //                    if (count == 1) {
    //                        //todo: selectInsertComponent currently uses record
    //                        editing.selectInsertComponent(cmp);
    //                        //todo: avoid component list dialog
    //                        return false;
    //                    }
    //                }
    // get list of allowed components
    var key = cell
            ? cell.getSearchExpression()
            : "__sidekick__";

    var components = cl.getAllowedComponents(cell);

    // update the component stores
    var compStores = new CQ.Ext.util.MixedCollection();
    CQ.wcm.ComponentList.updateStores(compStores, components, !!cell);

    compStores.each(function(compStore, index, total) {
        // localize group title explicitly and not via CQ.Util.formatData() doing a getVarMessage()
        var groupTitle = compStore.group;
        if (groupTitle.toUpperCase() === "GENERAL") {
            groupTitle = CQ.I18n.get("General", "Short label for general component group");
        } else if (groupTitle.toUpperCase() === "OTHER") {
            groupTitle = CQ.I18n.get("Other", "Short label for component group that collects 'other' components");
        } else {
            groupTitle = CQ.I18n.getVar(groupTitle);
        }
        groupTitle = !CQ.Ext.isIE8 ? groupTitle : CQ.Ext.util.Format.htmlEncode(groupTitle);

        panel.add(
            new CQ.Ext.Panel(CQ.Util.formatData({
                "title": "", // to make title_noI18n below work in formatData()
                "title_noI18n": groupTitle,
                "cls":"cq-sidekick-buttons " + CQ.DOM.encodeClass(compStore.group, "cq-cmpts"),
                "autoScroll": true,
                "containerScroll": true,
                "border":false,
                "layout":"fit",
                "items": CQ.wcm.ComponentList.createDataView(compStore, editing),
                "listeners": {
                    "collapse": function() {
                        if (editing) {
                            // clear selection of data view
                            this.get(0).clearSelections();
                            editing.selectInsertComponent(null);
                        }
                    }
                }
            }))
        );
    }, this);
    panel.doLayout();
};

/**
 * The allowed maximum of groups. Exceeding it introduces the virtual group
 * "Other" which contains the consolidated list of components from the smallest
 * groups. Defaults to 4 (not including the "Other" group).
 * @static
 * @type Number
 */
CQ.wcm.ComponentList.MAX_GROUPS = 4;

/**
 * The required minimum of components in a group to prevent consolidation in
 * case {@link CQ.wcm.ComponentList#ComponentList.MAX_GROUPS MAX_GROUPS} is exceeded.
 * Groups with fewer components will be consolidated into the "Other" group.
 * Defaults to 3.
 * @static
 * @type Number
 */
CQ.wcm.ComponentList.MIN_COMPS = 3;

/**
 * updates the given component stores
 * @param {CQ.Ext.util.MixedCollection} cs stores
 * @param {Object} components object of components
 */
CQ.wcm.ComponentList.updateStores = function(cs, components) {
    for (var p in components) {
        var comp = components[p];
        if (!comp) {
            // skip illegal entries
            continue;
        }
        if (!comp.icon) {
            comp.icon = CQ.HTTP.externalize(CQ.themes.wcm.Sidekick.ICON_COMPONENT);
        }
        comp.icon = CQ.shared.HTTP.getXhrHookedURL(comp.icon);

        var group = comp.group;
        if (group == null || group == "") {
            group = "General";
        }

        // get according store
        var compStore;
        if (cs.containsKey(group)) {
            compStore = cs.item(group);
        } else {
            compStore = new CQ.Ext.data.Store({
                "sortInfo":{
                    "field": "title",
                    "direction": "ASC"
                },
                "reader": new CQ.Ext.data.DataReader({}, CQ.wcm.ComponentList.RECORD)
            });
            compStore.group = group;
            cs.add(group, compStore);
        }
        comp.title = CQ.I18n.getVarMessage(comp.title);
        compStore.addSorted(new CQ.Ext.data.Record(comp, p));
    }

    // check if max # of groups exceeded
    if (cs.getCount() > CQ.wcm.ComponentList.MAX_GROUPS) {
        var otherGroup = "Other";
        if (cs.containsKey(otherGroup)) {
            compStore = cs.item(otherGroup);
        } else {
            compStore = new CQ.Ext.data.Store({
                "sortInfo":{
                    "field": "title",
                    "direction": "ASC"
                },
                "reader": new CQ.Ext.data.DataReader({}, CQ.wcm.ComponentList.RECORD)
            });
            compStore.group = otherGroup;
        }
        // consolidate groups with less than min # of components (except general)
        cs.each(function(store) {
            if (store.group.toUpperCase() == "GENERAL") {
                return;
            }
            if (store.getCount() < CQ.wcm.ComponentList.MIN_COMPS) {
                store.each(function(rec) {
                    compStore.add(rec);
                });
                cs.remove(store);
            }
        });
        // check if max # of groups still exceeded (without consolidated group)
        if (cs.getCount() > CQ.wcm.ComponentList.MAX_GROUPS) {
            // sort groups by # of components
            cs.sort("ASC", function(a, b) {
                var ac = a.getCount();
                var bc = b.getCount();
                if (ac > bc) {
                    return 1;
                } else if (ac < bc) {
                    return -1;
                } else {
                    return 0;
                }
            });
            // consolidate smallest groups until max # of groups reached
            while (cs.getCount() > CQ.wcm.ComponentList.MAX_GROUPS) {
                var store = cs.first();
                store.each(function(rec) {
                    compStore.add(rec);
                });
                cs.remove(store);
            }
        }
        cs.add(otherGroup, compStore);
    }

    // sort the stores by their i18n names
    cs.sort("ASC", function(a, b) {
        var aGroup = a.group.toUpperCase();
        var aGroupI18n = CQ.I18n.getVarMessage(a.group);
        var bGroup = b.group.toUpperCase();
        var bGroupI18n = CQ.I18n.getVarMessage(b.group);

        // general always at the top
        if (aGroup == "GENERAL") {
            return -1;
        } else if (bGroup == "GENERAL") {
            return 1;
        }
        // other always at the bottom
        if (aGroup == "OTHER") {
            return 1;
        } else if (bGroup == "OTHER") {
            return -1;
        }
        // normal alpha sorting for rest
        if (aGroupI18n > bGroupI18n) {
            return 1;
        }
        if (aGroupI18n < bGroupI18n) {
            return -1;
        }
        return 0;
    });

    return cs;
};

/**
 * Creates a data view for the given component store
 * @param {CQ.Ext.data.Store} componentStore store
 * @param {CQ.wcm.EditBase} editing editable
 */
CQ.wcm.ComponentList.createDataView = function(componentStore, editing) {
    var listeners = {};
    if (!editing) {
        listeners["render"] = function(comp) {
            var config = {
                containerScroll:false
            };
            if (CQ.utils.WCM.getContentFinder()) {
                comp.dragZone = new CQ.wcm.Sidekick.DragZone4ContentFinder(comp, config);
            } else {
                comp.dragZone = new CQ.wcm.Sidekick.DragZone(comp, config);
            }
            comp.dragZone.addToGroup(CQ.wcm.EditBase.DD_GROUP_COMPONENT);
            comp.dragZone.removeFromGroup(CQ.wcm.EditBase.DD_GROUP_DEFAULT);
            CQ.wcm.Sidekick.componentsWithDragZone.push(comp);
        };
    } else {
        listeners["click"] = function(dataView) {
            try {
                editing.selectInsertComponent(dataView.getSelectedRecords()[0]);
            }
            catch (e) {
            }
        };
    }
    return new CQ.Ext.DataView({
        "tpl": CQ.wcm.ComponentList.TEMPLATE,
        "autoHeight": true,
        "autoWidth": true,
        "border":false,
        "singleSelect":true,
        "multiSelect":false,
        "overClass":"x-btn-over",
        "selectedClass":"x-btn-selected",
        "itemSelector":"table.x-btn",
        "loadingText":CQ.I18n.getMessage("Loading components"),
        "listeners": listeners,
        "store": componentStore,
        "prepareData": function(data) {
            data.description = data.description ? CQ.I18n.getVarMessage(data.description) : "";
            if (data.virtual) {
                data.virtualResourceType = data.path.substring(data.path.indexOf("/", 1) + 1);
            }
            return data;
        }
    });
};