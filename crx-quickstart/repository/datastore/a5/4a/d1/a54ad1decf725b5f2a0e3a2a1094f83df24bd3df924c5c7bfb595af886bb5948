/*
  ADOBE CONFIDENTIAL

  Copyright 2016 Adobe Systems Incorporated
  All Rights Reserved.

  NOTICE:  All information contained herein is, and remains
  the property of Adobe Systems Incorporated and its suppliers,
  if any.  The intellectual and technical concepts contained
  herein are proprietary to Adobe Systems Incorporated and its
  suppliers and may be covered by U.S. and Foreign Patents,
  patents in process, and are protected by trade secret or copyright law.
  Dissemination of this information or reproduction of this material
  is strictly forbidden unless prior written permission is obtained
  from Adobe Systems Incorporated.
*/

;(function(channel, Granite, $) {
    "use strict";

    /*
    * Tags of the foundation autocomplete and representing the selected items
    */
    var FOUNDATION_AUTOCOMPLETE_TAG_SELECTOR = "coral-taglist[foundation-autocomplete-value] coral-tag";

    /*
    * Main selectors and data holders
    */
    var PERMISSIONS_SELECTOR = ".js-cq-sites-PermissionsProperties";
    var PERMISSIONS_PAGE_PATH_SELECTOR = ".js-cq-sites-PermissionsProperties-pagePath";
    var PERMISSIONS_USER_ACL_SELECTOR = ".js-cq-sites-PermissionsProperties-userAcl";

    /*
    * Permissions table and row selectors
    */
    var PERMISSIONS_USER_GROUP_LIST_SELECTOR = ".js-cq-sites-UserGroup-permissions";
    var PERMISSIONS_ROW_SELECTOR = ".js-cq-sites-PermissionsProperties-row";
    var PERMISSIONS_ROW_EMPTY_SELECTOR = ".js-cq-sites-PermissionsProperties-row--empty";
    var PERMISSIONS_ROW_EDIT_SELECTOR = ".js-cq-sites-PermissionsProperties-edit";
    var PERMISSIONS_ROW_DELETE_SELECTOR = ".js-cq-sites-PermissionsProperties-delete";

    /*
     * CUG table and row selectors
     */
    var PERMISSIONS_CUG_LIST_SELECTOR = ".js-cq-sites-ClosedUserGroup-permissions";
    var PERMISSIONS_CUG_ROW_SELECTOR = ".js-cq-sites-PermissionsProperties-row--closedUserGroup";
    var PERMISSIONS_CUG_ROW_DELETE_SELECTOR = ".js-cq-sites-ClosedUserGroup-delete";

    /*
    * Actions to open dialogs
    */
    var PERMISSIONS_ADD_PERMISSIONS_SHOW_SELECTOR = ".js-cq-sites-AddPermissionsDialog-show";
    var PERMISSIONS_CLOSED_USER_GROUP_SHOW_SELECTOR = ".js-cq-sites-ClosedUserGroupDialog-show";
    var PERMISSIONS_ACTION_SHOW_EFFECTIVE_PERMISSIONS_DIALOG_SELECTOR = ".js-cq-sites-EffectivePermissionsDialog-show";

    /*
    * Dialogs
    */
    var PERMISSIONS_DIALOG_CREATE_SELECTOR = ".js-cq-sites-CreatePermissionsDialog";
    var PERMISSIONS_DIALOG_CREATE_ADD_SELECTOR = ".js-cq-sites-CreatePermissionsDialog-add";
    var PERMISSIONS_DIALOG_CREATE_AUTHORIZABLE_LIST_SELECTOR = ".js-cq-sites-CreatePermissionsDialog-authorizableList";
    var PERMISSIONS_DIALOG_EDIT_SELECTOR = ".js-cq-sites-EditPermissionsDialog";
    var PERMISSIONS_DIALOG_EDIT_UPDATE_SELECTOR = ".js-cq-sites-EditPermissionsDialog-update";
    var PERMISSIONS_DIALOG_EFFECTIVE_PERMISSIONS_SELECTOR = ".js-cq-sites-EffectivePermissionsDialog";
    var PERMISSIONS_DIALOG_CUG_SELECTOR = ".js-cq-sites-CUGPermissionsDialog";
    var PERMISSIONS_DIALOG_CUG_AUTHORIZABLE_LIST_SELECTOR = ".js-cq-sites-CUGPermissionsDialog-authorizableList";
    var PERMISSIONS_DIALOG_CUG_SAVE_SELECTOR = ".js-cq-sites-CUGPermissionsDialog-save";
    var PERMISSIONS_DIALOG_ACL_SUBMIT_SELECTOR = ".js-cq-sites-PermissionsDialog-aclSubmit";

    /*
    * Acl variants selectors
    */
    var PERMISSIONS_ACL_SELECTOR = ".js-cq-sites-PermissionsProperties-acl";
    var PERMISSIONS_ACL_READ_CLASS = "js-cq-sites-PermissionsProperties-acl--read";
    var PERMISSIONS_ACL_MODIFY_CLASS = "js-cq-sites-PermissionsProperties-acl--modify";
    var PERMISSIONS_ACL_DELETE_CLASS = "js-cq-sites-PermissionsProperties-acl--delete";
    var PERMISSIONS_ACL_REPLICATED_CLASS = "js-cq-sites-PermissionsProperties-acl--replicate";
    var PERMISSIONS_ACL_CREATE_CLASS = "js-cq-sites-PermissionsProperties-acl--create";

    /*
    * Deprecated CUG Configuration warning selector
     */
    var DEPRECATED_CUG_CONFIG_SELECTOR = "[data-deprecated-cugconfig]";

    /**
     * Icon for non-existing principals
     */
    var DEFAULT_NONEXISTANT_PRINCIPAL_ICON = "/libs/granite/security/clientlib/themes/default/resources/sample-group-thumbnail.36.png";

    /**
     * Labels used in the form
     */
    var labels = {
        deletePermissionsTitle: Granite.I18n.get("Delete permission"),
        deletePermissionsDescription: Granite.I18n.get("Do you really want to delete permissions for this user/group?"),
        deleteCUGEntryTitle: Granite.I18n.get("Delete Closed User Group entry"),
        deleteCUGEntryDescription: Granite.I18n.get("Do you really want to remove the entry from the Closed User Group?"),
        cancel: Granite.I18n.get("Cancel"),
        deleteText: Granite.I18n.get("Delete"),
        permissionsEmptyRowLabel: Granite.I18n.get("There is no item.")
    };

    /**
     * Foundation UI library
     */
    var ui = $(window).adaptTo("foundation-ui");

    /**
     * Edit Dialog
     *
     * @type {Coral.Dialog}
     */
    var editDialog;

    /**
     * Create Dialog
     *
     * @type {Coral.Dialog}
     */
    var createDialog;

    /**
     * Closed User Group Dialog
     *
     * @type {Coral.Dialog}
     */
    var cugDialog;

    /**
     * Effective Permissions Dialog
     *
     * @type {Coral.Dialog}
     */
    var effectivePermissionsDialog;

    /**
     * Row template
     *
     * @type {function}
     */
    var rowTemplate;
    /**
     * CUG row template
     *
     * @type {function}
     */
    var cugRowTemplate;

    /**
     * Config for the Permissions empty row
     *
     * @type {{label: string}}
     */
    var permissionsEmptyRowTemplateConfig = {label: labels.permissionsEmptyRowLabel};

    /**
     * Empty row template
     *
     * @type {function}
     */
    var emptyRowTemplate;

    /**
     * List of user groups
     *
     * @type {HTMLElement}
     */
    var userGroupList;

    /**
     * List of Closed User Group entries
     *
     * @type {HTMLElement}
     */
    var closedUserGroupList;

    /**
     * Page path
     *
     * @type {string}
     */
    var pagePath;

    /**
     * Does the user has acl edit availabe on the resource
     *
     * @type {boolean}
     */
    var userAclEdit;

    /**
     * Builds the effective acl content
     */
    function buildEffectiveAcl() {
        var $deferred = $.Deferred();

        $.get(
            Granite.HTTP.externalize(effectivePermissionsDialog.dataset.effectiveAclSrc),
            {'_dc': new Date().getTime()}
        ).done(function (html) {
            var content = $.parseHTML(html);
            Coral.commons.ready(effectivePermissionsDialog, function () {
                var i;
                var col;

                // Find the first element that is a foundation-collection node element
                for (i = 0; i < content.length; i++) {
                    var element = content[i];
                    if (!element.querySelector) {
                        continue;
                    }

                    col = element.querySelector(".foundation-collection");

                    if (col) {
                        break;
                    }
                }

                // Append the found collection
                if (col) {
                    if (!col.classList.contains("list")) {
                        col.classList.add("list");
                    }

                    effectivePermissionsDialog.content.innerHTML = null;
                    effectivePermissionsDialog.content.appendChild(col);
                }

                // Shorten paths
                var shortenPaths = effectivePermissionsDialog.content.querySelectorAll(".shortenpath");

                for (i = 0; i < shortenPaths.length; i++) {
                    var el = $(shortenPaths[i]);
                    if (el.data("shortened")) {
                        continue;
                    }

                    (new Granite.UI.Shortener(el)).shorten();

                    el.data("shortened", true);
                }

                $deferred.resolve();
            });
        });

        return $deferred.promise();
    }

    /**
     * Updates the state of the selected checkbox
     *
     * @param dialog
     * @param selector
     * @param value
     */
    function updatePermissionCheckbox(dialog, selector, value) {
        var checkbox = dialog.querySelector(selector);
        if (checkbox) {
            checkbox.checked = value;
        }
    }

    /**
     * Updates the ACLs contained in the given current target HTMLElement
     *
     * @param {event} event
     */
    function updateAcl (event) {
        var dialog = event.currentTarget;
        if (event.matchedTarget.classList.contains(PERMISSIONS_ACL_READ_CLASS)) {
            // Un-checking read un-checks all other acls
            if (!event.target.checked) {
                var acls = dialog.querySelectorAll(PERMISSIONS_ACL_SELECTOR);

                if (acls) {
                    for (var i = 0; i < acls.length; i++) {
                        acls[i].checked = false;
                    }
                }
            }
        } else if (event.matchedTarget.classList.contains(PERMISSIONS_ACL_MODIFY_CLASS)) {
            // Un-checking modify unchecks delete
            if (!event.target.checked) {
                dialog.querySelector("." + PERMISSIONS_ACL_DELETE_CLASS).checked = false;
            }
        } else if (event.matchedTarget.classList.contains(PERMISSIONS_ACL_DELETE_CLASS)) {
            // Checking delete also checks modify
            if (event.target.checked) {
                dialog.querySelector("." + PERMISSIONS_ACL_MODIFY_CLASS).checked = true;
            }
        }

        if (event.target.checked) {
            // Read is required by all other acls
            var readCheckbox = dialog.querySelector("." + PERMISSIONS_ACL_READ_CLASS);

            if (readCheckbox) {
                readCheckbox.checked = true;
            }
        }
    }

    /**
     * Initializes the selected autocomplete element
     *
     * @param selector
     */
    function initAutocomplete(selector) {
        var authorizableAutocomplete = document.querySelector(selector);

        if (authorizableAutocomplete) {
            authorizableAutocomplete.clear();
        }
    }

    /**
     * Initializes the create permissions dialog
     *
     * @param dialog
     */
    function initCreateDialog (dialog) {
        initAutocomplete(PERMISSIONS_DIALOG_CREATE_AUTHORIZABLE_LIST_SELECTOR);

        var aclCheckbox = dialog.querySelectorAll(PERMISSIONS_ACL_SELECTOR);
        // Uncheck all the permissions
        for (var i = 0; i < aclCheckbox.length; i++) {
            aclCheckbox[i].checked = false;
        }

        // Disabled the submit button by default
        var submit = dialog.querySelector(PERMISSIONS_DIALOG_ACL_SUBMIT_SELECTOR);
        submit.disabled = true;
    }

    /**
     * Initialized the CUG dialog
     */
    function initCugDialog () {
        initAutocomplete(PERMISSIONS_DIALOG_CUG_AUTHORIZABLE_LIST_SELECTOR);
    }

    /**
     * Initializes the edit permissions dialog
     *
     * @param dialog
     * @param aclConfig
     */
    function initEditDialog (dialog, aclConfig) {
        updatePermissionCheckbox(dialog, "." + PERMISSIONS_ACL_READ_CLASS, aclConfig.read);
        updatePermissionCheckbox(dialog, "." + PERMISSIONS_ACL_MODIFY_CLASS, aclConfig.modify);
        updatePermissionCheckbox(dialog, "." + PERMISSIONS_ACL_DELETE_CLASS, aclConfig["delete"]);
        updatePermissionCheckbox(dialog, "." + PERMISSIONS_ACL_REPLICATED_CLASS, aclConfig.replicate);
        updatePermissionCheckbox(dialog, "." + PERMISSIONS_ACL_CREATE_CLASS, aclConfig["create"]);

        // If no Access Control Entry is enabled, disable the submit button
        var disabled = !(dialog.querySelector(PERMISSIONS_ACL_SELECTOR + " input[type='checkbox']:checked"));

        var submit = dialog.querySelector(PERMISSIONS_DIALOG_ACL_SUBMIT_SELECTOR);
        submit.disabled = disabled;
    }

    /**
     * Show the empty row
     *
     * @param table
     */
    function showEmptyRow (table) {
        if (!table || table.querySelector(PERMISSIONS_ROW_EMPTY_SELECTOR)) {
            return;
        }

        var body = table.querySelector("tbody");

        if (!body) {
            body = document.createElement("tbody", "coral-table-body");
            table._elements.table.appendChild(body);
        }

        body.appendChild($(emptyRowTemplate(permissionsEmptyRowTemplateConfig))[0]);

        // TODO: once CUI-6487 is fixed
        // if (!table.body) {
        //     table.body = document.createElement("tbody", "coral-table-body");
        // }
        //
        // table.body.appendChild($(emptyRowTemplate(permissionsEmptyRowTemplateConfig))[0]);
    }

    /**
     * Delete the targeted permissions
     *
     * @param event
     */
    function deletePermissions (event) {
        var row = event.target.closest(PERMISSIONS_ROW_SELECTOR);
        var acl = JSON.parse(row.dataset.acl);

        ui.prompt(labels.deletePermissionsTitle,
            labels.deletePermissionsDescription,
            "error",
            [{
                text: labels.cancel,
                id: "no"
            },
            {
                text: labels.deleteText,
                id: "yes",
                warning: true
            }],
            function(btnId) {
                if (btnId === "yes") {
                    var settings = {
                        type: "POST",
                        data: {
                            principalName: acl.principalName,
                            path: Granite.HTTP.encodePath(pagePath),
                            action : 'remove',
                            _charset_ : "UTF-8"
                        },
                        complete: function (xhr, status) {
                            if (status === "success") {
                                var table = row.closest("table[is='coral-table']");

                                // Remove the row from the UI
                                $(row).remove();

                                // Set the empty row
                                if (table && table.items.length < 1) {
                                    showEmptyRow(table);
                                }
                            }
                        }
                    };

                    $.ajax(Granite.HTTP.externalize(pagePath + ".pagepermissions.conf"), settings);
                }
            });
    }

    /**
     * Builds a privilege object suitable for requesting an edition to the servlet
     *
     * @param key
     * @param aclConfig
     * @returns {{name: *, value: *}}
     */
    function buildPrivilege (key, aclConfig) {
        return {name: key, value: aclConfig[key]};
    }

    /**
     * Builds the list of all available privileges
     *
     * @param aclConfig
     * @returns {Array}
     */
    function getPrivileges (aclConfig) {
        var privileges = [];

        privileges.push(buildPrivilege("read", aclConfig));
        privileges.push(buildPrivilege("modify", aclConfig));
        privileges.push(buildPrivilege("delete", aclConfig));
        privileges.push(buildPrivilege("replicate", aclConfig));
        privileges.push(buildPrivilege("create", aclConfig));

        return privileges;
    }

    /**
     * Returns the state of the checkbox representing the given key
     *
     * @param container
     * @param key
     * @returns {boolean}
     */
    function getPermissionValue (container, key) {
        return container.querySelector(".js-cq-sites-PermissionsProperties-acl--" + key).checked;
    }

    /**
     * Adds a new permissions entry to the list of user groups
     *
     * @param event
     */
    function addPermissions (event) {
        var authorizableTags = createDialog.querySelectorAll(PERMISSIONS_DIALOG_CREATE_AUTHORIZABLE_LIST_SELECTOR + " " + FOUNDATION_AUTOCOMPLETE_TAG_SELECTOR);

        if (!authorizableTags) {
            return;
        }

        var newAclConfigs = [];

        for (var i = 0; i < authorizableTags.length; i++) {
            var tag = authorizableTags[i];
            var label = tag.label.innerText.trim();

            newAclConfigs.push ({
                principalName: tag.dataset.foundationAutocompleteCustomPrincipalname,
                avatar: tag.dataset.foundationAutocompleteCustomImage,
                label: label,
                read: getPermissionValue(createDialog, "read"),
                modify: getPermissionValue(createDialog, "modify"),
                "delete": getPermissionValue(createDialog, "delete"),
                replicate: getPermissionValue(createDialog, "replicate"),
                create: getPermissionValue(createDialog, "create"),
                hasAclEdit: true
            });
        }

        updatePermissions(newAclConfigs);
    }

    /**
     * Saves the Closed User Group latest state
     *
     * @param event
     */
    function saveClosedUserGroup (event) {
        var authorizableTags = cugDialog.querySelectorAll(PERMISSIONS_DIALOG_CUG_AUTHORIZABLE_LIST_SELECTOR + " " + FOUNDATION_AUTOCOMPLETE_TAG_SELECTOR);

        if (!authorizableTags) {
            return;
        }

        var newCugConfigs = [];

        for (var i = 0; i < authorizableTags.length; i++) {
            var tag = authorizableTags[i];
            var label = tag.label.innerText.trim();

            newCugConfigs.push({
                principalName: tag.dataset.foundationAutocompleteCustomPrincipalname || label,
                avatar: tag.dataset.foundationAutocompleteCustomImage || DEFAULT_NONEXISTANT_PRINCIPAL_ICON,
                label: label,
                read: true,
                modify: false,
                "delete": false,
                replicate: false,
                create: false,
                hasAclEdit: true
            });
        }

        updateClosedUserGroup(newCugConfigs);
    }

    /**
     * Returns the current ACL configurations for the given selector
     *
     * @param selector
     * @returns {Array}
     */
    function getCurrentConfigurations (selector) {
        var configurations = [];
        var rows = document.querySelectorAll(selector);

        for (var i = 0; i < rows.length; i++) {
            var row = rows[i];
            var acl = row.dataset.acl;

            if (!acl) {
                continue;
            }

            acl = JSON.parse(acl);

            configurations.push({
                principalName: acl.principalName,
                avatar: acl.avatar,
                label: acl.label,
                read: acl.read,
                modify: acl.modify,
                "delete": acl["delete"],
                replicate: acl.replicate,
                create: acl.create,
                hasAclEdit: acl.hasAclEdit
            });
        }

        return configurations;
    }

    /**
     * Updates the state of the Closed User Group entries
     *
     * @param {Object[]} [newConfigurations]
     */
    function updateClosedUserGroup (newConfigurations) {
        var i;
        var j;
        var principalNames = [];
        newConfigurations = newConfigurations || [];

        for (i = 0; i < newConfigurations.length; i++) {
            principalNames.push(newConfigurations[i].principalName);
        }

        var currentConfigurations = getCurrentConfigurations(PERMISSIONS_CUG_ROW_SELECTOR);

        for (i = 0; i < currentConfigurations.length; i++) {
            principalNames.push(currentConfigurations[i].principalName);
        }

        // In case of an empty array send an empty string as unique value of the array
        var emptyCUG = false;
        if (principalNames.length < 1) {
            emptyCUG = true;
            principalNames.push("");
        }

        var settings = {
            type: "POST",
            data: { principalNames:  principalNames, _charset_: "UTF-8" },
            complete: function (xhr, status) {
                if (status === "success") {
                    // If no more row append the empty row
                    if (currentConfigurations.length < 1 && (!newConfigurations || newConfigurations.length < 1)) {
                        showEmptyRow(document.querySelector(PERMISSIONS_CUG_LIST_SELECTOR));
                        return;
                    }

                    if (!emptyCUG) {
                        var defaultEmptyRow = closedUserGroupList.querySelector("tbody tr:not(" + PERMISSIONS_ROW_SELECTOR + ")");
                        if (defaultEmptyRow) {
                            // Remove the initial empty row
                            var parent = defaultEmptyRow.parentNode;
                            parent.removeChild(defaultEmptyRow);
                        }
                    }

                    // Only add new entries
                    var emptyRowSelector = PERMISSIONS_CUG_LIST_SELECTOR + " " + PERMISSIONS_ROW_EMPTY_SELECTOR;
                    for (i = 0; i < newConfigurations.length; i++) {
                        var found = false;
                        var newConfiguration = newConfigurations[i];

                        for (j = 0; j < currentConfigurations.length; j++) {
                            if (newConfiguration.principalName === currentConfigurations.principalName) {
                                found = true;
                                break;
                            }
                        }

                        if (!found) {
                            renderRow(closedUserGroupList, newConfiguration, PERMISSIONS_CUG_ROW_SELECTOR, emptyRowSelector, cugRowTemplate);
                        }
                    }
                }
            }
        };

        $.ajax(Granite.HTTP.externalize(pagePath + ".cugpolicy.conf"), settings);
    }

    /**
     * Remove the targeted entry from the Closed User Group
     *
     * @param event
     */
    function deleteCloseUserGroupEntry (event) {
        ui.prompt(labels.deleteCUGEntryTitle,
            labels.deleteCUGEntryDescription,
            "error",
            [{
                text: labels.cancel,
                id: "no"
            },
            {
                text: labels.deleteText,
                id: "yes",
                warning: true
            }],
            function(btnId) {
                if (btnId === "yes") {
                    var row = event.target.closest(PERMISSIONS_CUG_ROW_SELECTOR);
                    var parent = row.parentNode;
                    parent.removeChild(row);

                    updateClosedUserGroup();
                }
            });
    }

    /**
     * Displays the CUG dialog
     *
     * @param event
     */
    function editClosedUserGroup (event) {
        if (!cugDialog) {
            cugDialog = document.querySelector(PERMISSIONS_DIALOG_CUG_SELECTOR);
            cugDialog.on("click", PERMISSIONS_DIALOG_CUG_SAVE_SELECTOR, saveClosedUserGroup);
        }

        cugDialog.setAttribute("open", "");
        initCugDialog(cugDialog);
    }

    /**
     * Displays the dialog to create Permissions
     *
     * @param event
     */
    function createPermissions (event) {
        if (!createDialog) {
            createDialog = document.querySelector(PERMISSIONS_DIALOG_CREATE_SELECTOR);
            createDialog.on("click", PERMISSIONS_DIALOG_CREATE_ADD_SELECTOR, addPermissions);
            createDialog.on("click", PERMISSIONS_ACL_SELECTOR, updateAcl);
        }

        createDialog.setAttribute("open", "");
        initCreateDialog(createDialog);
    }

    /**
     * Displays the dialog to edit the Permissions
     *
     * @param event
     */
    function editPermissions (event) {
        var row = event.target.closest(PERMISSIONS_ROW_SELECTOR);
        var acl = JSON.parse(row.dataset.acl);

        if (!editDialog) {
            editDialog = document.querySelector(PERMISSIONS_DIALOG_EDIT_SELECTOR);
            editDialog.on("click", PERMISSIONS_ACL_SELECTOR, updateAcl);
        }

        // Re-scope the inner function
        editDialog.off("click", PERMISSIONS_DIALOG_EDIT_UPDATE_SELECTOR)
            .on("click", PERMISSIONS_DIALOG_EDIT_UPDATE_SELECTOR, function () {
                updatePermissions([{
                    principalName: acl.principalName,
                    avatar: acl.avatar,
                    label: acl.label,
                    read: getPermissionValue(editDialog, "read"),
                    modify: getPermissionValue(editDialog, "modify"),
                    "delete": getPermissionValue(editDialog, "delete"),
                    replicate: getPermissionValue(editDialog, "replicate"),
                    create: getPermissionValue(editDialog, "create"),
                    hasAclEdit: true
                }]);
            });

        editDialog.setAttribute("open", "");
        initEditDialog(editDialog, acl);
        return cancelDragEvent(event);
    }

    /**
     * Apply the server privileges state to the the client objects
     *
     * @param actualAcls
     * @param changeLog
     */
    function applyAclResponse (actualAcls, changeLog) {
        for (var i = 0; i < changeLog.length; i++) {
            var change = changeLog[i];

            for (var key in actualAcls) {
                if (actualAcls.hasOwnProperty(key) && key === change.principalName) {
                    var actualAcl = actualAcls[key];

                    actualAcl.read = change.privileges.read || false;
                    actualAcl.modify = change.privileges.modify || false;
                    actualAcl["delete"] = change.privileges["delete"] || false;
                    actualAcl.replicate = change.privileges.replicate || false;
                    actualAcl.create = change.privileges.create || false;
                }
            }
        }
    }

    /**
     * Updates the list of permissions
     *
     * @param {Object[]} [newAclConfigs]      - List of acl configurations
     */
    function updatePermissions (newAclConfigs) {
        var i;
        var changes = [];
        var rows = userGroupList.items.getAll();
        var actualAcls = {};

        for (i = 0; i < rows.length; i++) {
            var row = rows[i];
            if (!row.dataset.acl) {
                continue;
            }

            var acl = JSON.parse(row.dataset.acl);
            actualAcls[acl.principalName] = acl;

            changes.push({
                principalName: acl.principalName,
                privileges: getPrivileges(acl)
            });
        }

        // Update or Add acls
        if (newAclConfigs) {
            for (i = 0; i < newAclConfigs.length; i++) {
                var newAclConfig = newAclConfigs[i];
                var updated = false;

                for (var j = 0; j < changes.length; j++) {
                    if (newAclConfig.principalName === changes[j].principalName) {
                        // Update existing entry
                        actualAcls[newAclConfig.principalName] = newAclConfig;

                        changes[j] = {
                            principalName: newAclConfig.principalName,
                            privileges: getPrivileges(newAclConfig)
                        };
                        updated = true;
                        break;
                    }
                }

                // Add new entry
                if (!updated) {
                    actualAcls[newAclConfig.principalName] = newAclConfig;

                    changes.push({
                        principalName: newAclConfig.principalName,
                        privileges: getPrivileges(newAclConfig)
                    });
                }
            }
        }

        var settings = {
            predicate: 'siteadmin',
            path: Granite.HTTP.encodePath(pagePath),
            changelog: JSON.stringify(changes),
            contentType: "application/json; charset=utf-8",
            action: 'edit',
            _charset_: 'UTF-8'
        };

        $.post(Granite.HTTP.externalize(pagePath + ".pagepermissions.conf"), settings, function (data, status) {
            if (status === "success" && data.changelog) {
                var emptyRowSelector = PERMISSIONS_USER_GROUP_LIST_SELECTOR + " " + PERMISSIONS_ROW_EMPTY_SELECTOR;

                applyAclResponse(actualAcls, data.changelog);

                // Redrawing all rows
                $(rows).remove();

                if (actualAcls) {
                    for (var key in actualAcls) {
                        if (actualAcls.hasOwnProperty(key)) {
                            renderRow(userGroupList, actualAcls[key], PERMISSIONS_ROW_SELECTOR, emptyRowSelector, rowTemplate);
                        }
                    }
                }
                disableDrag();
            }
        });
    }

    /**
     * Replaces the given row by a new row given the provided acl configuration
     *
     * @param oldRow
     * @param aclConfig
     */
    function updateRow (oldRow, aclConfig) {
        var newRow = $(rowTemplate(aclConfig))[0];
        var parent = oldRow.parentElement;
        parent.replaceChild(newRow, oldRow);
    }

    /**
     * Renders a row based on the given acl configuration
     *
     * @param {HTMLElement} listElement     - Containing DOM element that represent the list to be updated
     * @param {{}} aclConfig                - Configuration to be passed to the new row
     * @param {string} rowsSelector         - Common selector of all the rows
     * @param {string} emptyRowSelector     - Selector of the empty row to be removed
     * @param {function} template           - Template to be used for the new row
     */
    function renderRow (listElement, aclConfig, rowsSelector, emptyRowSelector, template) {
        var i;
        var parent;
        aclConfig.data = JSON.stringify(aclConfig);

        // Remove the empty row if it exists
        var emptyRow = listElement.querySelector(emptyRowSelector);
        if (emptyRow) {
            parent = emptyRow.parentNode;
            parent.removeChild(emptyRow);
        }

        // Replace row if it already exists
        var rows = listElement.querySelectorAll(rowsSelector);
        for (i = 0; i < rows.length; i++) {
            var acl = JSON.parse(rows[i].dataset.acl);

            if (aclConfig.principalName === acl.principalName) {
                updateRow(rows[i], aclConfig);
                return;
            }
        }

        // Add row
        var row = $(template(aclConfig))[0];
        listElement.items.add(row);
    }

    /**
     * Initializes the row templates
     */
    function initRowTemplates() {
        rowTemplate = function (data) {
            var read = data.read ? '<coral-icon icon="check"></coral-icon>' : '';
            var modify = data.modify ? '<coral-icon icon="check"></coral-icon>' : '';
            var deleteLabel = data.delete ? '<coral-icon icon="check"></coral-icon>' : '';
            var replicate = data.replicate ? '<coral-icon icon="check"></coral-icon>' : '';
            var create = data.create ? '<coral-icon icon="check"></coral-icon>' : '';
            return `<tr is="coral-table-row" class="js-cq-sites-PermissionsProperties-row" data-acl='${data.data}'>
                      <td is="coral-table-cell" class="cq-sites-Permissions-labelColumn"> 
                          <img class="cq-sites-Permissions-thumbnail" src="${data.avatar}"/>
                          <span class="cq-sites-Permissions-label">${data.label}</span> 
                      </td> 
                      <td is="coral-table-cell" class="cq-sites-Permissions-checkColumn"> ${read} </td> 
                      <td is="coral-table-cell" class="cq-sites-Permissions-checkColumn"> ${modify} </td> 
                      <td is="coral-table-cell" class="cq-sites-Permissions-checkColumn"> ${deleteLabel} </td> 
                      <td is="coral-table-cell" class="cq-sites-Permissions-checkColumn"> ${replicate} </td> 
                      <td is="coral-table-cell" class="cq-sites-Permissions-checkColumn"> ${create} </td> 
                      <td is="coral-table-cell" class="cq-sites-Permissions-actions"> 
                          <button is="coral-button" type="button" variant="quiet" icon="edit"  
                                  class="js-cq-sites-PermissionsProperties-edit"></button> 
                          <button is="coral-button" type="button" variant="quiet" icon="delete" 
                                  class="js-cq-sites-PermissionsProperties-delete"></button> 
                      </td> 
                  </tr>`;
        };
        cugRowTemplate = function (data) {
            return `<tr is="coral-table-row"  
                       class="js-cq-sites-PermissionsProperties-row js-cq-sites-PermissionsProperties-row--closedUserGroup"  
                       data-acl='${data.data}'>
                        <td is="coral-table-cell"> 
                            <img class="cq-sites-Permissions-thumbnail" src="${data.avatar ? data.avatar : ""}"/>
                            <span class="cq-sites-Permissions-label"> ${data.label} </span> 
                        </td> 
                        <td is="coral-table-cell" class="cq-sites-Permissions-checkColumn"> 
                            <coral-icon icon="check"></coral-icon> 
                        </td> 
                        <td is="coral-table-cell" class="cq-sites-Permissions-checkColumn"></td> 
                        <td is="coral-table-cell" class="cq-sites-Permissions-checkColumn"></td> 
                        <td is="coral-table-cell" class="cq-sites-Permissions-checkColumn"></td> 
                        <td is="coral-table-cell" class="cq-sites-Permissions-checkColumn"></td> 
                        <td is="coral-table-cell" class="cq-sites-Permissions-actions"> 
                            <button is="coral-button" type="button" variant="quiet" icon="delete"  
                                    class="js-cq-sites-ClosedUserGroup-delete"></button> 
                        </td> 
                    </tr>`;
        };
        emptyRowTemplate = function (data) {
            return `<tr is="coral-table-row" class="js-cq-sites-PermissionsProperties-row--empty"> 
                     <td is="coral-table-cell" colspan="7" alignment="center"> ${data.label} </td> 
                   </tr>`;
        };
    }

    /**
     * Displays the effective permissions dialog
     */
    function displayEffectivePermissions() {
        if (!effectivePermissionsDialog) {
            effectivePermissionsDialog = document.querySelector(PERMISSIONS_DIALOG_EFFECTIVE_PERMISSIONS_SELECTOR);
        }

        buildEffectiveAcl().then(function () {
            effectivePermissionsDialog.setAttribute("open", true);
        });
    }

    /**
     * Enables the submit button of the current dialog if at least on Access Control Entry is selected
     *
     * @param event
     */
    function enableSubmitButton (event) {
        var aclElement = event.target;
        var dialog = aclElement.closest("coral-dialog");
        if (!dialog) {
            return;
        }

        var acls = dialog.querySelectorAll(PERMISSIONS_ACL_SELECTOR);
        var submitBtn = dialog.querySelector(PERMISSIONS_DIALOG_ACL_SUBMIT_SELECTOR);
        var disabled = true;

        for (var i = 0; i < acls.length; i++) {
            if (acls[i].checked) {
                disabled = false;
                break;
            }
        }

        submitBtn.disabled = disabled;
    }

    /**
     * Disables all actions that could edit the Closed User Group configuration, and displays a warning for the user
     *
     */
    function checkDeprecatedCUGConfig() {
        var deprecatedCugConfig = document.querySelector(DEPRECATED_CUG_CONFIG_SELECTOR);
        var editClosedUserGroup = document.querySelector(PERMISSIONS_CLOSED_USER_GROUP_SHOW_SELECTOR);

        if (deprecatedCugConfig && editClosedUserGroup) {
            editClosedUserGroup.disabled = true;
        }
    }

    /**
     * Cancel drag event on permission table
     */
    function cancelDragEvent(event) {
        event.preventDefault();
        event.stopPropagation();
        $("._coral-Table-row--placeholder").remove();
        return false;
    }

    /**
     * Disable dragging on permission table
     */
    function disableDrag() {
        // Cancel mouse down (required in table "User and group" because of draggable rows/Chrome)
        $(PERMISSIONS_ROW_EDIT_SELECTOR).on("mousedown", cancelDragEvent);
        $(PERMISSIONS_ROW_EDIT_SELECTOR).on("mouseup", cancelDragEvent);
        $(PERMISSIONS_ROW_DELETE_SELECTOR).on("mousedown", cancelDragEvent);
        $(PERMISSIONS_ROW_DELETE_SELECTOR).on("mouseup", cancelDragEvent);
    }

    channel.one("foundation-contentloaded", function(event) {
        var $permissionsContainer = $(PERMISSIONS_SELECTOR);

        if ($permissionsContainer.length > 0) {
            disableDrag();
            $permissionsContainer.on("click", PERMISSIONS_ROW_EDIT_SELECTOR, editPermissions);
            $permissionsContainer.on("click", PERMISSIONS_ROW_DELETE_SELECTOR, deletePermissions);
            $permissionsContainer.on("click", PERMISSIONS_CUG_ROW_DELETE_SELECTOR, deleteCloseUserGroupEntry);

            // Reordering of the User Group table rows
            $permissionsContainer.on("coral-table:roworder", PERMISSIONS_USER_GROUP_LIST_SELECTOR, function () {
                updatePermissions();
            });

            // Action bar actions
            channel.on("click", PERMISSIONS_ADD_PERMISSIONS_SHOW_SELECTOR, createPermissions);
            channel.on("click", PERMISSIONS_CLOSED_USER_GROUP_SHOW_SELECTOR, editClosedUserGroup);
            channel.on("click", PERMISSIONS_ACTION_SHOW_EFFECTIVE_PERMISSIONS_DIALOG_SELECTOR, displayEffectivePermissions);

            // Enabling the submit of the dialogs on an acl click event
            channel.on("click", PERMISSIONS_ACL_SELECTOR, enableSubmitButton);

            pagePath = document.querySelector(PERMISSIONS_PAGE_PATH_SELECTOR).value;
            userAclEdit = document.querySelector(PERMISSIONS_USER_ACL_SELECTOR).dataset.userAclEdit !== undefined;
            closedUserGroupList = document.querySelector(PERMISSIONS_CUG_LIST_SELECTOR);
            userGroupList = document.querySelector(PERMISSIONS_USER_GROUP_LIST_SELECTOR);
            userGroupList.orderable = userAclEdit;

            initRowTemplates();

            // Disable the Edit Closed User Group action if the Page uses a deprecated CUG config
            checkDeprecatedCUGConfig();
        }
    });

})($(document), Granite, Granite.$);
